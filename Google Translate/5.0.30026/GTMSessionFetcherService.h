/*
* This header is generated by classdump-dyld 1.0
* on Thursday, May 12, 2016 at 1:01:15 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/E107A69B-5FBA-4958-8D2E-301137467F53/Translate.app/Translate
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Translate/GTMSessionFetcherServiceProtocol.h>

@protocol OS_dispatch_queue, GTMFetcherAuthorizationProtocol;
@class NSOperationQueue, NSMutableDictionary, GTMSessionFetcherSessionDelegateDispatcher, NSObject, NSHTTPCookieStorage, NSString, NSURLCredential, NSMutableArray, NSDate, NSURLSessionConfiguration, NSArray, NSDictionary;

@interface GTMSessionFetcherService : NSObject <GTMSessionFetcherServiceProtocol> {

	NSMutableDictionary* _delayedFetchersByHost;
	NSMutableDictionary* _runningFetchersByHost;
	unsigned _maxRunningFetchersPerHost;
	GTMSessionFetcherSessionDelegateDispatcher* _delegateDispatcher;
	NSObject*<OS_dispatch_queue> _callbackQueue;
	NSOperationQueue* _delegateQueue;
	NSHTTPCookieStorage* _cookieStorage;
	NSString* _userAgent;
	double _timeout;
	NSURLCredential* _credential;
	NSURLCredential* _proxyCredential;
	int _cookieStorageMethod;
	id<GTMFetcherAuthorizationProtocol> _authorizer;
	NSMutableArray* _stoppedFetchersToWaitFor;
	NSDate* _stoppedAllFetchersDate;
	char _allowLocalhostRequest;
	char _allowInvalidServerCertificates;
	char _retryEnabled;
	char _skipBackgroundTask;
	NSURLSessionConfiguration* _configuration;
	/*^block*/id _configurationBlock;
	NSArray* _allowedInsecureSchemes;
	/*^block*/id _retryBlock;
	NSDictionary* _properties;
	/*^block*/id _testBlock;
	double _maxRetryInterval;
	double _minRetryInterval;
	double _unusedSessionTimeout;

}

@property (assign) int cookieStorageMethod; 
@property (retain) NSDictionary * delayedFetchersByHost; 
@property (retain) NSDictionary * runningFetchersByHost; 
@property (assign) unsigned maxRunningFetchersPerHost;                          //@synthesize maxRunningFetchersPerHost=_maxRunningFetchersPerHost - In the implementation block
@property (retain) NSURLSessionConfiguration * configuration;                   //@synthesize configuration=_configuration - In the implementation block
@property (copy) id configurationBlock;                                         //@synthesize configurationBlock=_configurationBlock - In the implementation block
@property (retain) NSHTTPCookieStorage * cookieStorage;                         //@synthesize cookieStorage=_cookieStorage - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> callbackQueue; 
@property (retain) NSURLCredential * credential;                                //@synthesize credential=_credential - In the implementation block
@property (retain) NSURLCredential * proxyCredential;                           //@synthesize proxyCredential=_proxyCredential - In the implementation block
@property (copy) NSArray * allowedInsecureSchemes;                              //@synthesize allowedInsecureSchemes=_allowedInsecureSchemes - In the implementation block
@property (assign) char allowLocalhostRequest;                                  //@synthesize allowLocalhostRequest=_allowLocalhostRequest - In the implementation block
@property (assign) char allowInvalidServerCertificates;                         //@synthesize allowInvalidServerCertificates=_allowInvalidServerCertificates - In the implementation block
@property (getter=isRetryEnabled) char retryEnabled;                            //@synthesize retryEnabled=_retryEnabled - In the implementation block
@property (copy) id retryBlock;                                                 //@synthesize retryBlock=_retryBlock - In the implementation block
@property (assign) double maxRetryInterval;                                     //@synthesize maxRetryInterval=_maxRetryInterval - In the implementation block
@property (assign) double minRetryInterval;                                     //@synthesize minRetryInterval=_minRetryInterval - In the implementation block
@property (copy) NSDictionary * properties;                                     //@synthesize properties=_properties - In the implementation block
@property (assign) char skipBackgroundTask;                                     //@synthesize skipBackgroundTask=_skipBackgroundTask - In the implementation block
@property (copy) NSString * userAgent;                                          //@synthesize userAgent=_userAgent - In the implementation block
@property (retain) id<GTMFetcherAuthorizationProtocol> authorizer; 
@property (retain) NSOperationQueue * sessionDelegateQueue; 
@property (assign) char reuseSession; 
@property (assign) double unusedSessionTimeout;                                 //@synthesize unusedSessionTimeout=_unusedSessionTimeout - In the implementation block
@property (copy) id testBlock;                                                  //@synthesize testBlock=_testBlock - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) NSOperationQueue * delegateQueue; 
+(unsigned)numberOfNonBackgroundSessionFetchers:(id)arg1 ;
+(id)mockFetcherServiceWithFakedData:(id)arg1 fakedError:(id)arg2 ;
-(id)fetcherWithRequest:(id)arg1 ;
-(id)fetcherWithURL:(id)arg1 ;
-(void)setRetryEnabled:(char)arg1 ;
-(void)setRetryBlock:(id)arg1 ;
-(id)fetcherWithURLString:(id)arg1 ;
-(void)setCookieStorageMethod:(int)arg1 ;
-(char)fetcherShouldBeginFetching:(id)arg1 ;
-(void)setMaxRetryInterval:(double)arg1 ;
-(void)fetcherDidStop:(id)arg1 ;
-(void)setAuthorizer:(id<GTMFetcherAuthorizationProtocol>)arg1 ;
-(id<GTMFetcherAuthorizationProtocol>)authorizer;
-(char)isDelayingFetcher:(id)arg1 ;
-(char)isRetryEnabled;
-(double)maxRetryInterval;
-(void)setMinRetryInterval:(double)arg1 ;
-(NSHTTPCookieStorage *)cookieStorage;
-(double)minRetryInterval;
-(int)cookieStorageMethod;
-(NSArray *)allowedInsecureSchemes;
-(void)setAllowedInsecureSchemes:(NSArray *)arg1 ;
-(char)allowLocalhostRequest;
-(void)setAllowLocalhostRequest:(char)arg1 ;
-(NSURLCredential *)proxyCredential;
-(void)setProxyCredential:(NSURLCredential *)arg1 ;
-(id)retryBlock;
-(void)detachAuthorizer;
-(NSOperationQueue *)sessionDelegateQueue;
-(void)setSessionDelegateQueue:(NSOperationQueue *)arg1 ;
-(char)allowInvalidServerCertificates;
-(void)setAllowInvalidServerCertificates:(char)arg1 ;
-(char)skipBackgroundTask;
-(void)setSkipBackgroundTask:(char)arg1 ;
-(id)testBlock;
-(void)setTestBlock:(id)arg1 ;
-(id)fetcherWithRequest:(id)arg1 fetcherClass:(Class)arg2 ;
-(void)addRunningFetcher:(id)arg1 forHost:(id)arg2 ;
-(void)addDelayedFetcher:(id)arg1 forHost:(id)arg2 ;
-(id)delegateDispatcherForFetcher:(id)arg1 ;
-(void)startFetcher:(id)arg1 ;
-(unsigned)numberOfRunningFetchers;
-(unsigned)numberOfDelayedFetchers;
-(id)issuedFetchers;
-(void)stopFetcher:(id)arg1 ;
-(void)abandonDispatcher;
-(void)fetcherDidCreateSession:(id)arg1 ;
-(void)fetcherDidBeginFetching:(id)arg1 ;
-(id)sessionForFetcherCreation;
-(id)stoppedAllFetchersDate;
-(char)reuseSession;
-(void)setReuseSession:(char)arg1 ;
-(unsigned)numberOfFetchers;
-(id)issuedFetchersWithRequestURL:(id)arg1 ;
-(void)stopAllFetchers;
-(void)resetSession;
-(double)unusedSessionTimeout;
-(void)setUnusedSessionTimeout:(double)arg1 ;
-(NSDictionary *)runningFetchersByHost;
-(void)setRunningFetchersByHost:(NSDictionary *)arg1 ;
-(NSDictionary *)delayedFetchersByHost;
-(void)setDelayedFetchersByHost:(NSDictionary *)arg1 ;
-(unsigned)maxRunningFetchersPerHost;
-(void)setMaxRunningFetchersPerHost:(unsigned)arg1 ;
-(char)waitForCompletionOfAllFetchersWithTimeout:(double)arg1 ;
-(NSOperationQueue *)delegateQueue;
-(void)setCredential:(NSURLCredential *)arg1 ;
-(id)session;
-(void)dealloc;
-(id)init;
-(void)setConfiguration:(NSURLSessionConfiguration *)arg1 ;
-(NSURLSessionConfiguration *)configuration;
-(id)configurationBlock;
-(void)setConfigurationBlock:(id)arg1 ;
-(NSDictionary *)properties;
-(void)setProperties:(NSDictionary *)arg1 ;
-(id)sessionDelegate;
-(void)setCookieStorage:(NSHTTPCookieStorage *)arg1 ;
-(NSString *)userAgent;
-(void)setUserAgent:(NSString *)arg1 ;
-(NSURLCredential *)credential;
-(void)setCallbackQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)callbackQueue;
@end

