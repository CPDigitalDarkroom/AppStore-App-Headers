/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 2:22:17 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/B4BDDC65-4400-4BC5-A974-2245FB5B0846/MessengerCompressed-iphoneos-arm64,iphoneos-armv7.app/MessengerCompressed-iphoneos-arm64,iphoneos-armv7
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/FBVideoDownloaderDelegate.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/FBPlaylistDownloaderDelegate.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/FBInvalidating.h>
#import <libobjc.A.dylib/AVAssetResourceLoaderDelegate.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/FNFAssetResourceLoaderDelegate.h>

@protocol OS_dispatch_queue, FBBlockDataCache, FBNetworkDispatch;
@class NSObject, NSMutableDictionary, NSMutableSet, FBLayeredCache, FBCache, FBExperimentManager, FBVideoInitializationTrackerContainer, FBClientProxyDataAnalytics, FBVideoPrefetchManager, FBClientProxyLogger, NSString;

@interface FBClientProxy : NSObject <FBVideoDownloaderDelegate, FBPlaylistDownloaderDelegate, FBInvalidating, AVAssetResourceLoaderDelegate, FNFAssetResourceLoaderDelegate> {

	char _enableCDNCacheStatusQuery;
	NSObject*<OS_dispatch_queue> _delegateQueue;
	NSMutableDictionary* _downloaderForDataKey;
	NSMutableDictionary* _downloaderForRequest;
	NSMutableDictionary* _listeners;
	NSMutableDictionary* _listenersForResourceLoaderConnections;
	NSMutableSet* _playingVideos;
	NSMutableDictionary* _playlistForURL;
	id<FBBlockDataCache> _blockDataCache;
	FBLayeredCache* _playlistCache;
	char _invalidated;
	FBCache* _requestPriorityMemorization;
	FBExperimentManager* _experimentManager;
	FBVideoInitializationTrackerContainer* _videoInitializationTrackerContainer;
	char _shouldMarkVideo;
	FBClientProxyDataAnalytics* _dataAnalytics;
	FBVideoPrefetchManager* _prefetchManager;
	id<FBNetworkDispatch> _networkDispatcher;
	FBClientProxyLogger* _logger;

}

@property (nonatomic,readonly) FBClientProxyDataAnalytics * dataAnalytics;              //@synthesize dataAnalytics=_dataAnalytics - In the implementation block
@property (nonatomic,readonly) FBVideoPrefetchManager * prefetchManager;                //@synthesize prefetchManager=_prefetchManager - In the implementation block
@property (nonatomic,readonly) id<FBNetworkDispatch> networkDispatcher;                 //@synthesize networkDispatcher=_networkDispatcher - In the implementation block
@property (nonatomic,readonly) FBClientProxyLogger * logger;                            //@synthesize logger=_logger - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (getter=isValid,nonatomic,readonly) char valid; 
-(id<FBNetworkDispatch>)networkDispatcher;
-(void)clearAllVideosCache:(/*^block*/id)arg1 ;
-(void)resourceLoader:(id)arg1 loadRequest:(id)arg2 ;
-(void)resourceLoader:(id)arg1 cancelLoadingRequest:(id)arg2 ;
-(id)initWithSession:(id)arg1 blockDataCache:(id)arg2 playlistCache:(id)arg3 logger:(id)arg4 ;
-(void)_prepareForVideoDownloadWithUrl:(id)arg1 proxyURL:(id)arg2 throttlingDelegate:(id)arg3 scenePath:(id)arg4 playRequested:(char)arg5 limitRequestLength:(char)arg6 ;
-(id)_extractDownloaderFromUrl:(id)arg1 ;
-(void)_cachePlaylistData:(id)arg1 forURL:(id)arg2 ;
-(void)_handlePlayerRequest:(id)arg1 ;
-(void)_handleCloseRequest:(id)arg1 shouldLog:(char)arg2 error:(id)arg3 cancelImmediately:(char)arg4 ;
-(id)_buildDownloaderWithDataKey:(id)arg1 url:(id)arg2 prefetchURL:(id)arg3 videoID:(id)arg4 scenePath:(id)arg5 priority:(int)arg6 disableThrottling:(char)arg7 limitRequestLength:(char)arg8 ;
-(void)videoDownloaderDidRedirect:(id)arg1 ;
-(void)videoDownloader:(id)arg1 didReceiveData:(id)arg2 isPrefetching:(char)arg3 isFetchingFirstChunk:(char)arg4 ;
-(void)videoDownloaderDidFinish:(id)arg1 error:(id)arg2 ;
-(void)playlistDownloader:(id)arg1 didReceiveData:(id)arg2 ;
-(void)playlistDownloader:(id)arg1 didFinishWithPlaylist:(id)arg2 cacheAllowed:(char)arg3 ;
-(void)playlistDownloader:(id)arg1 didFailWithError:(id)arg2 ;
-(void)setScenePath:(id)arg1 andPriority:(int)arg2 forVideoID:(id)arg3 ;
-(void)clearScenePathAndPriorityforVideoID:(id)arg1 ;
-(void)markVideo:(id)arg1 asRequestedPlaying:(char)arg2 ;
-(char)hasDownloaderForDataKey:(id)arg1 ;
-(char)hasNonPrefetchDataForDataKey:(id)arg1 url:(id)arg2 videoID:(id)arg3 definition:(int)arg4 length:(unsigned)arg5 ;
-(char)hasInitialDataForVideoID:(id)arg1 videoURL:(id)arg2 ;
-(id)requestPriorityAttributesForVideoId:(id)arg1 ;
-(id)prepareDownloaderAndGetProxyURLforURL:(id)arg1 videoID:(id)arg2 trackerID:(id)arg3 definition:(int)arg4 scenePath:(id)arg5 throttlingDelegate:(id)arg6 playRequested:(char)arg7 ;
-(unsigned)currentDownloadCount;
-(void)throttleTrafficIfDownloading:(id)arg1 throttler:(id)arg2 ;
-(id)videoInitializationTrackerWithVideoID:(id)arg1 ;
-(void)removeVideoInitializationTracker:(id)arg1 ;
-(void)cachePlaylist:(id)arg1 forURL:(id)arg2 ;
-(FBClientProxyDataAnalytics *)dataAnalytics;
-(FBVideoPrefetchManager *)prefetchManager;
-(FBClientProxyLogger *)logger;
-(void)invalidate;
-(char)isValid;
-(id)getDispatchQueue;
-(char)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2 ;
-(void)resourceLoader:(id)arg1 didCancelLoadingRequest:(id)arg2 ;
-(char)resourceLoader:(id)arg1 shouldWaitForResponseToAuthenticationChallenge:(id)arg2 ;
-(void)resourceLoader:(id)arg1 didCancelAuthenticationChallenge:(id)arg2 ;
@end

