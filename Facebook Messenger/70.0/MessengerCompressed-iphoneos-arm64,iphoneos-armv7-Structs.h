/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 2:23:08 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/B4BDDC65-4400-4BC5-A974-2245FB5B0846/MessengerCompressed-iphoneos-arm64,iphoneos-armv7.app/MessengerCompressed-iphoneos-arm64,iphoneos-armv7
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class UIColor, UIImage, FBDisplayableMediaViewProviderContext, CKComponent, NSDictionary, NSString, UIFont, FBImageDownloader, NSAttributedString, NSArray, FBWhistleAdaptor, FBVideoExportConfig, FBVideoAssetEdits, AVAssetReader, AVAssetTrack, AVAssetReaderOutput, AVAssetWriterInput, AVAssetWriter, NSURL, <MNServiceControllable>, NSURLRequest, CKComponentScopeRoot, <NSObject>, NSCharacterSet, NSNumber;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _NSZone* NSZoneRef;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct opaque_pthread_mutex_t {
	long __sig;
	char __opaque[40];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct CGContext* CGContextRef;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_MN10;

typedef struct {
	double latitude;
	double longitude;
} SCD_Struct_MN11;

typedef struct MNPaymentsActorProfileViewParameters {
	CGSize profilePictureViewSize;
	float profilePictureViewCornerRadius;
	float profilePictureTopPadding;
	float profilePictureLeftPadding;
	float textViewLeftPadding;
	float textViewRightPadding;
	float bottomSeparatorThickness;
	float bottomSeparatorSidePadding;
	float minimalHeight;
	float displayNameTextFontSize;
} MNPaymentsActorProfileViewParameters;

typedef struct CGImage* CGImageRef;

typedef struct {
	int field1;
	int field2;
	char field3;
	int field4;
	char field5;
	char field6;
} SCD_Struct_MN14;

typedef struct KeyboardConfiguration {
	int interfaceOrientation;
	float keyboardHeight;
} KeyboardConfiguration;

typedef struct MNBubbleViewAttributes {
	unsigned roundedCorners;
	unsigned displayType;
	unsigned type;
	unsigned position;
	unsigned section;
	char highlighted;
} MNBubbleViewAttributes;

typedef struct FBWebRTCCallOverlayAnchorsWithOffset {
	int anchors;
	CGSize offset;
} FBWebRTCCallOverlayAnchorsWithOffset;

typedef struct {
	float field1;
	float field2;
	CGPoint field3;
} SCD_Struct_FB18;

typedef struct MNTypingCellLayoutSpec {
	float totalHeight;
	CGRect bubbleFrame;
	UIEdgeInsets bubbleContentInset;
	CGRect profileImageFrame;
} MNTypingCellLayoutSpec;

typedef struct {
	CGSize field1;
	float field2;
	CGSize field3;
	CGSize field4;
	CGSize field5;
	CGSize field6;
	CGRect field7;
} SCD_Struct_MN20;

typedef struct FBLoomStartEntry {
	double maximumTraceTime;
	long long traceID;
	int activeProviders;
} FBLoomStartEntry;

typedef struct FBLoomAbortEntry {
	int abortReason;
} FBLoomAbortEntry;

typedef struct FBLoomStackFrameEntry {
	void* functionAddresses[4];
} FBLoomStackFrameEntry;

typedef struct FBLoomQPLEntry {
	short actionID;
	int markerID;
	int uniqueID;
	char usesSuspectTimestamp;
	char isTraceTrigger;
} FBLoomQPLEntry;

typedef struct FBLoomAsyncCallEntry {
	void callsiteAddress;
} FBLoomAsyncCallEntry;

typedef struct FBLoomAsyncCallStartEntry {
	void calleeAddress;
	unsigned matchID;
} FBLoomAsyncCallStartEntry;

typedef struct FBLoomAsyncCallEndEntry {
	unsigned matchID;
} FBLoomAsyncCallEndEntry;

typedef struct FBLoomNetworkingEntry {
	unsigned long long requestID;
} FBLoomNetworkingEntry;

typedef struct FBLoomLegacyPerfLoggerEntry {
	unsigned matchID;
	int markerID;
} FBLoomLegacyPerfLoggerEntry;

typedef struct FBLoomStringEntry {
	unsigned matchID;
	unsigned char stringLength;
	char string[43];
} FBLoomStringEntry;

typedef struct FBLoomTimeEntry {
	unsigned threadID;
	unsigned long long timestamp;
	/*function pointer*/void* ;
	FBLoomStartEntry startEntry;
	FBLoomAbortEntry abortEntry;
	FBLoomStackFrameEntry stackFrameEntry;
	FBLoomQPLEntry QPLEntry;
	FBLoomAsyncCallEntry asyncCallEntry;
	FBLoomAsyncCallStartEntry asyncCallStartEntry;
	FBLoomAsyncCallEndEntry asyncCallEndEntry;
	FBLoomNetworkingEntry networkingEntry;
	FBLoomLegacyPerfLoggerEntry) legacyPerfLoggerEntry;
} FBLoomTimeEntry;

typedef struct FBLoomLogEntry {
	int entryID;
	int entryType;
	/*function pointer*/void* ;
	FBLoomTimeEntry timeEntry;
	FBLoomStringEntry) stringEntry;
} FBLoomLogEntry;

typedef struct shared_ptr<facebook::FBBlockingQueue<folly::LockFreeRingBuffer<facebook::dextr::FBLoomLogEntry, std::atomic>::Cursor> > {
	FBBlockingQueue<folly::LockFreeRingBuffer<facebook::dextr::FBLoomLogEntry, std::atomic>::Cursor> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::FBBlockingQueue<folly::LockFreeRingBuffer<facebook::dextr::FBLoomLogEntry, std::atomic>::Cursor> >;

typedef struct _compressed_pair<facebook::mobile::xplat::executor::InlineSyncExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> > {
	InlineSyncExecutor __first_;
} compressed_pair<facebook::mobile::xplat::executor::InlineSyncExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> >;

typedef struct unique_ptr<facebook::mobile::xplat::executor::InlineSyncExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> > {
	compressed_pair<facebook::mobile::xplat::executor::InlineSyncExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> > __ptr_;
} unique_ptr<facebook::mobile::xplat::executor::InlineSyncExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::InlineSyncExecutor> >;

typedef struct _compressed_pair<facebook::mobile::xplat::executor::ObserverToken *, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> > {
	ObserverToken __first_;
} compressed_pair<facebook::mobile::xplat::executor::ObserverToken *, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> >;

typedef struct unique_ptr<facebook::mobile::xplat::executor::ObserverToken, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> > {
	compressed_pair<facebook::mobile::xplat::executor::ObserverToken *, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> > __ptr_;
} unique_ptr<facebook::mobile::xplat::executor::ObserverToken, std::__1::default_delete<facebook::mobile::xplat::executor::ObserverToken> >;

typedef struct shared_ptr<FBLoomTigonObserver> {
	FBLoomTigonObserver __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FBLoomTigonObserver>;

typedef struct shared_ptr<FBLoomQPLListener> {
	FBLoomQPLListener __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FBLoomQPLListener>;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct FBBrowserNavigationTitleViewMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	float titleHeight;
	float titleY;
	float subtitleHeight;
	float subtitleY;
	float subtitleCaretSpacing;
	float subtitleCaretYOffset;
	float navigationButtonWidth;
	float navigationButtonHeight;
	float height;
	float offsetY;
	float progressBarHeight;
} FBBrowserNavigationTitleViewMetrics;

typedef struct {
	unsigned long field1;
	id field2;
	unsigned long field3;
	unsigned long field4[5];
} SCD_Struct_FB42;

typedef struct sqlite3* sqlite3Ref;

typedef struct FBFramedImageViewConstraint {
	float borderWidth;
	CGSize borderImageSize;
} FBFramedImageViewConstraint;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_FB45;

typedef struct {
	SCD_Struct_FB45 field1;
	SCD_Struct_FB45 field2;
} SCD_Struct_FB46;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct FBColorMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	/*function pointer*/void* ;
	unsigned char red;
	C) r;
	/*function pointer*/void* ;
	unsigned char green;
	C) g;
	/*function pointer*/void* ;
	unsigned char blue;
	C) b;
	/*function pointer*/void* ;
	float alpha;
	f) a;
} FBColorMetrics;

typedef struct FBShadowMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	CGSize offset;
	float blur;
	FBColorMetrics color;
} FBShadowMetrics;

typedef struct FBTagViewMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	float tagVerticalOffset;
	float tagHorizontalOffset;
	float tagMaximumVerticalDownRatio;
	float tagMaximumHorizontalDownRatio;
	float tagRectOuterMargin;
	float tagFrameWidthPadding;
	float tagBorderPadding;
	float tagFrameTextBoxVerticalPadding;
	float removeButtonWidth;
	float tagRoundedCornerRadius;
	float tagArrowHeight;
	float tagHalfArrowWidth;
	float tagStrokeLineWidth;
	float tagOverlapThreshold;
	float tagOutOfScreenSizeThreshold;
	float leftPaddingForRemoveImage;
	float rightPaddingForRemoveImage;
	CGSize textShadowOffsetSize;
	unsigned textFontSize;
	UIColor* textColor;
	UIImage* removeImage;
	int removeImageContentMode;
	UIColor* strokeColor;
	FBShadowMetrics shadowMetrics;
	UIColor* fillColor;
	char shouldShowTagShadow;
	char shouldFillBackgroundForRemoveImage;
	char shouldBounceWhenTapped;
	char shouldStrokePath;
} FBTagViewMetrics;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_FB51;

typedef struct _compressed_pair<facebook::speech::AudioQueueRecorder *, std::__1::default_delete<facebook::speech::AudioQueueRecorder> > {
	AudioQueueRecorder __first_;
} compressed_pair<facebook::speech::AudioQueueRecorder *, std::__1::default_delete<facebook::speech::AudioQueueRecorder> >;

typedef struct unique_ptr<facebook::speech::AudioQueueRecorder, std::__1::default_delete<facebook::speech::AudioQueueRecorder> > {
	compressed_pair<facebook::speech::AudioQueueRecorder *, std::__1::default_delete<facebook::speech::AudioQueueRecorder> > __ptr_;
} unique_ptr<facebook::speech::AudioQueueRecorder, std::__1::default_delete<facebook::speech::AudioQueueRecorder> >;

typedef struct _compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> > {
	WebRTCEngine __first_;
} compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> >;

typedef struct unique_ptr<WebRTCEngine, std::__1::default_delete<WebRTCEngine> > {
	compressed_pair<WebRTCEngine *, std::__1::default_delete<WebRTCEngine> > __ptr_;
} unique_ptr<WebRTCEngine, std::__1::default_delete<WebRTCEngine> >;

typedef struct __CFStringTokenizer* CFStringTokenizerRef;

typedef struct _compressed_pair<facebook::souvenirclassifier::SouvenirsClassifier *, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> > {
	SouvenirsClassifier __first_;
} compressed_pair<facebook::souvenirclassifier::SouvenirsClassifier *, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> >;

typedef struct unique_ptr<facebook::souvenirclassifier::SouvenirsClassifier, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> > {
	compressed_pair<facebook::souvenirclassifier::SouvenirsClassifier *, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> > __ptr_;
} unique_ptr<facebook::souvenirclassifier::SouvenirsClassifier, std::__1::default_delete<facebook::souvenirclassifier::SouvenirsClassifier> >;

typedef struct _compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > {
	vector<Section, std::__1::allocator<Section> > __first_;
} compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > >;

typedef struct unique_ptr<std::__1::vector<Section, std::__1::allocator<Section> >, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > {
	compressed_pair<std::__1::vector<Section, std::__1::allocator<Section> > *, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > > __ptr_;
} unique_ptr<std::__1::vector<Section, std::__1::allocator<Section> >, std::__1::default_delete<std::__1::vector<Section, std::__1::allocator<Section> > > >;

typedef struct recursive_mutex {
	opaque_pthread_mutex_t __m_;
} recursive_mutex;

typedef struct _compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > {
	bycopy const deredList<unsigned long long> __first_;
} compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > >;

typedef struct unique_ptr<facebook::simplesearch::OrderedList<unsigned long long>, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > {
	compressed_pair<facebook::simplesearch::OrderedList<unsigned long long> *, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > > __ptr_;
} unique_ptr<facebook::simplesearch::OrderedList<unsigned long long>, std::__1::default_delete<facebook::simplesearch::OrderedList<unsigned long long> > >;

typedef struct opaque_pthread_rwlock_t {
	long __sig;
	char __opaque[124];
} opaque_pthread_rwlock_t;

typedef struct ReadWriteLock {
	opaque_pthread_rwlock_t _rwlock;
} ReadWriteLock;

typedef struct _compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > {
	SimpleIndex __first_;
} compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> >;

typedef struct unique_ptr<facebook::simplesearch::SimpleIndex, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > {
	compressed_pair<facebook::simplesearch::SimpleIndex *, std::__1::default_delete<facebook::simplesearch::SimpleIndex> > __ptr_;
} unique_ptr<facebook::simplesearch::SimpleIndex, std::__1::default_delete<facebook::simplesearch::SimpleIndex> >;

typedef struct shared_ptr<std::__1::unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > > {
	unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::unordered_map<unsigned long long, SimpleSearchEntityMetadata, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, SimpleSearchEntityMetadata> > > >;

typedef struct {
	char field1;
	float field2;
} SCD_Struct_FB69;

typedef struct {
	char field1;
	char field2;
	char field3;
} SCD_Struct_FB70;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> {
	__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > >;

typedef struct unordered_map<StoreObservationKey, StoreObservationRecord, StoreObservationKeyHasher, std::__1::equal_to<StoreObservationKey>, std::__1::allocator<std::__1::pair<const StoreObservationKey, StoreObservationRecord> > > {
	hash_table<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::__unordered_map_hasher<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, StoreObservationKeyHasher, true>, std::__1::__unordered_map_equal<StoreObservationKey, std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord>, std::__1::equal_to<StoreObservationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StoreObservationKey, StoreObservationRecord> > > __table_;
} unordered_map<StoreObservationKey, StoreObservationRecord, StoreObservationKeyHasher, std::__1::equal_to<StoreObservationKey>, std::__1::allocator<std::__1::pair<const StoreObservationKey, StoreObservationRecord> > >;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct FBMediaViewControllerTransitionDismissingContext {
	unsigned dismissalType;
	FBDisplayableMediaViewProviderContext* mediaViewProviderContext;
	id mediaViewOrLayer;
	unsigned slideAwayType;
	id transitionContext;
	 <UIViewControllerContextTransitioning>;
	CGPoint velocity;
} FBMediaViewControllerTransitionDismissingContext;

typedef struct FBDisplayableMediaTransitionOptions {
	char omitScaleTransformWhenAnimating;
} FBDisplayableMediaTransitionOptions;

typedef struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > {
	vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > >;

typedef struct CKComponentLayout {
	CKComponent* component;
	CGSize size;
	shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild> > > children;
	NSDictionary* extra;
} CKComponentLayout;

typedef struct {
	double field1;
	unsigned field2;
} SCD_Struct_FB87;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData> > >;

typedef struct unordered_map<long long, FBClientProxyVideoPlayStatsMetaData, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, FBClientProxyVideoPlayStatsMetaData> > > {
	hash_table<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, FBClientProxyVideoPlayStatsMetaData> > > __table_;
} unordered_map<long long, FBClientProxyVideoPlayStatsMetaData, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, FBClientProxyVideoPlayStatsMetaData> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, ClientProxyVideoStat> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, ClientProxyVideoStat> > >;

typedef struct unordered_map<long long, ClientProxyVideoStat, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ClientProxyVideoStat> > > {
	hash_table<std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ClientProxyVideoStat>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, ClientProxyVideoStat> > > __table_;
} unordered_map<long long, ClientProxyVideoStat, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ClientProxyVideoStat> > >;

typedef struct {
	long long field1;
	int field2;
	int field3;
	int field4;
	int field5;
	int field6;
} SCD_Struct_FB108;

typedef struct {
	double byteRate;
	unsigned atomByteSize;
} SCD_Struct_FB109;

typedef struct {
	double field1;
	double field2;
	double field3;
	SCD_Struct_FB109 field4;
	char field5;
	char field6;
	char field7;
} SCD_Struct_FB110;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > {
	__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true> > __pair3_;
} tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > >;

typedef struct map<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache, std::__1::less<id<FBCollectionViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > {
	tree<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBCollectionViewSectionDataSource>, std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache>, std::__1::less<id<FBCollectionViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > > __tree_;
} map<id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache, std::__1::less<id<FBCollectionViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBCollectionViewSectionDataSource>, FBCollectionViewDelegateRespondsToCache> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > {
	__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true> > __pair3_;
} tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > >;

typedef struct map<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache, std::__1::less<id<FBTableViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > {
	tree<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::__map_value_compare<id<FBTableViewSectionDataSource>, std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache>, std::__1::less<id<FBTableViewSectionDataSource> >, true>, std::__1::allocator<std::__1::__value_type<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > > __tree_;
} map<id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache, std::__1::less<id<FBTableViewSectionDataSource> >, std::__1::allocator<std::__1::pair<const id<FBTableViewSectionDataSource>, FBTableViewDelegateRespondsToCache> > >;

typedef struct {
	unsigned initial;
	unsigned head;
	unsigned tail;
	unsigned neck;
	unsigned invalid;
} SCD_Struct_FB120;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct __CFUUID* CFUUIDRef;

typedef struct FBCLLocationCollectionConfig {
	double mergeWithTimeAndDistance;
	double staleAge;
	double similarIfWithin;
	unsigned limitLength;
	unsigned amountToPurgeIfFull;
} FBCLLocationCollectionConfig;

typedef struct __CFString* CFStringRef;

typedef struct _compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > {
	FBComponentCollectionViewDataSourceCellConfig __first_;
} compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> >;

typedef struct unique_ptr<FBComponentCollectionViewDataSourceCellConfig, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > {
	compressed_pair<FBComponentCollectionViewDataSourceCellConfig *, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> > __ptr_;
} unique_ptr<FBComponentCollectionViewDataSourceCellConfig, std::__1::default_delete<FBComponentCollectionViewDataSourceCellConfig> >;

typedef struct FlowLayoutDelegateRespondsTo {
	char sizeForItemAtIndexPath;
	char insetForSectionAtIndex;
	char minimumLineSpacingForSectionAtIndex;
	char minimumInteritemSpacingForSectionAtIndex;
	char referenceSizeForHeaderInSection;
	char referenceSizeForFooterInSection;
} FlowLayoutDelegateRespondsTo;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > >;

typedef struct _tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > > {
	__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UIView *, id<NSObject> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true> > __pair3_;
} tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > >;

typedef struct map<UIView *, id<NSObject>, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, id<NSObject> > > > {
	tree<std::__1::__value_type<UIView *, id<NSObject> >, std::__1::__map_value_compare<UIView *, std::__1::__value_type<UIView *, id<NSObject> >, std::__1::less<UIView *>, true>, std::__1::allocator<std::__1::__value_type<UIView *, id<NSObject> > > > __tree_;
} map<UIView *, id<NSObject>, std::__1::less<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, id<NSObject> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > > {
	__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<NSObject>, UIView *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true> > __pair3_;
} tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > >;

typedef struct map<id<NSObject>, UIView *, std::__1::less<id<NSObject> >, std::__1::allocator<std::__1::pair<const id<NSObject>, UIView *> > > {
	tree<std::__1::__value_type<id<NSObject>, UIView *>, std::__1::__map_value_compare<id<NSObject>, std::__1::__value_type<id<NSObject>, UIView *>, std::__1::less<id<NSObject> >, true>, std::__1::allocator<std::__1::__value_type<id<NSObject>, UIView *> > > __tree_;
} map<id<NSObject>, UIView *, std::__1::less<id<NSObject> >, std::__1::allocator<std::__1::pair<const id<NSObject>, UIView *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > >;

typedef struct _tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > > {
	__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<UITableViewCell *, id<NSObject> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true> > __pair3_;
} tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > >;

typedef struct map<UITableViewCell *, id<NSObject>, std::__1::less<UITableViewCell *>, std::__1::allocator<std::__1::pair<UITableViewCell *const, id<NSObject> > > > {
	tree<std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::__map_value_compare<UITableViewCell *, std::__1::__value_type<UITableViewCell *, id<NSObject> >, std::__1::less<UITableViewCell *>, true>, std::__1::allocator<std::__1::__value_type<UITableViewCell *, id<NSObject> > > > __tree_;
} map<UITableViewCell *, id<NSObject>, std::__1::less<UITableViewCell *>, std::__1::allocator<std::__1::pair<UITableViewCell *const, id<NSObject> > > >;

typedef struct _compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > {
	FBComponentTableViewDataSourceCellConfig __first_;
} compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> >;

typedef struct unique_ptr<FBComponentTableViewDataSourceCellConfig, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > {
	compressed_pair<FBComponentTableViewDataSourceCellConfig *, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> > __ptr_;
} unique_ptr<FBComponentTableViewDataSourceCellConfig, std::__1::default_delete<FBComponentTableViewDataSourceCellConfig> >;

typedef struct shared_ptr<std::__1::atomic<bool> > {
	atomic<bool> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::atomic<bool> >;

typedef struct CGPath* CGPathRef;

typedef struct CGColor* CGColorRef;

typedef struct delegateOptionalProtocolResponseFlags {
	unsigned delegateCollectionViewSizeForBackgroundHeaderViewInSection : 1;
	unsigned delegateCollectionViewHeightForRowCellInSection : 1;
	unsigned delegateCollectionViewSpacingBetweenRowsInSection : 1;
	unsigned delegateCollectionViewSectionInsetsForSection : 1;
} delegateOptionalProtocolResponseFlags;

typedef struct flags {
	unsigned isInTextChanged : 1;
	unsigned delegateTextFieldDidAddObject_DEPRECATED : 1;
	unsigned delegateTextFieldWillRemoveObject_DEPRECATED : 1;
	unsigned delegateTextFieldHeightWillChange : 1;
	unsigned delegateTextFieldHeightDidChange : 1;
	unsigned delegateTextFieldSearchTextChanged : 1;
	unsigned isInternalTextChange : 1;
	unsigned delegateTextFieldUserWillDeleteObjectByTyping : 1;
	unsigned delegateTextFieldSupportsEditing : 1;
	unsigned delegateTextFieldDidReceiveTap : 1;
} flags;

typedef const struct FBGraphQLFieldSet* FBGraphQLFieldSetRef;

typedef struct {
	id field1;
	id field2;
	id field3;
	id field4;
	id field5;
} SCD_Struct_FI148;

typedef struct shared_ptr<facebook::omnistore::Omnistore> {
	Omnistore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::omnistore::Omnistore>;

typedef struct __CFNotificationCenter* CFNotificationCenterRef;

typedef struct shared_ptr<facebook::omnistore::Collection> {
	Collection __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::omnistore::Collection>;

typedef struct shared_ptr<facebook::omnistore::CollectionName> {
	CollectionName __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::omnistore::CollectionName>;

typedef struct shared_ptr<facebook::omnistore::CollectionNameBuilder> {
	CollectionNameBuilder __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::omnistore::CollectionNameBuilder>;

typedef struct _compressed_pair<facebook::omnistore::Cursor *, std::__1::default_delete<facebook::omnistore::Cursor> > {
	Cursor __first_;
} compressed_pair<facebook::omnistore::Cursor *, std::__1::default_delete<facebook::omnistore::Cursor> >;

typedef struct unique_ptr<facebook::omnistore::Cursor, std::__1::default_delete<facebook::omnistore::Cursor> > {
	compressed_pair<facebook::omnistore::Cursor *, std::__1::default_delete<facebook::omnistore::Cursor> > __ptr_;
} unique_ptr<facebook::omnistore::Cursor, std::__1::default_delete<facebook::omnistore::Cursor> >;

typedef struct shared_ptr<facebook::omnistore::Delta> {
	Delta __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::omnistore::Delta>;

typedef struct {
	SCD_Struct_MN11 center;
	SCD_Struct_MN11 span;
} SCD_Struct_FB157;

typedef struct FBTextMetrics {
	/*function pointer*/void* _vptr$FBMetrics;
	BOOL _initialized;
	NSString* fontName;
	float size;
	float lineHeight;
	float kerning;
	float wordKerning;
	FBColorMetrics color;
	FBShadowMetrics shadow;
	unsigned capitalizationStyle;
	unsigned underlineStyle;
	FBColorMetrics backgroundColor;
} FBTextMetrics;

typedef struct UIOffset {
	float horizontal;
	float vertical;
} UIOffset;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct __SecTrust* SecTrustRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct _compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> > {
	SubPageInfo __first_;
} compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> >;

typedef struct vector<SubPageInfo, std::__1::allocator<SubPageInfo> > {
	SubPageInfo __begin_;
	SubPageInfo __end_;
	compressed_pair<SubPageInfo *, std::__1::allocator<SubPageInfo> > __end_cap_;
} vector<SubPageInfo, std::__1::allocator<SubPageInfo> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > > {
	__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true> > __pair3_;
} tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > >;

typedef struct map<FBMemModelObject *, FBMemModelObject *, std::__1::less<FBMemModelObject *>, std::__1::allocator<std::__1::pair<FBMemModelObject *const, FBMemModelObject *> > > {
	tree<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::__map_value_compare<FBMemModelObject *, std::__1::__value_type<FBMemModelObject *, FBMemModelObject *>, std::__1::less<FBMemModelObject *>, true>, std::__1::allocator<std::__1::__value_type<FBMemModelObject *, FBMemModelObject *> > > __tree_;
} map<FBMemModelObject *, FBMemModelObject *, std::__1::less<FBMemModelObject *>, std::__1::allocator<std::__1::pair<FBMemModelObject *const, FBMemModelObject *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > > {
	__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true> > __pair3_;
} tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > >;

typedef struct map<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, std::__1::allocator<std::__1::pair<FBConsistentLookasideCacheObservationHandle *const, FBMemModelObject *> > > {
	tree<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::__map_value_compare<FBConsistentLookasideCacheObservationHandle *, std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *>, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, true>, std::__1::allocator<std::__1::__value_type<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *> > > __tree_;
} map<FBConsistentLookasideCacheObservationHandle *, FBMemModelObject *, std::__1::less<FBConsistentLookasideCacheObservationHandle *>, std::__1::allocator<std::__1::pair<FBConsistentLookasideCacheObservationHandle *const, FBMemModelObject *> > >;

typedef struct FBRichTextComponentStyle {
	UIFont* font;
	UIColor* color;
	FBImageDownloader* imageDownloader;
	CGSize textShadowOffset;
	unsigned maximumNumberOfLines;
	unsigned truncationMode;
	NSAttributedString* truncationAttributedString;
	int horizontalAlignmentMode;
	NSArray* menuItems;
	char calculateLineOrigins;
} FBRichTextComponentStyle;

typedef struct {
	char shouldDismiss;
	char willDismiss;
	char didDismiss;
} SCD_Struct_FB177;

typedef struct _compressed_pair<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle *, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> > {
	MutationHandle __first_;
} compressed_pair<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle *, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> >;

typedef struct unique_ptr<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> > {
	compressed_pair<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle *, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> > __ptr_;
} unique_ptr<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle, std::__1::default_delete<facebook::mobile::graphstore::MutationAwareGraphStore::MutationHandle> >;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::CLCImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImplGraphStore> > {
	CLCImplGraphStore __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::CLCImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImplGraphStore> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::CLCImplGraphStore, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImplGraphStore> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::CLCImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImplGraphStore> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::CLCImplGraphStore, std::__1::default_delete<facebook::mobile::FBMemModel::detail::CLCImplGraphStore> >;

typedef struct atomic<unsigned int> {
	AI __a_;
} atomic<unsigned int>;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > {
	RecordAndSnapshot __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::RecordAndSnapshot, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::RecordAndSnapshot *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::RecordAndSnapshot, std::__1::default_delete<facebook::mobile::FBMemModel::detail::RecordAndSnapshot> >;

typedef struct _compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> > {
	BuilderImplGraphStore __first_;
} compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> >;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> > {
	compressed_pair<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore *, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> > __ptr_;
} unique_ptr<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore, std::__1::default_delete<facebook::mobile::FBMemModel::detail::BuilderImplGraphStore> >;

typedef struct {
	CGPoint anchorPoint;
	CGRect bounds;
	CGPoint position;
} SCD_Struct_FB187;

typedef struct {
	CGSize min;
	CGSize max;
} SCD_Struct_AS188;

typedef struct RecursiveMutex {
	opaque_pthread_mutex_t _m;
} RecursiveMutex;

typedef struct FBMinimorphFactor {
	float minimorphFactor;
	float contentsScaleFactor;
} FBMinimorphFactor;

typedef struct FBFloatRange {
	float min;
	float max;
} FBFloatRange;

typedef struct {
	unsigned subtreeNeedsMinimorphUpdate : 1;
	unsigned subtreeDisableMinimorph : 1;
	unsigned hasHadMinimorphContentsScaleApplied : 1;
	unsigned miniSizeCalculated : 1;
	unsigned maxSizeCalculated : 1;
} SCD_Struct_AS192;

typedef struct FBMinimorphInfo {
	FBFloatRange contentsScaleRange;
	FBFloatRange redrawThresholdRange;
} FBMinimorphInfo;

typedef struct ASDisplayNodeExtraIvars {
	unsigned _minimorphType;
	FBMinimorphFactor _minimorphFactor;
	FBMinimorphInfo _lastKnownInfo;
	CGSize _miniConstrainedSize;
	CGSize _maxConstrainedSize;
	CGSize _miniSize;
	CGSize _maxSize;
	SCD_Struct_AS192 _flags;
} ASDisplayNodeExtraIvars;

typedef struct Mutex {
	opaque_pthread_mutex_t _m;
} Mutex;

typedef struct CATransform3D {
	float m11;
	float m12;
	float m13;
	float m14;
	float m21;
	float m22;
	float m23;
	float m24;
	float m31;
	float m32;
	float m33;
	float m34;
	float m41;
	float m42;
	float m43;
	float m44;
} CATransform3D;

typedef struct SRFaceMonitorStatus {
	char faceRecPaused;
	int recognized;
	int detected;
	int totalKnown;
} SRFaceMonitorStatus;

typedef struct __CTFrame* CTFrameRef;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct __CTLine* CTLineRef;

typedef struct {
	int location;
	int length;
} SCD_Struct_FB201;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, unsigned int>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, unsigned int>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned int> > >;

typedef struct unordered_map<NSString *, unsigned int, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned int> > > {
	hash_table<std::__1::__hash_value_type<NSString *, unsigned int>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, unsigned int>, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, unsigned int> > > __table_;
} unordered_map<NSString *, unsigned int, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned int> > >;

typedef struct FBStreamingFlagsManager {
	unordered_map<NSString *, unsigned int, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, unsigned int> > > _maxImageFlagPerUrlKey;
	mutex _lock;
} FBStreamingFlagsManager;

typedef struct _compressed_pair<FBExceptionCorruptionTrap *, std::__1::default_delete<FBExceptionCorruptionTrap> > {
	FBExceptionCorruptionTrap __first_;
} compressed_pair<FBExceptionCorruptionTrap *, std::__1::default_delete<FBExceptionCorruptionTrap> >;

typedef struct unique_ptr<FBExceptionCorruptionTrap, std::__1::default_delete<FBExceptionCorruptionTrap> > {
	compressed_pair<FBExceptionCorruptionTrap *, std::__1::default_delete<FBExceptionCorruptionTrap> > __ptr_;
} unique_ptr<FBExceptionCorruptionTrap, std::__1::default_delete<FBExceptionCorruptionTrap> >;

typedef struct shared_ptr<facebook::mobile::graphstore::GraphStore> {
	GraphStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::graphstore::GraphStore>;

typedef struct __CTRun* CTRunRef;

typedef struct jpeg_decompress_struct {
	jpeg_error_mgr err;
	jpeg_memory_mgr mem;
	jpeg_progress_mgr progress;
	void client_data;
	int is_decompressor;
	int global_state;
	jpeg_source_mgr src;
	unsigned image_width;
	unsigned image_height;
	int num_components;
	int jpeg_color_space;
	int out_color_space;
	unsigned scale_num;
	unsigned scale_denom;
	double output_gamma;
	int buffered_image;
	int raw_data_out;
	int dct_method;
	int do_fancy_upsampling;
	int do_block_smoothing;
	int quantize_colors;
	int dither_mode;
	int two_pass_quantize;
	int desired_number_of_colors;
	int enable_1pass_quant;
	int enable_external_quant;
	int enable_2pass_quant;
	unsigned output_width;
	unsigned output_height;
	int out_color_components;
	int output_components;
	int rec_outbuf_height;
	int actual_number_of_colors;
	char* colormap;
	unsigned output_scanline;
	int input_scan_number;
	unsigned input_iMCU_row;
	int output_scan_number;
	unsigned output_iMCU_row;
	int coef_bits[64];
	/*function pointer*/void* quant_tbl_ptrs[4];
	/*function pointer*/void* dc_huff_tbl_ptrs[4];
	/*function pointer*/void* ac_huff_tbl_ptrs[4];
	int data_precision;
	/*function pointer*/void* comp_info;
	int is_baseline;
	int progressive_mode;
	int arith_code;
	unsigned char arith_dc_L[16];
	unsigned char arith_dc_U[16];
	unsigned char arith_ac_K[16];
	unsigned restart_interval;
	int saw_JFIF_marker;
	unsigned char JFIF_major_version;
	unsigned char JFIF_minor_version;
	unsigned char density_unit;
	unsigned short X_density;
	unsigned short Y_density;
	int saw_Adobe_marker;
	unsigned char Adobe_transform;
	int CCIR601_sampling;
	jpeg_marker_struct marker_list;
	int max_h_samp_factor;
	int max_v_samp_factor;
	int min_DCT_h_scaled_size;
	int min_DCT_v_scaled_size;
	unsigned total_iMCU_rows;
	char* sample_range_limit;
	int comps_in_scan;
	/*function pointer*/void* cur_comp_info[4];
	unsigned MCUs_per_row;
	unsigned MCU_rows_in_scan;
	int blocks_in_MCU;
	int MCU_membership[10];
	int Ss;
	int Se;
	int Ah;
	int Al;
	int block_size;
	int natural_order;
	int lim_Se;
	int unread_marker;
	jpeg_decomp_master master;
	jpeg_d_main_controller main;
	jpeg_d_coef_controller coef;
	jpeg_d_post_controller post;
	jpeg_input_controller inputctl;
	jpeg_marker_reader marker;
	jpeg_entropy_decoder entropy;
	jpeg_inverse_dct idct;
	jpeg_upsampler upsample;
	jpeg_color_deconverter cconvert;
	jpeg_color_quantizer cquantize;
} jpeg_decompress_struct;

typedef struct jpeg_error_mgr {
	/*function pointer*/void* error_exit;
	/*function pointer*/void* emit_message;
	/*function pointer*/void* output_message;
	/*function pointer*/void* format_message;
	/*function pointer*/void* reset_error_mgr;
	int msg_code;
	/*function pointer*/void* msg_parm;
	int i[8];
	char s[80];
	int trace_level;
	long num_warnings;
	char* jpeg_message_table;
	int last_jpeg_message;
	char* addon_message_table;
	int first_addon_message;
	int last_addon_message;
} jpeg_error_mgr;

typedef struct FBProgressiveJPEGErrorManager {
	jpeg_error_mgr pub;
	int setjmp_buffer[28];
} FBProgressiveJPEGErrorManager;

typedef struct FBPJPEGEncodingInfo {
	short _version;
	int _fileSize;
	NSArray* _scanOffsets;
} FBPJPEGEncodingInfo;

typedef struct StorageNonTriviallyDestructible {
	/*function pointer*/void* ;
	FBPJPEGEncodingInfo) value;
	BOOL hasValue;
} StorageNonTriviallyDestructible;

typedef struct Optional<FBPJPEGEncodingInfo> {
	StorageNonTriviallyDestructible storage_;
} Optional<FBPJPEGEncodingInfo>;

typedef struct _compressed_pair<proxygen::mqttclient::MQTTClient *, folly::DelayedDestruction::Destructor> {
	MQTTClient __first_;
} compressed_pair<proxygen::mqttclient::MQTTClient *, folly::DelayedDestruction::Destructor>;

typedef struct unique_ptr<proxygen::mqttclient::MQTTClient, folly::DelayedDestruction::Destructor> {
	compressed_pair<proxygen::mqttclient::MQTTClient *, folly::DelayedDestruction::Destructor> __ptr_;
} unique_ptr<proxygen::mqttclient::MQTTClient, folly::DelayedDestruction::Destructor>;

typedef struct _compressed_pair<MQTTClientGlue *, std::__1::default_delete<MQTTClientGlue> > {
	MQTTClientGlue __first_;
} compressed_pair<MQTTClientGlue *, std::__1::default_delete<MQTTClientGlue> >;

typedef struct unique_ptr<MQTTClientGlue, std::__1::default_delete<MQTTClientGlue> > {
	compressed_pair<MQTTClientGlue *, std::__1::default_delete<MQTTClientGlue> > __ptr_;
} unique_ptr<MQTTClientGlue, std::__1::default_delete<MQTTClientGlue> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true> >;

typedef struct duration<long long, std::__1::ratio<1, 1000000000> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1000000000> >;

typedef struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > {
	duration<long long, std::__1::ratio<1, 1000000000> > __d_;
} time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > >;

typedef struct _compressed_pair<std::__1::pair<proxygen::TraceEventType, long long> *, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > {
	pair<proxygen::TraceEventType, long long> __first_;
} compressed_pair<std::__1::pair<proxygen::TraceEventType, long long> *, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > >;

typedef struct vector<std::__1::pair<proxygen::TraceEventType, long long>, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > {
	pair<proxygen::TraceEventType, long long> __begin_;
	pair<proxygen::TraceEventType, long long> __end_;
	compressed_pair<std::__1::pair<proxygen::TraceEventType, long long> *, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > __end_cap_;
} vector<std::__1::pair<proxygen::TraceEventType, long long>, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> > >;

typedef struct _tree<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true>, std::__1::allocator<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> > > > {
	__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true> > __pair3_;
} tree<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true>, std::__1::allocator<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> > > >;

typedef struct map<proxygen::TraceFieldType, std::__1::basic_string<char>, std::__1::less<proxygen::TraceFieldType>, std::__1::allocator<std::__1::pair<const proxygen::TraceFieldType, std::__1::basic_string<char> > > > {
	tree<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::__map_value_compare<proxygen::TraceFieldType, std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> >, std::__1::less<proxygen::TraceFieldType>, true>, std::__1::allocator<std::__1::__value_type<proxygen::TraceFieldType, std::__1::basic_string<char> > > > __tree_;
} map<proxygen::TraceFieldType, std::__1::basic_string<char>, std::__1::less<proxygen::TraceFieldType>, std::__1::allocator<std::__1::pair<const proxygen::TraceFieldType, std::__1::basic_string<char> > > >;

typedef struct FBWhistleConnectionStatsLogger {
	/*function pointer*/void* _vptr$TraceEventObserver;
	map<proxygen::TraceFieldType, std::__1::basic_string<char>, std::__1::less<proxygen::TraceFieldType>, std::__1::allocator<std::__1::pair<const proxygen::TraceFieldType, std::__1::basic_string<char> > > > connStats_;
	vector<std::__1::pair<proxygen::TraceEventType, long long>, std::__1::allocator<std::__1::pair<proxygen::TraceEventType, long long> > > eventTime_;
	time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > connectStartTime_;
} FBWhistleConnectionStatsLogger;

typedef struct WhistleBackgroundTokenManager {
	FBWhistleAdaptor* _whistleAdaptor;
	unsigned numTokenInflight_;
} WhistleBackgroundTokenManager;

typedef struct _compressed_pair<WhistleBackgroundTokenManager::Token *, std::__1::default_delete<WhistleBackgroundTokenManager::Token> > {
	Token __first_;
} compressed_pair<WhistleBackgroundTokenManager::Token *, std::__1::default_delete<WhistleBackgroundTokenManager::Token> >;

typedef struct unique_ptr<WhistleBackgroundTokenManager::Token, std::__1::default_delete<WhistleBackgroundTokenManager::Token> > {
	compressed_pair<WhistleBackgroundTokenManager::Token *, std::__1::default_delete<WhistleBackgroundTokenManager::Token> > __ptr_;
} unique_ptr<WhistleBackgroundTokenManager::Token, std::__1::default_delete<WhistleBackgroundTokenManager::Token> >;

typedef struct _compressed_pair<proxygen::mqttclient::MQTTClientFactory *, std::__1::default_delete<proxygen::mqttclient::MQTTClientFactory> > {
	MQTTClientFactory __first_;
} compressed_pair<proxygen::mqttclient::MQTTClientFactory *, std::__1::default_delete<proxygen::mqttclient::MQTTClientFactory> >;

typedef struct unique_ptr<proxygen::mqttclient::MQTTClientFactory, std::__1::default_delete<proxygen::mqttclient::MQTTClientFactory> > {
	compressed_pair<proxygen::mqttclient::MQTTClientFactory *, std::__1::default_delete<proxygen::mqttclient::MQTTClientFactory> > __ptr_;
} unique_ptr<proxygen::mqttclient::MQTTClientFactory, std::__1::default_delete<proxygen::mqttclient::MQTTClientFactory> >;

typedef struct shared_ptr<folly::SSLContext> {
	SSLContext __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<folly::SSLContext>;

typedef struct SmoothLoopTime {
	double expCoeff_;
	double value_;
	long long oldBusyLeftover_;
} SmoothLoopTime;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct _long {
	unsigned __cap_;
	unsigned __size_;
	char* __data_;
} long;

typedef struct _short {
	/*function pointer*/void* ;
	unsigned char __size_;
	c) __lx;
	char __data_[11];
} short;

typedef struct _raw {
	unsigned long __words[3];
} raw;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<folly::detail::EventBaseLocalBaseBase *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::hash<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct _compressed_pair<float, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct _hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> {
	__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> __next_;
} hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> > > {
	hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > {
	__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > {
	compressed_pair<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > >;

typedef struct _hash_table<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > {
	unique_ptr<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> *>, std::__1::allocator<std::__1::__hash_node<folly::detail::EventBaseLocalBaseBase *, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<folly::detail::EventBaseLocalBaseBase *> > __p2_;
	compressed_pair<float, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *> > __p3_;
} hash_table<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct unordered_set<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > {
	hash_table<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > __table_;
} unordered_set<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> > > >;

typedef struct unordered_map<unsigned long long, std::__1::shared_ptr<void>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<void> > > > {
	hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<void> > > > __table_;
} unordered_map<unsigned long long, std::__1::shared_ptr<void>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<void> > > >;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct shared_ptr<folly::EventBaseObserver> {
	EventBaseObserver __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<folly::EventBaseObserver>;

typedef struct Function<void (), false> {
	Data data_;
	void big;
	type) small;
	/*function pointer*/void* call_;
	/*function pointer*/void* exec_;
} Function<void (), false>;

typedef struct _compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> > {
	FunctionRunner __first_;
} compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> >;

typedef struct unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> > {
	compressed_pair<folly::EventBase::FunctionRunner *, std::__1::default_delete<folly::EventBase::FunctionRunner> > __ptr_;
} unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> >;

typedef struct _compressed_pair<folly::NotificationQueue<folly::impl::Function<void (), false> > *, std::__1::default_delete<folly::NotificationQueue<folly::impl::Function<void (), false> > > > {
	NotificationQueue<folly::impl::Function<void (), false> > __first_;
} compressed_pair<folly::NotificationQueue<folly::impl::Function<void (), false> > *, std::__1::default_delete<folly::NotificationQueue<folly::impl::Function<void (), false> > > >;

typedef struct unique_ptr<folly::NotificationQueue<folly::impl::Function<void (), false> >, std::__1::default_delete<folly::NotificationQueue<folly::impl::Function<void (), false> > > > {
	compressed_pair<folly::NotificationQueue<folly::impl::Function<void (), false> > *, std::__1::default_delete<folly::NotificationQueue<folly::impl::Function<void (), false> > > > __ptr_;
} unique_ptr<folly::NotificationQueue<folly::impl::Function<void (), false> >, std::__1::default_delete<folly::NotificationQueue<folly::impl::Function<void (), false> > > >;

typedef struct atomic<_opaque_pthread_t *> {
	A_opaque_pthread_t __a_;
} atomic<_opaque_pthread_t *>;

typedef struct default_header_holder<boost::intrusive::list_node_traits<void *> > {
	list_node<void *> next_;
	list_node<void *> prev_;
} default_header_holder<boost::intrusive::list_node_traits<void *> >;

typedef struct root_plus_size {
	default_header_holder<boost::intrusive::list_node_traits<void *> > m_header;
} root_plus_size;

typedef struct data_t {
	const oot_plus_size root_plus_size_;
} data_t;

typedef struct list<folly::EventBase::CobTimeout, boost::intrusive::member_hook<folly::EventBase::CobTimeout, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::CobTimeout::hook>, boost::intrusive::constant_time_size<false>, void, void> {
	data_t data_;
} list<folly::EventBase::CobTimeout, boost::intrusive::member_hook<folly::EventBase::CobTimeout, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::CobTimeout::hook>, boost::intrusive::constant_time_size<false>, void, void>;

typedef struct list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, void, void> {
	data_t data_;
} list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, void, void>;

typedef struct EventBase {
	/*function pointer*/void* _vptr$TimeoutManager;
	/*function pointer*/void* _vptr$DrivableExecutor;
	list<folly::EventBase::CobTimeout, boost::intrusive::member_hook<folly::EventBase::CobTimeout, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::CobTimeout::hook>, boost::intrusive::constant_time_size<false>, void, void> pendingCobTimeouts_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, void, void> loopCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, void, void> runBeforeLoopCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, void, void> onDestructionCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, void, void> runAfterDrainCallbacks_;
	list<folly::EventBase::LoopCallback, boost::intrusive::member_hook<folly::EventBase::LoopCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::link_mode_type::auto_unlink>, void, void>, &folly::EventBase::LoopCallback::hook_>, boost::intrusive::constant_time_size<false>, void, void> runOnceCallbacks_;
	atomic<bool> stop_;
	atomic<_opaque_pthread_t *> loopThread_;
	event_base evb_;
	unique_ptr<folly::NotificationQueue<folly::impl::Function<void (), false> >, std::__1::default_delete<folly::NotificationQueue<folly::impl::Function<void (), false> > > > queue_;
	unique_ptr<folly::EventBase::FunctionRunner, std::__1::default_delete<folly::EventBase::FunctionRunner> > fnRunner_;
	long long maxLatency_;
	SmoothLoopTime avgLoopTime_;
	SmoothLoopTime maxLatencyLoopTime_;
	Function<void (), false> maxLatencyCob_;
	BOOL enableTimeMeasurement_;
	unsigned long long nextLoopCnt_;
	unsigned long long latestLoopCnt_;
	unsigned long long startWork_;
	shared_ptr<folly::EventBaseObserver> observer_;
	unsigned observerSampleCount_;
	ExecutionObserver executionObserver_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > name_;
	mutex onDestructionCallbacksMutex_;
	mutex runAfterDrainCallbacksMutex_;
	mutex localStorageMutex_;
	unordered_map<unsigned long long, std::__1::shared_ptr<void>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<void> > > > localStorage_;
	unordered_set<folly::detail::EventBaseLocalBaseBase *, std::__1::hash<folly::detail::EventBaseLocalBaseBase *>, std::__1::equal_to<folly::detail::EventBaseLocalBaseBase *>, std::__1::allocator<folly::detail::EventBaseLocalBaseBase *> > localStorageToDtor_;
} EventBase;

typedef struct WhistleAppThreadExecutor {
	/*function pointer*/void* _vptr$Executor;
} WhistleAppThreadExecutor;

typedef struct {
	int field1;
	int field2;
	int field3;
	int field4;
} SCD_Struct_FB284;

typedef struct {
	int field1;
	int field2;
	int field3;
} SCD_Struct_FB285;

typedef struct {
	int memory;
	int disk;
	int misses;
} SCD_Struct_FB286;

typedef struct {
	float bounciness;
	float speed;
	CGPoint velocity;
} SCD_Struct_FB287;

typedef struct {
	SCD_Struct_FB51 start;
	SCD_Struct_FB51 duration;
} SCD_Struct_FB288;

typedef struct {
	char useLivePhotoTranscoding;
	char useCustomTranscoding;
	SCD_Struct_FB288 timeRange;
	int maxNumberOfVideoSegments;
	int minVideoSegmentDurationInSeconds;
	int maxVideoSegmentDurationInSeconds;
	FBVideoExportConfig* videoExportConfig;
	FBVideoAssetEdits* videoAssetEdits;
} SCD_Struct_FB289;

typedef struct {
	char field1;
	char field2;
	SCD_Struct_FB288 field3;
	int field4;
	int field5;
	int field6;
	id field7;
	id field8;
} SCD_Struct_FB290;

typedef struct FBVideoAssetExportParams {
	AVAssetReader* assetReader;
	AVAssetTrack* audioTrack;
	AVAssetTrack* videoTrack;
	AVAssetReaderOutput* audioOutput;
	AVAssetReaderOutput* videoOutput;
	AVAssetWriterInput* audioInput;
	AVAssetWriterInput* videoInput;
	AVAssetWriter* assetWriter;
	NSURL* outputURL;
} FBVideoAssetExportParams;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> > > >;

typedef struct unordered_map<NSString *, std::__1::shared_ptr<int>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_ptr<int> > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_ptr<int> > > > __table_;
} unordered_map<NSString *, std::__1::shared_ptr<int>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_ptr<int> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *> > >;

typedef struct unordered_map<FBDiskStoreIdentifier, FBPKVSObjectStore *, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, FBPKVSObjectStore *> > > {
	hash_table<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::__unordered_map_hasher<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::hash<FBDiskStoreIdentifier>, true>, std::__1::__unordered_map_equal<FBDiskStoreIdentifier, std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *>, std::__1::equal_to<FBDiskStoreIdentifier>, true>, std::__1::allocator<std::__1::__hash_value_type<FBDiskStoreIdentifier, FBPKVSObjectStore *> > > __table_;
} unordered_map<FBDiskStoreIdentifier, FBPKVSObjectStore *, std::__1::hash<FBDiskStoreIdentifier>, std::__1::equal_to<FBDiskStoreIdentifier>, std::__1::allocator<std::__1::pair<const FBDiskStoreIdentifier, FBPKVSObjectStore *> > >;

typedef struct __CFRunLoopObserver* CFRunLoopObserverRef;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __first_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef union {
	CGRect rect;
	CGPoint point;
} SCD_Union_FB315;

typedef struct _compressed_pair<facebook::mobile::graphstore::parser::BatchAPIParser *, std::__1::default_delete<facebook::mobile::graphstore::parser::BatchAPIParser> > {
	BatchAPIParser __first_;
} compressed_pair<facebook::mobile::graphstore::parser::BatchAPIParser *, std::__1::default_delete<facebook::mobile::graphstore::parser::BatchAPIParser> >;

typedef struct unique_ptr<facebook::mobile::graphstore::parser::BatchAPIParser, std::__1::default_delete<facebook::mobile::graphstore::parser::BatchAPIParser> > {
	compressed_pair<facebook::mobile::graphstore::parser::BatchAPIParser *, std::__1::default_delete<facebook::mobile::graphstore::parser::BatchAPIParser> > __ptr_;
} unique_ptr<facebook::mobile::graphstore::parser::BatchAPIParser, std::__1::default_delete<facebook::mobile::graphstore::parser::BatchAPIParser> >;

typedef struct FBGraphQLStreamingResponseParser* FBGraphQLStreamingResponseParserRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<const char *, const char *>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, const char *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, const char *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true> > __p3_;
} hash_table<std::__1::__hash_value_type<const char *, const char *>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, const char *> > >;

typedef struct unordered_map<const char *, const char *, FB::CStringHasher, FB::CStringComparer, std::__1::allocator<std::__1::pair<const char *const, const char *> > > {
	hash_table<std::__1::__hash_value_type<const char *, const char *>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringHasher, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, const char *>, FB::CStringComparer, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, const char *> > > __table_;
} unordered_map<const char *, const char *, FB::CStringHasher, FB::CStringComparer, std::__1::allocator<std::__1::pair<const char *const, const char *> > >;

typedef struct _compressed_pair<__strong id *, std::__1::allocator<id> > {
	id __first_;
} compressed_pair<__strong id *, std::__1::allocator<id> >;

typedef struct vector<id, std::__1::allocator<id> > {
	id __begin_;
	id __end_;
	compressed_pair<__strong id *, std::__1::allocator<id> > __end_cap_;
} vector<id, std::__1::allocator<id> >;

typedef struct CGFont* CGFontRef;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct __CFArray* CFArrayRef;

typedef struct _compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > {
	Callback<id<MNServiceControllable> > __first_;
} compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > >;

typedef struct vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > {
	Callback<id<MNServiceControllable> > __begin_;
	Callback<id<MNServiceControllable> > __end_;
	compressed_pair<FB::Functional::Callback<id<MNServiceControllable> > *, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > __end_cap_;
} vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > >;

typedef struct Promise<id<MNServiceControllable> > {
	unsigned ResolutionState;
	<MNServiceControllable>* _result;
	vector<FB::Functional::Callback<id<MNServiceControllable> >, std::__1::allocator<FB::Functional::Callback<id<MNServiceControllable> > > > _resolutionHandlers;
	unsigned _resolutionState;
	mutex _mutex;
} Promise<id<MNServiceControllable> >;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
} SCD_Struct_FB337;

typedef struct _compressed_pair<FBRangeAttributes *, std::__1::allocator<FBRangeAttributes> > {
	FBRangeAttributes __first_;
} compressed_pair<FBRangeAttributes *, std::__1::allocator<FBRangeAttributes> >;

typedef struct vector<FBRangeAttributes, std::__1::allocator<FBRangeAttributes> > {
	FBRangeAttributes __begin_;
	FBRangeAttributes __end_;
	compressed_pair<FBRangeAttributes *, std::__1::allocator<FBRangeAttributes> > __end_cap_;
} vector<FBRangeAttributes, std::__1::allocator<FBRangeAttributes> >;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > {
	unsigned __first_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int> > {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > __end_cap_;
} vector<unsigned int, std::__1::allocator<unsigned int> >;

typedef struct {
	unsigned objectDidMeetVisibilityThreshold : 1;
	unsigned stoppedTrackingObjectWithoutMeetingVisibilityThreshold : 1;
	unsigned stoppedTrackingObjectAfterMeetingVisibilityThreshold : 1;
} SCD_Struct_FB342;

typedef struct _compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> > {
	id __first_;
} compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<NSValue *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<NSValue *> >;

typedef struct _split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> > {
	id __first_;
	id __begin_;
	id __end_;
	compressed_pair<NSValue *__strong **, std::__1::allocator<NSValue *__strong *> > __end_cap_;
} split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> >;

typedef struct deque<NSValue *, std::__1::allocator<NSValue *> > {
	split_buffer<NSValue *__strong *, std::__1::allocator<NSValue *__strong *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<NSValue *> > __size_;
} deque<NSValue *, std::__1::allocator<NSValue *> >;

typedef struct _tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, int> {
	__tree_node<std::__1::__value_type<id, id>, void *> __ptr_;
} tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, int>;

typedef struct _map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, int> > {
	tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, int> __i_;
} map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<id, id>, std::__1::__tree_node<std::__1::__value_type<id, id>, void *> *, int> >;

typedef struct FBOrderedDictionaryDynamicKeyComparator {
	/*^block*/id _f;
} FBOrderedDictionaryDynamicKeyComparator;

typedef struct _map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> {
	FBOrderedDictionaryDynamicKeyComparator comp;
} map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> > {
	unsigned long __first_;
	map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> __second_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > >;

typedef struct _tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > > {
	__tree_node<std::__1::__value_type<id, id>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, id>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false> > __pair3_;
} tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > >;

typedef struct map<id, id, FBOrderedDictionaryDynamicKeyComparator, std::__1::allocator<std::__1::pair<const id, id> > > {
	tree<std::__1::__value_type<id, id>, std::__1::__map_value_compare<id, std::__1::__value_type<id, id>, FBOrderedDictionaryDynamicKeyComparator, false>, std::__1::allocator<std::__1::__value_type<id, id> > > __tree_;
} map<id, id, FBOrderedDictionaryDynamicKeyComparator, std::__1::allocator<std::__1::pair<const id, id> > >;

typedef struct _compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > > {
	function<NSString *()> __first_;
} compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > >;

typedef struct vector<std::__1::function<NSString *()>, std::__1::allocator<std::__1::function<NSString *()> > > {
	function<NSString *()> __begin_;
	function<NSString *()> __end_;
	compressed_pair<std::__1::function<NSString *()> *, std::__1::allocator<std::__1::function<NSString *()> > > __end_cap_;
} vector<std::__1::function<NSString *()>, std::__1::allocator<std::__1::function<NSString *()> > >;

typedef struct atomic<signed char> {
	Ac __a_;
} atomic<signed char>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::Invalidatable> {
	Invalidatable __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::Invalidatable>;

typedef struct _compressed_pair<proxygen::ConnectionLogger *, std::__1::default_delete<proxygen::ConnectionLogger> > {
	ConnectionLogger __first_;
} compressed_pair<proxygen::ConnectionLogger *, std::__1::default_delete<proxygen::ConnectionLogger> >;

typedef struct unique_ptr<proxygen::ConnectionLogger, std::__1::default_delete<proxygen::ConnectionLogger> > {
	compressed_pair<proxygen::ConnectionLogger *, std::__1::default_delete<proxygen::ConnectionLogger> > __ptr_;
} unique_ptr<proxygen::ConnectionLogger, std::__1::default_delete<proxygen::ConnectionLogger> >;

typedef struct TimeUtilGeneric<std::__1::chrono::steady_clock> {
	/*function pointer*/void* _vptr$TimeUtilGeneric;
} TimeUtilGeneric<std::__1::chrono::steady_clock>;

typedef struct _compressed_pair<proxygen::httpclient::monitor::NetworkStatusMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> > {
	NetworkStatusMonitor __first_;
} compressed_pair<proxygen::httpclient::monitor::NetworkStatusMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> >;

typedef struct unique_ptr<proxygen::httpclient::monitor::NetworkStatusMonitor, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> > {
	compressed_pair<proxygen::httpclient::monitor::NetworkStatusMonitor *, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> > __ptr_;
} unique_ptr<proxygen::httpclient::monitor::NetworkStatusMonitor, std::__1::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::pair<__CFHost *, double>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::pair<__CFHost *, double> > > >;

typedef struct __CFHost* CFHostRef;

typedef struct shared_ptr<const facebook::tigon::TigonRequestStats> {
	TigonRequestStats __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const facebook::tigon::TigonRequestStats>;

typedef struct shared_ptr<const facebook::FBTigon::HttpExecutorRequestProps> {
	HttpExecutorRequestProps __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const facebook::FBTigon::HttpExecutorRequestProps>;

typedef struct shared_ptr<facebook::tigon::TigonRequestToken> {
	TigonRequestToken __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonRequestToken>;

typedef struct _compressed_pair<(anonymous namespace)::UpperStaticStack *, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> > {
	UpperStaticStack __first_;
} compressed_pair<(anonymous namespace)::UpperStaticStack *, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> >;

typedef struct unique_ptr<(anonymous namespace)::UpperStaticStack, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> > {
	compressed_pair<(anonymous namespace)::UpperStaticStack *, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> > __ptr_;
} unique_ptr<(anonymous namespace)::UpperStaticStack, std::__1::default_delete<(anonymous namespace)::UpperStaticStack> >;

typedef struct shared_ptr<(anonymous namespace)::UpperSwappableStack> {
	UpperSwappableStack __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<(anonymous namespace)::UpperSwappableStack>;

typedef struct _compressed_pair<facebook::mobile::xplat::executor::DispatchQueueExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> > {
	DispatchQueueExecutor __first_;
} compressed_pair<facebook::mobile::xplat::executor::DispatchQueueExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> >;

typedef struct unique_ptr<facebook::mobile::xplat::executor::DispatchQueueExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> > {
	compressed_pair<facebook::mobile::xplat::executor::DispatchQueueExecutor *, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> > __ptr_;
} unique_ptr<facebook::mobile::xplat::executor::DispatchQueueExecutor, std::__1::default_delete<facebook::mobile::xplat::executor::DispatchQueueExecutor> >;

typedef struct _compressed_pair<(anonymous namespace)::LowerStaticStack *, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> > {
	LowerStaticStack __first_;
} compressed_pair<(anonymous namespace)::LowerStaticStack *, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> >;

typedef struct unique_ptr<(anonymous namespace)::LowerStaticStack, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> > {
	compressed_pair<(anonymous namespace)::LowerStaticStack *, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> > __ptr_;
} unique_ptr<(anonymous namespace)::LowerStaticStack, std::__1::default_delete<(anonymous namespace)::LowerStaticStack> >;

typedef struct shared_ptr<(anonymous namespace)::LowerSwappableStack> {
	LowerSwappableStack __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<(anonymous namespace)::LowerSwappableStack>;

typedef const struct shared_ptr<facebook::tigon::TigonObserver>* shared_ptr<facebook::tigon::TigonObserver>Ref;

typedef const struct shared_ptr<facebook::tigon::TigonDebugObserver>* shared_ptr<facebook::tigon::TigonDebugObserver>Ref;

typedef struct _compressed_pair<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> *, std::__1::allocator<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> > > {
	function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> __first_;
} compressed_pair<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> *, std::__1::allocator<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> > >;

typedef struct vector<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)>, std::__1::allocator<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> > > {
	function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> __begin_;
	function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> __end_;
	compressed_pair<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> *, std::__1::allocator<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> > > __end_cap_;
} vector<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)>, std::__1::allocator<std::__1::function<bool (facebook::tigon::TigonRequest *, std::__1::basic_string<char> *)> > >;

typedef struct _compressed_pair<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> *, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > > {
	function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> __first_;
} compressed_pair<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> *, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > >;

typedef struct vector<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)>, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > > {
	function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> __begin_;
	function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> __end_;
	compressed_pair<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> *, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > > __end_cap_;
} vector<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)>, std::__1::allocator<std::__1::function<void (const facebook::tigon::TigonRequest &, const facebook::tigon::TigonResponse &)> > >;

typedef struct shared_ptr<facebook::tigon::TigonRetryPolicy> {
	TigonRetryPolicy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonRetryPolicy>;

typedef struct shared_ptr<facebook::tigon::TigonPriorityQueuePolicy> {
	TigonPriorityQueuePolicy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonPriorityQueuePolicy>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> > > >;

typedef struct unordered_map<NSString *, std::__1::shared_future<Value>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_future<Value> > > > {
	hash_table<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> >, FB::EqualFunctor<NSObject *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, std::__1::shared_future<Value> > > > __table_;
} unordered_map<NSString *, std::__1::shared_future<Value>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::__1::allocator<std::__1::pair<NSString *const, std::__1::shared_future<Value> > > >;

typedef struct shared_ptr<mobileconfig::FBMobileConfigManager> {
	FBMobileConfigManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigManager>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigStorageManager> {
	FBMobileConfigStorageManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigStorageManager>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigFileUtils> {
	FBMobileConfigFileUtils __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigFileUtils>;

typedef struct shared_ptr<mobileconfig::FBMobileConfigOverridesTable> {
	FBMobileConfigOverridesTable __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigOverridesTable>;

typedef struct {
	unsigned long long bytesSent;
	unsigned long long bytesReceived;
} SCD_Struct_FB402;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskCache> {
	DiskCache __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskCache>;

typedef struct StorageTriviallyDestructible {
	/*function pointer*/void* ;
	q) value;
	BOOL hasValue;
} StorageTriviallyDestructible;

typedef struct aligned_storage<64, 4> {
	data_t data_;
	char buf[64];
	a4) align_;
} aligned_storage<64, 4>;

typedef struct variant<facebook::mobile::xplat::compactdisk::ManualConfig, facebook::mobile::xplat::compactdisk::ManagedConfig, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> {
	int which_;
	aligned_storage<64, 4> storage_;
} variant<facebook::mobile::xplat::compactdisk::ManualConfig, facebook::mobile::xplat::compactdisk::ManagedConfig, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>;

typedef struct Optional<long long> {
	StorageTriviallyDestructible storage_;
} Optional<long long>;

typedef struct DiskCacheConfig {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > name_;
	BOOL sessionScoped_;
	int diskArea_;
	BOOL localeSensitive_;
	Optional<long long> version_;
	Optional<long long> maxCapacity_;
	variant<facebook::mobile::xplat::compactdisk::ManualConfig, facebook::mobile::xplat::compactdisk::ManagedConfig, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_> subConfig_;
} DiskCacheConfig;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskSizeCalculator> {
	DiskSizeCalculator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskSizeCalculator>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::UnmanagedStore> {
	UnmanagedStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::UnmanagedStore>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::StoreManager> {
	StoreManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::StoreManager>;

typedef struct _compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > > {
	LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> __first_;
} compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > >;

typedef struct unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > > {
	compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > > __ptr_;
} unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskStore *>, FBDiskCacheConfig *> > >;

typedef struct _compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > > {
	LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> __first_;
} compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > >;

typedef struct unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > > {
	compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > > __ptr_;
} unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBPersistentKeyValueStore *>, FBDiskCacheConfig *> > >;

typedef struct _compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > > {
	LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> __first_;
} compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > >;

typedef struct unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > > {
	compressed_pair<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> *, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > > __ptr_;
} unique_ptr<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *>, std::__1::default_delete<facebook::mobile::xplat::compactdisk::LazySingletonMap<std::__1::basic_string<char>, (anonymous namespace)::ValueWrapper<FBDiskCache *>, FBDiskCacheConfig *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_future<FBDiskStoreManagerWrapper> > > >;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::StoreManagerFactory> {
	StoreManagerFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::StoreManagerFactory>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::LazyDispatcher> {
	LazyDispatcher __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::LazyDispatcher>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::PersistentKeyValueStore> {
	PersistentKeyValueStore __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::PersistentKeyValueStore>;

typedef struct StalePruningConfig {
	long long staleAge_;
} StalePruningConfig;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::EvictionComparator> {
	EvictionComparator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::EvictionComparator>;

typedef struct EvictionConfig {
	long long maxSize_;
	long long lowSpaceMaxSize_;
	shared_ptr<facebook::mobile::xplat::compactdisk::EvictionComparator> evictionComparator_;
} EvictionConfig;

typedef struct ManualConfig {
	Optional<long long> maxSize_;
	Optional<long long> lowSpaceMaxSize_;
} ManualConfig;

typedef struct shared_ptr<folly::Executor> {
	Executor __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<folly::Executor>;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::DiskCacheEventListener> {
	DiskCacheEventListener __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::DiskCacheEventListener>;

typedef struct EventListenerPair {
	shared_ptr<facebook::mobile::xplat::compactdisk::DiskCacheEventListener> eventListener;
	shared_ptr<folly::Executor> eventListenerExecutor;
} EventListenerPair;

typedef struct Optional<facebook::mobile::xplat::compactdisk::EventListenerPair> {
	StorageNonTriviallyDestructible storage_;
} Optional<facebook::mobile::xplat::compactdisk::EventListenerPair>;

typedef struct Optional<facebook::mobile::xplat::compactdisk::EvictionConfig> {
	StorageNonTriviallyDestructible storage_;
} Optional<facebook::mobile::xplat::compactdisk::EvictionConfig>;

typedef struct Optional<facebook::mobile::xplat::compactdisk::StalePruningConfig> {
	StorageTriviallyDestructible storage_;
} Optional<facebook::mobile::xplat::compactdisk::StalePruningConfig>;

typedef struct ManagedConfig {
	BOOL inlineData_;
	Optional<facebook::mobile::xplat::compactdisk::StalePruningConfig> stalePruning_;
	Optional<facebook::mobile::xplat::compactdisk::EvictionConfig> eviction_;
	Optional<facebook::mobile::xplat::compactdisk::EventListenerPair> eventListenerPair_;
} ManagedConfig;

typedef struct shared_ptr<facebook::mobile::xplat::compactdisk::TrashCollector> {
	TrashCollector __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::mobile::xplat::compactdisk::TrashCollector>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > >;

typedef struct unordered_map<FBMobileTraceSite, unsigned long long, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned long long> > > {
	hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned long long> > > __table_;
} unordered_map<FBMobileTraceSite, unsigned long long, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned long long> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > >;

typedef struct unordered_map<FBMobileTraceSite, unsigned int, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned int> > > {
	hash_table<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, std::__1::__unordered_map_hasher<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::HashFunctor<FBMobileTraceSite>, true>, std::__1::__unordered_map_equal<FBMobileTraceSite, std::__1::__hash_value_type<FBMobileTraceSite, unsigned int>, FB::EqualFunctor<FBMobileTraceSite>, true>, std::__1::allocator<std::__1::__hash_value_type<FBMobileTraceSite, unsigned int> > > __table_;
} unordered_map<FBMobileTraceSite, unsigned int, FB::HashFunctor<FBMobileTraceSite>, FB::EqualFunctor<FBMobileTraceSite>, std::__1::allocator<std::__1::pair<const FBMobileTraceSite, unsigned int> > >;

typedef struct FBTraceEvent* FBTraceEventRef;

typedef struct FBDoubleLinkedList {
	FBDoubleLinkedList flink;
	FBDoubleLinkedList blink;
} FBDoubleLinkedList;

typedef struct shared_ptr<mobileconfig::FBMobileConfigMmapHandle> {
	FBMobileConfigMmapHandle __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBMobileConfigMmapHandle>;

typedef struct weak_ptr<mobileconfig::IFBMobileConfigManager> {
	IFBMobileConfigManager __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<mobileconfig::IFBMobileConfigManager>;

typedef struct shared_ptr<mobileconfig::FBRateLimiter<unsigned long long> > {
	FBRateLimiter<unsigned long long> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::FBRateLimiter<unsigned long long> >;

typedef struct shared_ptr<mobileconfig::IFBMobileConfigManager> {
	IFBMobileConfigManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<mobileconfig::IFBMobileConfigManager>;

typedef struct _compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> > {
	FBAnalyticsModuleStackItem __first_;
} compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> >;

typedef struct vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> > {
	FBAnalyticsModuleStackItem __begin_;
	FBAnalyticsModuleStackItem __end_;
	compressed_pair<FBAnalyticsModuleStackItem *, std::__1::allocator<FBAnalyticsModuleStackItem> > __end_cap_;
} vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> >;

typedef struct FBAnalyticsModuleStack {
	vector<FBAnalyticsModuleStackItem, std::__1::allocator<FBAnalyticsModuleStackItem> > items;
} FBAnalyticsModuleStack;

typedef struct atomic<double> {
	Ad __a_;
} atomic<double>;

typedef struct FBHScrollComponentAlpha {
	float alpha;
} FBHScrollComponentAlpha;

typedef struct CKRelativeDimension {
	int _type;
	float _value;
} CKRelativeDimension;

typedef struct FBHScrollComponentStyle {
	float spacing;
	unsigned alignItems;
	FBHScrollComponentAlpha alpha;
	CKRelativeDimension width;
	unsigned clippingStyle;
	unsigned decelerationRate;
	unsigned snapBehavior;
	Class targetComponentClass;
	char hscrollResizingEnabled;
	id currentChildScopeFrameID;
	float percentWidthSidePeek;
} FBHScrollComponentStyle;

typedef struct FBHScrollOptions {
	Class expandToTargetClass;
	float hExpansionLeftAndRightInset;
	int nearingEndOffset;
	int nearingStartOffset;
	SEL endDraggingScrollViewAction;
	NSString* accessibilityIdentifier;
	unsigned delaysContentTouchesOption;
	char disableBounce;
	SEL didScrollAction;
	SEL nearingEndAction;
	SEL nearingStartAction;
	SEL scrollToComponentAction;
	unsigned touchThroughOption;
	char enablePagedAccessibilitySupport;
	unsigned scrollingBehaviorOption;
	char enableFixSkippedItemDueToFastScroll;
} FBHScrollOptions;

typedef struct _compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> > {
	FBHScrollComponentChild __first_;
} compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> >;

typedef struct vector<FBHScrollComponentChild, std::__1::allocator<FBHScrollComponentChild> > {
	FBHScrollComponentChild __begin_;
	FBHScrollComponentChild __end_;
	compressed_pair<FBHScrollComponentChild *, std::__1::allocator<FBHScrollComponentChild> > __end_cap_;
} vector<FBHScrollComponentChild, std::__1::allocator<FBHScrollComponentChild> >;

typedef struct _compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> > {
	id __first_;
} compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> >;

typedef struct vector<UICollectionViewLayoutAttributes *, std::__1::allocator<UICollectionViewLayoutAttributes *> > {
	id __begin_;
	id __end_;
	compressed_pair<UICollectionViewLayoutAttributes *__strong *, std::__1::allocator<UICollectionViewLayoutAttributes *> > __end_cap_;
} vector<UICollectionViewLayoutAttributes *, std::__1::allocator<UICollectionViewLayoutAttributes *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> {
	__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > >;

typedef struct unordered_map<UICollectionViewCell *, FBHScrollMountInfo, FB::HashFunctor<NSObject *>, std::__1::equal_to<UICollectionViewCell *>, std::__1::allocator<std::__1::pair<UICollectionViewCell *const, FBHScrollMountInfo> > > {
	hash_table<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::__unordered_map_hasher<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<UICollectionViewCell *, std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo>, std::__1::equal_to<UICollectionViewCell *>, true>, std::__1::allocator<std::__1::__hash_value_type<UICollectionViewCell *, FBHScrollMountInfo> > > __table_;
} unordered_map<UICollectionViewCell *, FBHScrollMountInfo, FB::HashFunctor<NSObject *>, std::__1::equal_to<UICollectionViewCell *>, std::__1::allocator<std::__1::pair<UICollectionViewCell *const, FBHScrollMountInfo> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<id, UICollectionViewCell *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > >;

typedef struct unordered_map<id, UICollectionViewCell *, FB::HashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, UICollectionViewCell *> > > {
	hash_table<std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::__unordered_map_hasher<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, FB::HashFunctor<NSObject *>, true>, std::__1::__unordered_map_equal<id, std::__1::__hash_value_type<id, UICollectionViewCell *>, std::__1::equal_to<id>, true>, std::__1::allocator<std::__1::__hash_value_type<id, UICollectionViewCell *> > > __table_;
} unordered_map<id, UICollectionViewCell *, FB::HashFunctor<NSObject *>, std::__1::equal_to<id>, std::__1::allocator<std::__1::pair<const id, UICollectionViewCell *> > >;

typedef struct FBHScrollOffsetState {
	id scopeFrameToken;
	float offsetFromChild;
} FBHScrollOffsetState;

typedef struct FBImpressionContentOffsetTrigger {
	float minimumContentOffset;
	float maximumContentOffset;
} FBImpressionContentOffsetTrigger;

typedef struct _compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> > {
	TigonCallbacks __first_;
} compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> >;

typedef struct unique_ptr<facebook::tigon::TigonCallbacks, std::__1::default_delete<facebook::tigon::TigonCallbacks> > {
	compressed_pair<facebook::tigon::TigonCallbacks *, std::__1::default_delete<facebook::tigon::TigonCallbacks> > __ptr_;
} unique_ptr<facebook::tigon::TigonCallbacks, std::__1::default_delete<facebook::tigon::TigonCallbacks> >;

typedef struct shared_ptr<std::__1::unordered_set<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken>, std::__1::hash<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::equal_to<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::allocator<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> > > > {
	unordered_set<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken>, std::__1::hash<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::equal_to<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::allocator<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::unordered_set<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken>, std::__1::hash<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::equal_to<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> >, std::__1::allocator<std::__1::shared_ptr<facebook::tigon::TigonAppStateRequestToken> > > >;

typedef struct shared_ptr<std::__1::mutex> {
	mutex __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::mutex>;

typedef struct shared_ptr<facebook::tigon::TigonService> {
	TigonService __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::tigon::TigonService>;

typedef struct _compressed_pair<facebook::tigon::TigonService *, std::__1::default_delete<facebook::tigon::TigonService> > {
	TigonService __first_;
} compressed_pair<facebook::tigon::TigonService *, std::__1::default_delete<facebook::tigon::TigonService> >;

typedef struct unique_ptr<facebook::tigon::TigonService, std::__1::default_delete<facebook::tigon::TigonService> > {
	compressed_pair<facebook::tigon::TigonService *, std::__1::default_delete<facebook::tigon::TigonService> > __ptr_;
} unique_ptr<facebook::tigon::TigonService, std::__1::default_delete<facebook::tigon::TigonService> >;

typedef struct _compressed_pair<proxygen::httpclient::CertificatePinner *, std::__1::default_delete<proxygen::httpclient::CertificatePinner> > {
	CertificatePinner __first_;
} compressed_pair<proxygen::httpclient::CertificatePinner *, std::__1::default_delete<proxygen::httpclient::CertificatePinner> >;

typedef struct unique_ptr<proxygen::httpclient::CertificatePinner, std::__1::default_delete<proxygen::httpclient::CertificatePinner> > {
	compressed_pair<proxygen::httpclient::CertificatePinner *, std::__1::default_delete<proxygen::httpclient::CertificatePinner> > __ptr_;
} unique_ptr<proxygen::httpclient::CertificatePinner, std::__1::default_delete<proxygen::httpclient::CertificatePinner> >;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef union GLKMatrix4 {
	CATransform3D field1;
	float m[16];
} GLKMatrix4;

typedef struct __CVBuffer* CVBufferRef;

typedef union GLKVector4 {
	UIEdgeInsets field1;
	UIEdgeInsets field2;
	UIEdgeInsets field3;
	float v[4];
} GLKVector4;

typedef struct {
	_ field1;
	G field2;
	unsigned long field3;
	K field4;
	V field5;
	e field6;
	char field7;
	t field8;
	o field9;
	const  field10;
	2 field11;
	= field12;
	CGPoint field13;
	CGPoint field14;
	float field15[2];
	_ field16;
	UIEdgeInsets field17;
	= field18;
	UIEdgeInsets field19;
	UIEdgeInsets field20;
	GLKVector4 field21;
	float field22[4];
} SCD_Struct_FB517;

typedef struct _compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> > {
	FBCollageLayoutComponentChild __first_;
} compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> >;

typedef struct vector<FBCollageLayoutComponentChild, std::__1::allocator<FBCollageLayoutComponentChild> > {
	FBCollageLayoutComponentChild __begin_;
	FBCollageLayoutComponentChild __end_;
	compressed_pair<FBCollageLayoutComponentChild *, std::__1::allocator<FBCollageLayoutComponentChild> > __end_cap_;
} vector<FBCollageLayoutComponentChild, std::__1::allocator<FBCollageLayoutComponentChild> >;

typedef struct SegmentTracker {
	NSURLRequest* urlRequest;
	unsigned long long priorOffset;
	unsigned long long bytesRequested;
	unsigned long long bytesReceived;
} SegmentTracker;

typedef struct FNFMP4MvhdAtom {
	unsigned timescale;
	unsigned duration;
} FNFMP4MvhdAtom;

typedef struct FNFMP4MehdAtom {
	int duration;
} FNFMP4MehdAtom;

typedef struct _compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> > {
	FNFMP4MoofAtom __first_;
} compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> >;

typedef struct vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> > {
	FNFMP4MoofAtom __begin_;
	FNFMP4MoofAtom __end_;
	compressed_pair<FNFMP4MoofAtom *, std::__1::allocator<FNFMP4MoofAtom> > __end_cap_;
} vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> >;

typedef struct _compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> > {
	FNFMP4SidxSegment __first_;
} compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> >;

typedef struct vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> > {
	FNFMP4SidxSegment __begin_;
	FNFMP4SidxSegment __end_;
	compressed_pair<FNFMP4SidxSegment *, std::__1::allocator<FNFMP4SidxSegment> > __end_cap_;
} vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> >;

typedef struct FNFMP4SidxAtom {
	unsigned timescale;
	vector<FNFMP4SidxSegment, std::__1::allocator<FNFMP4SidxSegment> > segments;
} FNFMP4SidxAtom;

typedef struct _compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> > {
	FNFMP4TrexAtom __first_;
} compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> >;

typedef struct vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> > {
	FNFMP4TrexAtom __begin_;
	FNFMP4TrexAtom __end_;
	compressed_pair<FNFMP4TrexAtom *, std::__1::allocator<FNFMP4TrexAtom> > __end_cap_;
} vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> >;

typedef struct FNFMP4MvexAtom {
	FNFMP4MehdAtom mehdAtom;
	vector<FNFMP4TrexAtom, std::__1::allocator<FNFMP4TrexAtom> > trexAtoms;
} FNFMP4MvexAtom;

typedef struct _compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> > {
	FNFMP4TrakAtom __first_;
} compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> >;

typedef struct vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> > {
	FNFMP4TrakAtom __begin_;
	FNFMP4TrakAtom __end_;
	compressed_pair<FNFMP4TrakAtom *, std::__1::allocator<FNFMP4TrakAtom> > __end_cap_;
} vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> >;

typedef struct FNFMP4MoovAtom {
	FNFMP4MvhdAtom mvhdAtom;
	vector<FNFMP4TrakAtom, std::__1::allocator<FNFMP4TrakAtom> > trakAtoms;
	FNFMP4MvexAtom mvexAtom;
} FNFMP4MoovAtom;

typedef struct FNFMP4MoovAtomProvider {
	FNFMP4MoovAtom _moovAtom;
	unsigned long long _moovAtomSize;
	FNFMP4SidxAtom _sidxAtom;
	vector<FNFMP4MoofAtom, std::__1::allocator<FNFMP4MoofAtom> > _moofAtoms;
} FNFMP4MoovAtomProvider;

typedef struct FNFMP4FrameMetadata {
	unsigned long long offset;
	unsigned size;
	unsigned duration;
	unsigned long long dts;
	unsigned long long pts;
} FNFMP4FrameMetadata;

typedef struct _compressed_pair<FNFMP4FrameDelta *, std::__1::allocator<FNFMP4FrameDelta> > {
	FNFMP4FrameDelta __first_;
} compressed_pair<FNFMP4FrameDelta *, std::__1::allocator<FNFMP4FrameDelta> >;

typedef struct vector<FNFMP4FrameDelta, std::__1::allocator<FNFMP4FrameDelta> > {
	FNFMP4FrameDelta __begin_;
	FNFMP4FrameDelta __end_;
	compressed_pair<FNFMP4FrameDelta *, std::__1::allocator<FNFMP4FrameDelta> > __end_cap_;
} vector<FNFMP4FrameDelta, std::__1::allocator<FNFMP4FrameDelta> >;

typedef struct _compressed_pair<FNFMP4Keyframe *, std::__1::allocator<FNFMP4Keyframe> > {
	FNFMP4Keyframe __first_;
} compressed_pair<FNFMP4Keyframe *, std::__1::allocator<FNFMP4Keyframe> >;

typedef struct vector<FNFMP4Keyframe, std::__1::allocator<FNFMP4Keyframe> > {
	FNFMP4Keyframe __begin_;
	FNFMP4Keyframe __end_;
	compressed_pair<FNFMP4Keyframe *, std::__1::allocator<FNFMP4Keyframe> > __end_cap_;
} vector<FNFMP4Keyframe, std::__1::allocator<FNFMP4Keyframe> >;

typedef struct FNFMp4FrameMetadataCompressor {
	FNFMP4FrameMetadata _frame;
	unsigned _keyframeIndex;
	unsigned _frameIndex;
	FNFMP4FrameMetadata _lastFrame;
	FNFMP4FrameMetadata _indexedFrame;
	unsigned _size;
	unsigned _initialDts;
	unsigned _initialOffset;
	unsigned _largestOffset;
	vector<FNFMP4Keyframe, std::__1::allocator<FNFMP4Keyframe> > _keyframes;
	vector<FNFMP4FrameDelta, std::__1::allocator<FNFMP4FrameDelta> > _deltas;
} FNFMp4FrameMetadataCompressor;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > {
	__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > __pair3_;
} tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > >;

typedef struct map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > > {
	tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > __tree_;
} map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > >;

typedef struct _compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __first_;
} compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __begin_;
	FNFMP4TrakAtomForSeek __end_;
	compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > __end_cap_;
} vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct FNFMP4MoovAtomCompressed {
	vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > trakAtoms;
	FNFMP4MvhdAtom mvhdAtom;
} FNFMP4MoovAtomCompressed;

typedef struct shared_ptr<bool> {
	BOOL __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<bool>;

typedef struct _compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> > {
	FBMPCEncodingObjectContext __first_;
} compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> >;

typedef struct vector<FBMPCEncodingObjectContext *, std::__1::allocator<FBMPCEncodingObjectContext *> > {
	FBMPCEncodingObjectContext __begin_;
	FBMPCEncodingObjectContext __end_;
	compressed_pair<FBMPCEncodingObjectContext **, std::__1::allocator<FBMPCEncodingObjectContext *> > __end_cap_;
} vector<FBMPCEncodingObjectContext *, std::__1::allocator<FBMPCEncodingObjectContext *> >;

typedef struct _compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> > {
	FBMPCDecodingObjectContext __first_;
} compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> >;

typedef struct vector<FBMPCDecodingObjectContext, std::__1::allocator<FBMPCDecodingObjectContext> > {
	FBMPCDecodingObjectContext __begin_;
	FBMPCDecodingObjectContext __end_;
	compressed_pair<FBMPCDecodingObjectContext *, std::__1::allocator<FBMPCDecodingObjectContext> > __end_cap_;
} vector<FBMPCDecodingObjectContext, std::__1::allocator<FBMPCDecodingObjectContext> >;

typedef struct FBNSStringCache {
	FBNSStringCacheItem items;
	unsigned prng_lfsr;
	unsigned char age[1024];
} FBNSStringCache;

typedef struct MessagePackParseState {
	FBNSStringCache cache;
} MessagePackParseState;

typedef struct _compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > {
	EncodedObjectRecord __first_;
} compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> >;

typedef struct vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > {
	EncodedObjectRecord __begin_;
	EncodedObjectRecord __end_;
	compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > __end_cap_;
} vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> >;

typedef struct FBMPCEncodingObjectContext {
	vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::__1::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord> > _encodedObjects;
} FBMPCEncodingObjectContext;

typedef struct {
	unsigned field1;
	msgpack_object_kv field2;
} SCD_Struct_FB559;

typedef struct shared_ptr<facebook::image_processing::RGBA8Pixel> {
	RGBA8Pixel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::image_processing::RGBA8Pixel>;

typedef struct Image<facebook::image_processing::RGBA8Pixel> {
	shared_ptr<facebook::image_processing::RGBA8Pixel> data_;
	unsigned widthInPixels;
	unsigned heightInPixels;
	unsigned bytesPerPixel;
} Image<facebook::image_processing::RGBA8Pixel>;

typedef struct FilterConfig {
	float vibranceValue;
	float equalizationWeight;
	float minimumFaceBrightness;
	float minSlope;
	float maxSlope;
	float bilateralDetailScale;
	float denoising;
	float bilateralDefaultDetailScale;
	float bilateralMaxDetailScale;
	float bilateralLumSigma;
	float bilateralSpaceSigmaFactor;
	BOOL useBilateralGridApproximation;
	float noiseMaskScale;
	int noiseMaskRadius;
	float kneeDenoising;
	float maxDenoising;
} FilterConfig;

typedef struct _compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> > {
	FilteredImage __first_;
} compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> >;

typedef struct unique_ptr<facebook::image_processing::FilteredImage, std::__1::default_delete<facebook::image_processing::FilteredImage> > {
	compressed_pair<facebook::image_processing::FilteredImage *, std::__1::default_delete<facebook::image_processing::FilteredImage> > __ptr_;
} unique_ptr<facebook::image_processing::FilteredImage, std::__1::default_delete<facebook::image_processing::FilteredImage> >;

typedef struct shared_ptr<facebook::image_processing::ImageMetadata> {
	ImageMetadata __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<facebook::image_processing::ImageMetadata>;

typedef struct array<float, 256> {
	float __elems_[256];
} array<float, 256>;

typedef struct _compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<unsigned long long> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<unsigned long long> >;

typedef struct _split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> > {
	unsigned long long __first_;
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *> > __end_cap_;
} split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> >;

typedef struct deque<unsigned long long, std::__1::allocator<unsigned long long> > {
	split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<unsigned long long> > __size_;
} deque<unsigned long long, std::__1::allocator<unsigned long long> >;

typedef struct queue<unsigned long long, std::__1::deque<unsigned long long, std::__1::allocator<unsigned long long> > > {
	deque<unsigned long long, std::__1::allocator<unsigned long long> > c;
} queue<unsigned long long, std::__1::deque<unsigned long long, std::__1::allocator<unsigned long long> > >;

typedef struct CKSizeRange {
	CGSize min;
	CGSize max;
} CKSizeRange;

typedef struct CKComponentBoundsAnimation {
	double duration;
	double delay;
	unsigned mode;
	unsigned options;
	float springDampingRatio;
	float springInitialVelocity;
} CKComponentBoundsAnimation;

typedef struct CKComponentLifecycleManagerState {
	id model;
	id context;
	 <NSObject>;
	CKSizeRange constrainedSize;
	CKComponentLayout layout;
	id root;
	 CKComponentScopeRoot;
	id memoizerState;
	CKComponentBoundsAnimation boundsAnimation;
} CKComponentLifecycleManagerState;

typedef struct _compressed_pair<unsigned long, std::__1::less<int> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::less<int> >;

typedef struct _compressed_pair<unsigned long, std::__1::less<std::__1::pair<int, int> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::less<std::__1::pair<int, int> > >;

typedef struct _compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> > {
	id __first_;
} compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> >;

typedef struct vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> > {
	id __begin_;
	id __end_;
	compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *> > __end_cap_;
} vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<int, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<int, int>, void *> > >;

typedef struct _tree<std::__1::pair<int, int>, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<int, int> > > {
	__tree_node<std::__1::pair<int, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<int, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<std::__1::pair<int, int> > > __pair3_;
} tree<std::__1::pair<int, int>, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<int, int> > >;

typedef struct set<std::__1::pair<int, int>, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<int, int> > > {
	tree<std::__1::pair<int, int>, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<int, int> > > __tree_;
} set<std::__1::pair<int, int>, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<int, int> > >;

typedef struct _tree<int, std::__1::less<int>, std::__1::allocator<int> > {
	__tree_node<int, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<int, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<int> > __pair3_;
} tree<int, std::__1::less<int>, std::__1::allocator<int> >;

typedef struct set<int, std::__1::less<int>, std::__1::allocator<int> > {
	tree<int, std::__1::less<int>, std::__1::allocator<int> > __tree_;
} set<int, std::__1::less<int>, std::__1::allocator<int> >;

typedef struct Sections {
	set<int, std::__1::less<int>, std::__1::allocator<int> > _insertions;
	set<int, std::__1::less<int>, std::__1::allocator<int> > _removals;
	set<std::__1::pair<int, int>, std::__1::less<std::__1::pair<int, int> >, std::__1::allocator<std::__1::pair<int, int> > > _moves;
} Sections;

typedef struct CKComponentPreparationInputBatch {
	unsigned long long ID;
	Sections sections;
	vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *> > items;
	char isContiguousTailInsertion;
} CKComponentPreparationInputBatch;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> >;

typedef struct _compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > {
	CKSuspensionControllerChangesetContainer __first_;
} compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> >;

typedef struct _split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > {
	CKSuspensionControllerChangesetContainer __first_;
	CKSuspensionControllerChangesetContainer __begin_;
	CKSuspensionControllerChangesetContainer __end_;
	compressed_pair<CKSuspensionControllerChangesetContainer **, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > __end_cap_;
} split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> >;

typedef struct deque<CKSuspensionControllerChangesetContainer, std::__1::allocator<CKSuspensionControllerChangesetContainer> > {
	split_buffer<CKSuspensionControllerChangesetContainer *, std::__1::allocator<CKSuspensionControllerChangesetContainer *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<CKSuspensionControllerChangesetContainer> > __size_;
} deque<CKSuspensionControllerChangesetContainer, std::__1::allocator<CKSuspensionControllerChangesetContainer> >;

typedef struct CKStateConfiguration {
	NSString* title;
	UIColor* titleColor;
	UIImage* image;
	UIImage* backgroundImage;
} CKStateConfiguration;

typedef struct array<CKStateConfiguration, 8> {
	CKStateConfiguration __elems_[8];
} array<CKStateConfiguration, 8>;

typedef struct shared_ptr<const CKComponentViewConfiguration::Repr> {
	Repr __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const CKComponentViewConfiguration::Repr>;

typedef struct CKComponentViewConfiguration {
	shared_ptr<const CKComponentViewConfiguration::Repr> rep;
} CKComponentViewConfiguration;

typedef struct CKComponentSize {
	CKRelativeDimension width;
	CKRelativeDimension height;
	CKRelativeDimension minWidth;
	CKRelativeDimension minHeight;
	CKRelativeDimension maxWidth;
	CKRelativeDimension maxHeight;
} CKComponentSize;

typedef struct _compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> > {
	CKComponentMountInfo __first_;
} compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> >;

typedef struct unique_ptr<CKComponentMountInfo, std::__1::default_delete<CKComponentMountInfo> > {
	compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo> > __ptr_;
} unique_ptr<CKComponentMountInfo, std::__1::default_delete<CKComponentMountInfo> >;

typedef struct _compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> > {
	CKPendingComponentAnimation __first_;
} compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> >;

typedef struct vector<CKPendingComponentAnimation, std::__1::allocator<CKPendingComponentAnimation> > {
	CKPendingComponentAnimation __begin_;
	CKPendingComponentAnimation __end_;
	compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation> > __end_cap_;
} vector<CKPendingComponentAnimation, std::__1::allocator<CKPendingComponentAnimation> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation> > >;

typedef struct unordered_map<unsigned long, CKAppliedComponentAnimation, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CKAppliedComponentAnimation> > > {
	hash_table<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation> > > __table_;
} unordered_map<unsigned long, CKAppliedComponentAnimation, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CKAppliedComponentAnimation> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id ()(id)>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > >;

typedef struct unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > {
	hash_table<std::__1::__hash_value_type<int, id ()(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id ()(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id ()(id)> > > __table_;
} unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > >;

typedef struct unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *> > > {
	hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *> > > __table_;
} unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > >;

typedef struct unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout> > > {
	hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout> > > __table_;
} unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout> > >;

typedef struct shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > > {
	unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> >;

typedef struct _compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> > {
	id __first_;
} compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> >;

typedef struct vector<UIView *, std::__1::allocator<UIView *> > {
	id __begin_;
	id __end_;
	compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> > __end_cap_;
} vector<UIView *, std::__1::allocator<UIView *> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > >;

typedef struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > > {
	hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool> > > __table_;
} unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > >;

typedef struct ViewReusePoolMap {
	unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool> > > map;
	vector<UIView *, std::__1::allocator<UIView *> > vendedViews;
} ViewReusePoolMap;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > >;

typedef struct unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *> > > {
	hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *> > > __table_;
} unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > >;

typedef struct unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const CKComponentAnnouncedEvent, CKComponentController *> > > {
	hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *> > > __table_;
} unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const CKComponentAnnouncedEvent, CKComponentController *> > >;

typedef struct shared_ptr<const std::__1::vector<__weak id, std::__1::allocator<__weak id> > > {
	vector<__weak id, std::__1::allocator<__weak id> > __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const std::__1::vector<__weak id, std::__1::allocator<__weak id> > >;

typedef struct CKComponentHostingViewInputs {
	CKComponentScopeRoot* scopeRoot;
	<NSObject>* model;
	<NSObject>* context;
	unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > stateUpdates;
} CKComponentHostingViewInputs;

typedef struct CKStackLayoutComponentStyle {
	unsigned direction;
	float spacing;
	unsigned justifyContent;
	unsigned alignItems;
} CKStackLayoutComponentStyle;

typedef struct _compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> > {
	CKStackLayoutComponentChild __first_;
} compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> >;

typedef struct vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild> > {
	CKStackLayoutComponentChild __begin_;
	CKStackLayoutComponentChild __end_;
	compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild> > __end_cap_;
} vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild> >;

typedef struct _compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> > {
	CKStaticLayoutComponentChild __first_;
} compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> >;

typedef struct vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild> > {
	CKStaticLayoutComponentChild __begin_;
	CKStaticLayoutComponentChild __end_;
	compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild> > __end_cap_;
} vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > >;

typedef struct unordered_map<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, std::__1::allocator<std::__1::pair<const std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > > __table_;
} unordered_map<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id> >, std::__1::allocator<std::__1::pair<const std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > >;

typedef struct unordered_map<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > {
	hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > > __table_;
} unordered_map<int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > >, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id ()(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id ()(id)> > > > > >;

typedef struct _compressed_pair<SEL **, std::__1::allocator<SEL *> > {
	SEL __first_;
} compressed_pair<SEL **, std::__1::allocator<SEL *> >;

typedef struct vector<SEL *, std::__1::allocator<SEL *> > {
	SEL __begin_;
	SEL __end_;
	compressed_pair<SEL **, std::__1::allocator<SEL *> > __end_cap_;
} vector<SEL *, std::__1::allocator<SEL *> >;

typedef struct CKTextKitAttributes {
	NSAttributedString* attributedString;
	NSAttributedString* truncationAttributedString;
	NSCharacterSet* avoidTailTruncationSet;
	int lineBreakMode;
	unsigned maximumNumberOfLines;
	CGSize shadowOffset;
	UIColor* shadowColor;
	float shadowOpacity;
	float shadowRadius;
	/*function pointer*/void* layoutManagerFactory;
} CKTextKitAttributes;

typedef struct CKComponentAccessibilityTextAttribute {
	/*^block*/id accessibilityLazyTextBlock;
} CKComponentAccessibilityTextAttribute;

typedef struct CKTextComponentAccessibilityContext {
	NSNumber* isAccessibilityElement;
	NSString* accessibilityIdentifier;
	NSNumber* providesAccessibleElements;
	CKComponentAccessibilityTextAttribute accessibilityLabel;
} CKTextComponentAccessibilityContext;

typedef struct _compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > {
	_NSRange __first_;
} compressed_pair<_NSRange *, std::__1::allocator<_NSRange> >;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange> > {
	_NSRange __begin_;
	_NSRange __end_;
	compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > __end_cap_;
} vector<_NSRange, std::__1::allocator<_NSRange> >;

typedef struct OpaqueAudioQueue* OpaqueAudioQueueRef;

typedef struct AQBufferParameters {
	unsigned bufferSize;
	unsigned packetCount;
} AQBufferParameters;

typedef struct SMPTETime {
	short mSubframes;
	short mSubframeDivisor;
	unsigned mCounter;
	unsigned long mType;
	unsigned mFlags;
	short mHours;
	short mMinutes;
	short mSeconds;
	short mFrames;
} SMPTETime;

typedef struct AudioTimeStamp {
	double mSampleTime;
	unsigned long long mHostTime;
	double mRateScalar;
	unsigned long long mWordClockTime;
	SMPTETime mSMPTETime;
	unsigned mFlags;
	unsigned mReserved;
} AudioTimeStamp;

typedef struct AQBufferState {
	AudioQueueBuffer bufferRef;
	AudioTimeStamp timestamp;
	char enqueued;
} AQBufferState;

typedef struct OpaqueCMClock* OpaqueCMClockRef;

typedef struct OpaqueCMTimebase* OpaqueCMTimebaseRef;

typedef struct OpaqueVTDecompressionSession* OpaqueVTDecompressionSessionRef;

typedef struct FNFPlayerState {
	char playingRequested;
	char isPlaying;
	char isStalled;
	char endTimeReached;
	char firstAudioFrameEnqueued;
	char stoppedEnqueuingVideo;
	char stoppedEnqueuingAudio;
	char isFirstVideoFrame;
	char recreatedLayerOnError;
	SCD_Struct_FB51 lastStartingTime;
	SCD_Struct_FB51 latestEnqueuedVideoPts;
	SCD_Struct_FB51 latestEnqueuedAudioPts;
	id playbackTimeObserverForAsset;
	id durationTimerForAsset;
	id stallTimerObserver;
	SCD_Struct_FB51 backgroundPauseTime;
} FNFPlayerState;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> {
	__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >;

typedef struct unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > > {
	hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > > __table_;
} unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >;

typedef struct FBAnimationPerformanceTrackerConfig {
	int smallDropEventFrameNumber;
	int largeDropEventFrameNumber;
	int maxFrameDropAccount;
	char reportStackTraces;
} FBAnimationPerformanceTrackerConfig;

typedef struct _compressed_pair<webrtc::OpenGles20 *, std::__1::default_delete<webrtc::OpenGles20> > {
	OpenGles20 __first_;
} compressed_pair<webrtc::OpenGles20 *, std::__1::default_delete<webrtc::OpenGles20> >;

typedef struct unique_ptr<webrtc::OpenGles20, std::__1::default_delete<webrtc::OpenGles20> > {
	compressed_pair<webrtc::OpenGles20 *, std::__1::default_delete<webrtc::OpenGles20> > __ptr_;
} unique_ptr<webrtc::OpenGles20, std::__1::default_delete<webrtc::OpenGles20> >;

typedef struct objc_method* objc_methodRef;

typedef struct __SecRandom* SecRandomRef;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct WebPDemuxer* WebPDemuxerRef;

typedef struct TexCoordExtent {
	float left;
	float right;
	float bottom;
	float top;
} TexCoordExtent;

typedef struct Snapshot {
	unsigned gl_target;
	unsigned gl_texture;
	TexCoordExtent texCoordExtent;
	unsigned bitmapWidth;
	unsigned bitmapHeight;
	__CVOpenGLESTextureCache cv_textureCache;
	__CVBuffer cv_pixelBuffer;
	__CVBuffer cv_texture;
} Snapshot;

typedef struct PingPongFilter {
	int pingPong;
	int width;
	int height;
	unsigned bitmapInfo;
	CGColorSpace colorSpace;
	CVBuffer cv_pixelBuffers[2__];
	__CVOpenGLESTextureCache cv_textureCache;
	CVBuffer cv_textures[2__];
	unsigned gl_framebuffers[2];
	unsigned gl_fallback_textures[2];
} PingPongFilter;

typedef struct {
	unsigned texture;
	unsigned saturation;
	unsigned blendWithColor;
} SCD_Struct_FB737;

typedef struct SaturationShader {
	unsigned program;
	SCD_Struct_FB737 uniform;
} SaturationShader;

typedef struct BoxBlur1DShader {
	unsigned program;
	NSRange uniform;
} BoxBlur1DShader;

typedef struct PositionTexCoordQuad {
	unsigned buffers[2];
} PositionTexCoordQuad;

typedef struct FBFXGeometryEffectShader {
	unsigned program;
	NSRange uniform;
} FBFXGeometryEffectShader;

typedef struct TextureShader {
	unsigned program;
	NSRange uniform;
} TextureShader;

typedef struct {
	unsigned transform;
	unsigned texture;
	unsigned invBlockSize;
	unsigned alpha;
} SCD_Struct_FB743;

typedef struct FBFXPixellateEffectShader {
	unsigned program;
	SCD_Struct_FB743 uniform;
} FBFXPixellateEffectShader;

typedef struct _compressed_pair<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> *, std::__1::allocator<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > > {
	accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> __first_;
} compressed_pair<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> *, std::__1::allocator<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > >;

typedef struct vector<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void>, std::__1::allocator<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > > {
	accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> __begin_;
	accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> __end_;
	compressed_pair<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> *, std::__1::allocator<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > > __end_cap_;
} vector<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void>, std::__1::allocator<boost::accumulators::accumulator_set<double, boost::accumulators::features<boost::accumulators::tag::count, boost::accumulators::tag::sum, boost::accumulators::tag::mean, boost::accumulators::tag::max, boost::accumulators::tag::min, boost::accumulators::tag::variance, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, void> > >;

typedef struct _compressed_pair<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > *, std::__1::allocator<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > > > {
	unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > __first_;
} compressed_pair<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > *, std::__1::allocator<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > > >;

typedef struct vector<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > >, std::__1::allocator<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > > > {
	unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > __begin_;
	unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > __end_;
	compressed_pair<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > *, std::__1::allocator<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > > > __end_cap_;
} vector<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > >, std::__1::allocator<std::__1::unordered_map<NSString *, double, ObjcHash, ObjcEqual, std::__1::allocator<std::__1::pair<NSString *const, double> > > > >;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct CGDataProvider* CGDataProviderRef;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned total_in;
	char* next_out;
	unsigned avail_out;
	unsigned total_out;
	char* msg;
	internal_state state;
	/*function pointer*/void* zalloc;
	/*function pointer*/void* zfree;
	void opaque;
	int data_type;
	unsigned adler;
	unsigned reserved;
} z_stream_s;

typedef struct ZZStandardCryptoEngine {
	int keys[3];
} ZZStandardCryptoEngine;

typedef struct {
	id field1;
	id field2;
	/*function pointer*/void* field3;
	id field4;
	/*function pointer*/void* field5;
	float field6;
} SCD_Struct_PO753;

typedef struct SpringSolver<POP::Vector4<double> >* SpringSolver<POP::Vector4<double> >Ref;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > >;

typedef struct _list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> {
	__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> __prev_;
	__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> __next_;
} list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *>;

typedef struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > > {
	list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *> > > __size_alloc_;
} list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem> > >;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct objc_ivar* objc_ivarRef;

typedef struct __asl_object_s* asl_object_sRef;

