/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 2:23:00 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/B4BDDC65-4400-4BC5-A974-2245FB5B0846/MessengerCompressed-iphoneos-arm64,iphoneos-armv7.app/MessengerCompressed-iphoneos-arm64,iphoneos-armv7
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSMutableDictionary, NSDictionary;

@interface NBPhoneNumberUtil : NSObject {

	NSMutableDictionary* _coreMetaData;
	NSMutableDictionary* _mapCCode2CN;
	NSMutableDictionary* _mapCN2CCode;

}

@property (nonatomic,readonly) NSMutableDictionary * coreMetaData;              //@synthesize coreMetaData=_coreMetaData - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * mapCCode2CN;                 //@synthesize mapCCode2CN=_mapCCode2CN - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * mapCN2CCode;                 //@synthesize mapCN2CCode=_mapCN2CCode - In the implementation block
@property (nonatomic,readonly) NSDictionary * DIGIT_MAPPINGS; 
+(id)sharedInstanceForTest;
+(id)stringByTrimming:(id)arg1 ;
+(id)sharedInstance;
-(unsigned long)getCountryCodeForRegion:(id)arg1 ;
-(id)getRegionCodeForCountryCode:(unsigned long)arg1 ;
-(id)initWithPhoneNumberMetadata:(id)arg1 ;
-(id)initForTest;
-(id)replaceStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3 ;
-(id)matchesByRegex:(id)arg1 regex:(id)arg2 ;
-(NSMutableDictionary *)mapCN2CCode;
-(NSMutableDictionary *)mapCCode2CN;
-(void)initRegularExpressionSet;
-(void)initNormalizationMappings;
-(void)initCC2CN;
-(void)clearCC2CN;
-(void)clearCN2CC;
-(void)setMapCCode2CN:(NSMutableDictionary *)arg1 ;
-(void)setMapCN2CCode:(NSMutableDictionary *)arg1 ;
-(int)stringPositionByRegex:(id)arg1 regex:(id)arg2 ;
-(char)matchesEntirely:(id)arg1 string:(id)arg2 ;
-(id)normalizeHelper:(id)arg1 normalizationReplacements:(id)arg2 removeNonMatches:(char)arg3 ;
-(id)normalizePhoneNumber:(id)arg1 ;
-(NSDictionary *)DIGIT_MAPPINGS;
-(id)stringByReplacingOccurrencesString:(id)arg1 withMap:(id)arg2 removeNonMatches:(char)arg3 ;
-(unsigned)getLengthOfGeographicalAreaCode:(id)arg1 ;
-(id)getMetadataForRegion:(id)arg1 ;
-(char)isNumberGeographical:(id)arg1 ;
-(unsigned)getLengthOfNationalDestinationCode:(id)arg1 ;
-(char)hasValue:(id)arg1 ;
-(id)format:(id)arg1 numberFormat:(int)arg2 ;
-(id)componentsSeparatedByRegex:(id)arg1 regex:(id)arg2 ;
-(id)regionCodeFromCountryCode:(unsigned long)arg1 ;
-(int)getNumberType:(id)arg1 ;
-(char)isNaN:(id)arg1 ;
-(id)getNationalSignificantNumber:(id)arg1 ;
-(id)prefixNumberWithCountryCallingCode:(unsigned long)arg1 phoneNumberFormat:(int)arg2 formattedNationalNumber:(id)arg3 formattedExtension:(id)arg4 ;
-(char)hasValidCountryCallingCode:(unsigned long)arg1 ;
-(id)getMetadataForRegionOrCallingCode:(unsigned long)arg1 regionCode:(id)arg2 ;
-(id)maybeGetFormattedExtension:(id)arg1 metadata:(id)arg2 numberFormat:(int)arg3 ;
-(id)formatNsn:(id)arg1 metadata:(id)arg2 phoneNumberFormat:(int)arg3 carrierCode:(id)arg4 ;
-(id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3 ;
-(id)chooseFormattingPatternForNumber:(id)arg1 nationalNumber:(id)arg2 ;
-(id)formatNsnUsingPattern:(id)arg1 formattingPattern:(id)arg2 numberFormat:(int)arg3 carrierCode:(id)arg4 ;
-(id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 ;
-(id)getMetadataForNonGeographicalRegion:(unsigned long)arg1 ;
-(id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(char)arg3 ;
-(id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 ;
-(char)canBeInternationallyDialled:(id)arg1 ;
-(id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 ;
-(char)isValidRegionCode:(id)arg1 ;
-(char)isNANPACountry:(id)arg1 ;
-(unsigned long)getCountryCodeForValidRegion:(id)arg1 ;
-(id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 ;
-(char)hasUnexpectedItalianLeadingZero:(id)arg1 ;
-(char)hasFormattingPatternForNumber:(id)arg1 ;
-(id)getNddPrefixForRegion:(id)arg1 stripNonDigits:(char)arg2 ;
-(char)rawInputContainsNationalPrefix:(id)arg1 nationalPrefix:(id)arg2 regionCode:(id)arg3 ;
-(char)isStartingStringByRegex:(id)arg1 regex:(id)arg2 ;
-(id)parse:(id)arg1 defaultRegion:(id)arg2 ;
-(char)isLeadingZeroPossible:(unsigned long)arg1 ;
-(id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 ;
-(int)indexOfStringByString:(id)arg1 target:(id)arg2 ;
-(id)replaceFirstStringByRegex:(id)arg1 regex:(id)arg2 withTemplate:(id)arg3 ;
-(id)getExampleNumber:(id)arg1 ;
-(id)getExampleNumberForType:(id)arg1 type:(int)arg2 ;
-(id)getNumberDescByType:(id)arg1 type:(int)arg2 ;
-(id)getExampleNumberForNonGeoEntity:(unsigned long)arg1 ;
-(int)getNumberTypeHelper:(id)arg1 metadata:(id)arg2 ;
-(char)isNumberMatchingDesc:(id)arg1 numberDesc:(id)arg2 ;
-(NSMutableDictionary *)coreMetaData;
-(char)isValidNumberForRegion:(id)arg1 regionCode:(id)arg2 ;
-(id)getRegionCodeForNumberFromRegionList:(id)arg1 regionCodes:(id)arg2 ;
-(unsigned long)getCountryCodeForValidRegion:(id)arg1 error:(id*)arg2 ;
-(char)isViablePhoneNumber:(id)arg1 ;
-(id)maybeStripExtension:(id*)arg1 ;
-(char)isPossibleNumber:(id)arg1 ;
-(int)isPossibleNumberWithReason:(id)arg1 ;
-(int)testNumberLengthAgainstPattern:(id)arg1 number:(id)arg2 ;
-(char)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 ;
-(char)truncateTooLongNumber:(id)arg1 ;
-(unsigned long)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id*)arg3 keepRawInput:(char)arg4 phoneNumber:(id*)arg5 ;
-(int)maybeStripInternationalPrefixAndNormalize:(id*)arg1 possibleIddPrefix:(id)arg2 ;
-(unsigned long)extractCountryCode:(id)arg1 nationalNumber:(id*)arg2 ;
-(char)maybeStripNationalPrefixAndCarrierCode:(id*)arg1 metadata:(id)arg2 carrierCode:(id*)arg3 ;
-(void)normalizeSB:(id*)arg1 ;
-(char)parsePrefixAsIdd:(id)arg1 sourceString:(id*)arg2 ;
-(id)matcheFirstByRegex:(id)arg1 regex:(id)arg2 ;
-(id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(char)arg3 checkRegion:(char)arg4 ;
-(id)countyCodeByCarrier;
-(id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 ;
-(id)extractOptionalPauseComponent:(id)arg1 numberLeftToParse:(id*)arg2 ;
-(void)buildNationalNumberForParsing:(id)arg1 nationalNumber:(id*)arg2 ;
-(char)checkRegionForParsing:(id)arg1 defaultRegion:(id)arg2 ;
-(id)extractPossibleNumber:(id)arg1 ;
-(int)isNumberMatch:(id)arg1 second:(id)arg2 ;
-(char)isNationalNumberSuffixOfTheOther:(id)arg1 second:(id)arg2 ;
-(id)matchedStringByRegex:(id)arg1 regex:(id)arg2 ;
-(id)countryCodeFromRegionCode:(id)arg1 ;
-(id)convertAlphaCharactersInNumber:(id)arg1 ;
-(unsigned)getLengthOfGeographicalAreaCode:(id)arg1 error:(id*)arg2 ;
-(unsigned)getLengthOfNationalDestinationCode:(id)arg1 error:(id*)arg2 ;
-(char)formattingRuleHasFirstGroupOnly:(id)arg1 ;
-(id)formatByPattern:(id)arg1 numberFormat:(int)arg2 userDefinedFormats:(id)arg3 error:(id*)arg4 ;
-(id)formatNationalNumberWithCarrierCode:(id)arg1 carrierCode:(id)arg2 error:(id*)arg3 ;
-(id)formatNationalNumberWithPreferredCarrierCode:(id)arg1 fallbackCarrierCode:(id)arg2 error:(id*)arg3 ;
-(id)formatNumberForMobileDialing:(id)arg1 regionCallingFrom:(id)arg2 withFormatting:(char)arg3 error:(id*)arg4 ;
-(id)formatOutOfCountryCallingNumber:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)formatInOriginalFormat:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)formatOutOfCountryKeepingAlphaChars:(id)arg1 regionCallingFrom:(id)arg2 error:(id*)arg3 ;
-(id)getExampleNumber:(id)arg1 error:(id*)arg2 ;
-(id)getExampleNumberForType:(id)arg1 type:(int)arg2 error:(id*)arg3 ;
-(id)getExampleNumberForNonGeoEntity:(unsigned long)arg1 error:(id*)arg2 ;
-(id)getRegionCodesForCountryCode:(unsigned long)arg1 ;
-(char)isAlphaNumber:(id)arg1 ;
-(int)isPossibleNumberWithReason:(id)arg1 error:(id*)arg2 ;
-(char)isPossibleNumberString:(id)arg1 regionDialingFrom:(id)arg2 error:(id*)arg3 ;
-(char)truncateTooLongNumber:(id)arg1 error:(id*)arg2 ;
-(unsigned long)maybeExtractCountryCode:(id)arg1 metadata:(id)arg2 nationalNumber:(id*)arg3 keepRawInput:(char)arg4 phoneNumber:(id*)arg5 error:(id*)arg6 ;
-(int)maybeStripInternationalPrefixAndNormalize:(id*)arg1 possibleIddPrefix:(id)arg2 error:(id*)arg3 ;
-(char)maybeStripNationalPrefixAndCarrierCode:(id*)arg1 metadata:(id)arg2 carrierCode:(id*)arg3 error:(id*)arg4 ;
-(id)parse:(id)arg1 defaultRegion:(id)arg2 error:(id*)arg3 ;
-(id)parseWithPhoneCarrierRegion:(id)arg1 error:(id*)arg2 ;
-(id)parseHelper:(id)arg1 defaultRegion:(id)arg2 keepRawInput:(char)arg3 checkRegion:(char)arg4 error:(id*)arg5 ;
-(int)isNumberMatch:(id)arg1 second:(id)arg2 error:(id*)arg3 ;
-(char)canBeInternationallyDialled:(id)arg1 error:(id*)arg2 ;
-(id)getAllMetadata;
-(id)parseAndKeepRawInput:(id)arg1 defaultRegion:(id)arg2 error:(id*)arg3 ;
-(char)isValidNumber:(id)arg1 ;
-(char)isPossibleNumber:(id)arg1 error:(id*)arg2 ;
-(id)normalizeDigitsOnly:(id)arg1 ;
-(id)format:(id)arg1 numberFormat:(int)arg2 error:(id*)arg3 ;
-(id)getRegionCodeForNumber:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(id)regularExpressionWithPattern:(id)arg1 options:(unsigned)arg2 error:(id*)arg3 ;
-(id)loadMetadata:(id)arg1 ;
@end

