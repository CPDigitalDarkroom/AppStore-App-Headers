/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 2:22:48 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/B4BDDC65-4400-4BC5-A974-2245FB5B0846/MessengerCompressed-iphoneos-arm64,iphoneos-armv7.app/MessengerCompressed-iphoneos-arm64,iphoneos-armv7
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/MessengerCompressed-iphoneos-arm64,iphoneos-armv7-Structs.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/ASImageCacheProtocol.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/ASImageDownloaderProtocol.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/CKNetworkImageDownloading.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/FBImageDownloadLogger.h>
#import <MessengerCompressed-iphoneos-arm64,iphoneos-armv7/FBInvalidating.h>

@protocol FBImageDownloaderCacheInternal;
@class FBImageDownloaderRequestManager, FBCachedImageFactory, NSString;

@interface FBImageDownloader : NSObject <ASImageCacheProtocol, ASImageDownloaderProtocol, CKNetworkImageDownloading, FBImageDownloadLogger, FBInvalidating> {

	char _invalidated;
	id<FBImageDownloaderCacheInternal> _imageCache;
	int _networkFetches;
	FBImageDownloaderRequestManager* _requestManager;
	FBCachedImageFactory* _cachedImageFactory;
	unsigned _inMemoryCacheLimit;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic) unsigned inMemoryCacheLimit;              //@synthesize inMemoryCacheLimit=_inMemoryCacheLimit - In the implementation block
@property (getter=isValid,nonatomic,readonly) char valid; 
+(id)loggedOutImageDownloader;
-(id)downloadImageWithURL:(id)arg1 scenePath:(id)arg2 priority:(int)arg3 callPath:(id)arg4 options:(unsigned)arg5 queue:(id)arg6 downloadProgressBlock:(/*^block*/id)arg7 completionBlock:(/*^block*/id)arg8 ;
-(void)cancelImageDownload:(id)arg1 ;
-(id)downloadImageWithURL:(id)arg1 callPath:(id)arg2 queue:(id)arg3 completionBlock:(/*^block*/id)arg4 ;
-(id)fetchFirstCachedImageInURLs:(id)arg1 callPath:(id)arg2 options:(unsigned)arg3 queue:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)updateScenePath:(id)arg1 andPriority:(int)arg2 forImageDownload:(id)arg3 ;
-(id)accessCachedImageOnDiskWithURL:(id)arg1 options:(unsigned)arg2 queue:(id)arg3 completionBlock:(/*^block*/id)arg4 ;
-(id)downloadImageWithURL:(id)arg1 scenePath:(id)arg2 caller:(id)arg3 callbackQueue:(id)arg4 downloadProgressBlock:(/*^block*/id)arg5 completion:(/*^block*/id)arg6 ;
-(void)cancelImageDownloadForIdentifier:(id)arg1 ;
-(void)fetchCachedImageWithURL:(id)arg1 callbackQueue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(id)downloadImageWithURL:(id)arg1 callbackQueue:(id)arg2 downloadProgressBlock:(/*^block*/id)arg3 completion:(/*^block*/id)arg4 ;
-(void)logFinishWithType:(unsigned)arg1 ;
-(void)clearAllImageCache:(/*^block*/id)arg1 ;
-(id)initWithNetworker:(id)arg1 imageCache:(id)arg2 cachedImageFactory:(id)arg3 configuration:(id)arg4 scenePathAnnouncer:(id)arg5 ;
-(unsigned)inMemoryCacheLimit;
-(void)_fetchBetterMemoryHits:(id)arg1 currentBestImage:(id)arg2 URL:(id)arg3 cacheFetch:(id)arg4 ;
-(void)_fetchBetterDiskHits:(id)arg1 currentBestImage:(id)arg2 URL:(id)arg3 cacheFetch:(id)arg4 ;
-(id)initWithNetworker:(id)arg1 diskCache:(id)arg2 cachedImageFactory:(id)arg3 configuration:(id)arg4 scenePathAnnouncer:(id)arg5 ;
-(void)resetStats;
-(void)setInMemoryCacheLimit:(unsigned)arg1 ;
-(id)init;
-(void)invalidate;
-(char)isValid;
-(SCD_Struct_FB284)stats;
@end

