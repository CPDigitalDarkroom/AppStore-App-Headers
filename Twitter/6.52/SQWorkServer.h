/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 9:31:58 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/8A9DE0F0-8C0D-4043-A8B5-545C839396E1/Twitter.app/Twitter
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Twitter/SQQueueDelegate.h>

@class NSCache, NSMutableDictionary, SQWeakMutableDictionary, SQQueue, NSString;

@interface SQWorkServer : NSObject <SQQueueDelegate> {

	NSCache* _cache;
	NSMutableDictionary* _callbacks;
	NSMutableDictionary* _executing;
	NSMutableDictionary* _should_execute;
	NSMutableDictionary* _id_hash;
	SQWeakMutableDictionary* _weak_cache;
	SQQueue* _queue;
	int _instaReject;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)getAsyncData:(id)arg1 cachePolicy:(int)arg2 context:(id)arg3 withImmediateCompletionHandler:(/*^block*/id)arg4 eventualCompletionHandler:(/*^block*/id)arg5 errorHandler:(/*^block*/id)arg6 shouldExecute:(/*^block*/id)arg7 getCacheHandler:(/*^block*/id)arg8 setCacheHandler:(/*^block*/id)arg9 getDataHandler:(/*^block*/id)arg10 ;
-(id)getCache:(id)arg1 context:(id)arg2 cacheHandler:(/*^block*/id)arg3 ;
-(void)addShouldExecuteForCacheKey:(id)arg1 shouldEventuallyBlock:(/*^block*/id)arg2 ;
-(char)shouldExecuteGetDataWithEventual:(/*^block*/id)arg1 error:(/*^block*/id)arg2 context:(id)arg3 forKey:(id)arg4 ;
-(void)notifyCallbacks:(id)arg1 error:(id)arg2 cacheKey:(id)arg3 ;
-(void)cleanupRequest:(id)arg1 ;
-(id)shouldExecutesForCacheKey:(id)arg1 ;
-(id)cacheObjectForKey:(id)arg1 ;
-(void)setCacheObject:(id)arg1 forKey:(id)arg2 ;
-(void)rejected:(int)arg1 ;
-(void)getData:(id)arg1 cachePolicy:(int)arg2 shouldCache:(char)arg3 context:(id)arg4 withImmediateCompletionHandler:(/*^block*/id)arg5 eventualCompletionHandler:(/*^block*/id)arg6 errorHandler:(/*^block*/id)arg7 shouldExecute:(/*^block*/id)arg8 getCacheHandler:(/*^block*/id)arg9 setCacheHandler:(/*^block*/id)arg10 getDataHandler:(/*^block*/id)arg11 ;
-(void)getAsyncData:(id)arg1 workClient:(id)arg2 cachePolicy:(int)arg3 getCacheHandler:(/*^block*/id)arg4 setCacheHandler:(/*^block*/id)arg5 getDataHandler:(/*^block*/id)arg6 ;
-(/*^block*/id)defaultCacheHandler;
-(/*^block*/id)defaultCacheSetter;
-(id)queue;
-(id)initWithQueue:(id)arg1 ;
-(void)clearCache;
-(void)clearCache:(id)arg1 ;
@end

