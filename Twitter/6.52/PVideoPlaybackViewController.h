/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 9:31:58 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/8A9DE0F0-8C0D-4043-A8B5-545C839396E1/Twitter.app/Twitter
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Twitter/Twitter-Structs.h>
#import <Twitter/PViewController.h>

@protocol PVideoPlaybackViewControllerDelegate;
@class UIView, NSDate, UIImage, AVPlayerLayer, NSURL, NSDictionary, AVPlayer, AVPlayerItem, NSTimer;

@interface PVideoPlaybackViewController : PViewController {

	PVideoPlaybackViewController* _weakSelf;
	UIView* _initialBackgroundView;
	NSDate* _pausedAt;
	NSDate* _timeAtNTP;
	double _clockNTP;
	double _videoAspect;
	int _stalls;
	int _playerItemStatus;
	double _videoPositionToRecoverTo;
	long long _avPlayerFailedBackOffInterval;
	char _isPlaying;
	char _observingPlayerItem;
	char _observingPlayer;
	char _broadcastEnded;
	char _isNewAVPlayer;
	char _isInPlayState;
	char _isStalled;
	char _hasUsedDefaultAVPlayer;
	char _shouldManuallyControlAVAudioSessionActiveState;
	UIImage* _previewThumbnail;
	AVPlayerLayer* _defaultPlayerLayer;
	char _playerIsPlayingLiveHLS;
	char _shouldAutoPlay;
	char _endPending;
	id<PVideoPlaybackViewControllerDelegate> _delegate;
	NSURL* _contentURL;
	NSDictionary* _metadata;
	AVPlayer* _defaultAVPlayer;
	AVPlayer* _avPlayer;
	AVPlayerItem* _avPlayerItem;
	NSTimer* _screenshotTimer;
	NSTimer* _rebuildStackTimer;
	NSTimer* _stallWatchingTimer;
	double _rotation;
	CGSize _displaySize;
	double _duration;

}

@property (assign,nonatomic,__weak) id<PVideoPlaybackViewControllerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,retain) NSURL * contentURL;                                                    //@synthesize contentURL=_contentURL - In the implementation block
@property (readonly) NSDictionary * metadata;                                                       //@synthesize metadata=_metadata - In the implementation block
@property (nonatomic,readonly) AVPlayer * defaultAVPlayer;                                          //@synthesize defaultAVPlayer=_defaultAVPlayer - In the implementation block
@property (nonatomic,readonly) AVPlayerLayer * defaultPlayerLayer;                                  //@synthesize defaultPlayerLayer=_defaultPlayerLayer - In the implementation block
@property (nonatomic,readonly) unsigned playerStatus; 
@property (assign,nonatomic) char playerIsPlayingLiveHLS;                                           //@synthesize playerIsPlayingLiveHLS=_playerIsPlayingLiveHLS - In the implementation block
@property (assign,nonatomic) char shouldAutoPlay;                                                   //@synthesize shouldAutoPlay=_shouldAutoPlay - In the implementation block
@property (assign,nonatomic) double rotation;                                                       //@synthesize rotation=_rotation - In the implementation block
@property (nonatomic,readonly) CGSize displaySize;                                                  //@synthesize displaySize=_displaySize - In the implementation block
@property (nonatomic,readonly) double duration;                                                     //@synthesize duration=_duration - In the implementation block
@property (nonatomic,readonly) double currentPlaybackTime; 
@property (nonatomic,retain) AVPlayer * avPlayer;                                                   //@synthesize avPlayer=_avPlayer - In the implementation block
@property (nonatomic,retain) AVPlayerItem * avPlayerItem;                                           //@synthesize avPlayerItem=_avPlayerItem - In the implementation block
@property (nonatomic,retain) NSTimer * screenshotTimer;                                             //@synthesize screenshotTimer=_screenshotTimer - In the implementation block
@property (nonatomic,retain) NSTimer * rebuildStackTimer;                                           //@synthesize rebuildStackTimer=_rebuildStackTimer - In the implementation block
@property (nonatomic,retain) NSTimer * stallWatchingTimer;                                          //@synthesize stallWatchingTimer=_stallWatchingTimer - In the implementation block
@property (assign) char endPending;                                                                 //@synthesize endPending=_endPending - In the implementation block
-(id)currentAVPlayer;
-(void)setDisplaySize:(CGSize)arg1 ;
-(id)playbackView;
-(AVPlayerLayer *)defaultPlayerLayer;
-(void)clearDefaultPlayerAndPlayerLayerShouldRebuild:(char)arg1 ;
-(char)_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)broadcastEnded;
-(void)setPlayerIsPlayingLiveHLS:(char)arg1 ;
-(void)setShouldAutoPlay:(char)arg1 ;
-(id)renderTimeForNTP:(unsigned long long)arg1 ;
-(void)unobserveAVPlayerItem;
-(void)unobserveAVPlayer;
-(void)setScreenshotTimer:(NSTimer *)arg1 ;
-(void)setRebuildStackTimer:(NSTimer *)arg1 ;
-(void)setStallWatchingTimer:(NSTimer *)arg1 ;
-(void)onRateChange;
-(void)_setPlayerItemStatus:(int)arg1 ;
-(void)onDurationChange;
-(void)playerMetaDataReceived;
-(void)onSizeChange;
-(void)onPlaybackLikelyToKeepUpChange;
-(void)playbackBufferEmptyDidChange;
-(void)onNewStall;
-(void)didDetermineReplayComplete;
-(void)failedToPlayToEnd;
-(void)figureOutAspectAndRotationShouldAnimate:(char)arg1 ;
-(void)_setupVideoStack;
-(void)_addPlayerToViewHierarchy;
-(void)determineThumbnailCaptureState;
-(void)startScreenshotTimer;
-(void)startRebuildTimer;
-(void)observeAVPlayerItem;
-(void)observeAVPlayer;
-(void)executePlayerItemState;
-(void)_setMetaData:(id)arg1 ;
-(void)seekToTime:(double)arg1 completion:(/*^block*/id)arg2 ;
-(void)startStallWatchingTimer;
-(char)endPending;
-(void)captureScreenshot;
-(void)setEndPending:(char)arg1 ;
-(id)initWithInitialBackgroundView:(id)arg1 defaultRotation:(double)arg2 defaultAVPlayer:(id)arg3 defaultPlayerLayer:(id)arg4 previewThumbnail:(id)arg5 shouldManuallyControlAVAudioSessionActiveState:(char)arg6 ;
-(unsigned long long)ntpForCurrentFrame;
-(id)getStatistics;
-(id)currentAVPlayerLayer;
-(void)setInitialThumbnail:(id)arg1 ;
-(void)onBufferEmpty;
-(void)broadcastEndPending;
-(AVPlayer *)defaultAVPlayer;
-(char)playerIsPlayingLiveHLS;
-(char)shouldAutoPlay;
-(NSTimer *)screenshotTimer;
-(NSTimer *)rebuildStackTimer;
-(NSTimer *)stallWatchingTimer;
-(void)setContentURL:(NSURL *)arg1 ;
-(NSURL *)contentURL;
-(AVPlayer *)avPlayer;
-(char)play;
-(double)currentPlaybackTime;
-(void)setAvPlayer:(AVPlayer *)arg1 ;
-(void)setDelegate:(id<PVideoPlaybackViewControllerDelegate>)arg1 ;
-(void)dealloc;
-(id<PVideoPlaybackViewControllerDelegate>)delegate;
-(double)duration;
-(void)setDuration:(double)arg1 ;
-(void)loadView;
-(id)initWithNibName:(id)arg1 bundle:(id)arg2 ;
-(void)viewWillTransitionToSize:(CGSize)arg1 withTransitionCoordinator:(id)arg2 ;
-(void)viewDidLoad;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setRotation:(double)arg1 ;
-(double)rotation;
-(void)pause;
-(AVPlayerItem *)avPlayerItem;
-(void)setAvPlayerItem:(AVPlayerItem *)arg1 ;
-(NSDictionary *)metadata;
-(CGSize)displaySize;
-(unsigned)playerStatus;
-(char)canPlay;
@end

