/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:33 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Spotify/SPTOfflineModeStateObserver.h>
#import <Spotify/SPTCommunicationsController.h>

@protocol OS_dispatch_group, SPTLogCenterProtocol, SPTOfflineModeState;
@class NSString, NSURL, NSOperationQueue, NSObject, SPWebTokenRequest, NSMapTable;

@interface SPTCommunicationsControllerImplementation : NSObject <SPTOfflineModeStateObserver, SPTCommunicationsController> {

	NSString* _loggingEventSource;
	NSURL* _baseURL;
	NSOperationQueue* _requestsQueue;
	NSObject*<OS_dispatch_group> _requestsDispatchGroup;
	id<SPTLogCenterProtocol> _logCenter;
	id<SPTOfflineModeState> _offlineNotifier;
	NSString* _webAccessToken;
	SPWebTokenRequest* _webAccessTokenRequest;
	NSMapTable* _errorObservers;

}

@property (nonatomic,readonly) NSURL * baseURL;                                                 //@synthesize baseURL=_baseURL - In the implementation block
@property (nonatomic,readonly) NSOperationQueue * requestsQueue;                                //@synthesize requestsQueue=_requestsQueue - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_group> requestsDispatchGroup;              //@synthesize requestsDispatchGroup=_requestsDispatchGroup - In the implementation block
@property (nonatomic,retain) id<SPTLogCenterProtocol> logCenter;                                //@synthesize logCenter=_logCenter - In the implementation block
@property (nonatomic,retain) id<SPTOfflineModeState> offlineNotifier;                           //@synthesize offlineNotifier=_offlineNotifier - In the implementation block
@property (nonatomic,copy) NSString * webAccessToken;                                           //@synthesize webAccessToken=_webAccessToken - In the implementation block
@property (nonatomic,readonly) char hasWebAccessToken; 
@property (nonatomic,retain) SPWebTokenRequest * webAccessTokenRequest;                         //@synthesize webAccessTokenRequest=_webAccessTokenRequest - In the implementation block
@property (nonatomic,readonly) NSMapTable * errorObservers;                                     //@synthesize errorObservers=_errorObservers - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,copy) NSString * loggingEventSource;                                       //@synthesize loggingEventSource=_loggingEventSource - In the implementation block
+(id)canonicalLanguageIdentifierToMarketMap;
-(id<SPTLogCenterProtocol>)logCenter;
-(id<SPTOfflineModeState>)offlineNotifier;
-(void)setLogCenter:(id<SPTLogCenterProtocol>)arg1 ;
-(void)offlineModeState:(id)arg1 updated:(char)arg2 ;
-(SPWebTokenRequest *)webAccessTokenRequest;
-(void)setWebAccessTokenRequest:(SPWebTokenRequest *)arg1 ;
-(void)handleWebAccessTokenResponse:(id)arg1 ;
-(void)setWebAccessToken:(NSString *)arg1 ;
-(char)hasWebAccessToken;
-(NSString *)webAccessToken;
-(void)setOfflineNotifier:(id<SPTOfflineModeState>)arg1 ;
-(id)marketFromLocaleIdentifier:(id)arg1 ;
-(void)abortRequestWebAccessToken;
-(void)enqueueRequestForMethod:(id)arg1 parameters:(id)arg2 type:(int)arg3 completionQueue:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)logEventName:(id)arg1 settingName:(id)arg2 stringValue:(id)arg3 type:(int)arg4 ;
-(void)setCommunicationValue:(char)arg1 forSettingName:(id)arg2 fequency:(int)arg3 type:(int)arg4 completionQueue:(id)arg5 completionBlock:(/*^block*/id)arg6 ;
-(void)requestWebAccessToken;
-(NSOperationQueue *)requestsQueue;
-(void)performRequestForMethod:(id)arg1 parameters:(id)arg2 type:(int)arg3 completionQueue:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)notifyErrorObserversAboutOfflineError;
-(id)paramterTypeStringForType:(int)arg1 ;
-(void)updateRequestQueueSuspensionState;
-(id)loggableDataForError:(id)arg1 ;
-(NSString *)loggingEventSource;
-(id)URLRequestForMethod:(id)arg1 parameters:(id)arg2 ;
-(void)performURLRequest:(id)arg1 withURLConnectionDelegate:(id)arg2 ;
-(id)parametersStringForParameters:(id)arg1 ;
-(void)notifyErrorObserversAboutError:(id)arg1 ;
-(NSMapTable *)errorObservers;
-(void)dispatchBlock:(/*^block*/id)arg1 on:(id)arg2 ;
-(void)handleCurrentLoginModeChange;
-(void)setLoggingEventSource:(NSString *)arg1 ;
-(id)initWithOfflineNotifier:(id)arg1 logCenter:(id)arg2 ;
-(NSObject*<OS_dispatch_group>)requestsDispatchGroup;
-(void)addErrorObserver:(id)arg1 on:(id)arg2 ;
-(void)removeErrorObserver:(id)arg1 ;
-(void)communicationSettingsForType:(int)arg1 completionQueue:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)setCommunicationValue:(char)arg1 forSetting:(id)arg2 fequency:(int)arg3 completionQueue:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)dealloc;
-(NSURL *)baseURL;
@end

