/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:52 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Spotify/Spotify-Structs.h>
#import <Spotify/SPOfflineStateProtocol.h>
#import <Spotify/SPPlaylistContainerItem.h>

@class SPPlaylistOfflineSyncStatus, NSString, NSURL, NSDictionary, NSArray;

@interface SPPlaylist : NSObject <SPOfflineStateProtocol, SPPlaylistContainerItem> {

	RefPtr<spotify::playlist::Playlist>* _cppObject;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) char isAvailableOffline; 
@property (assign,nonatomic) char makeAvailableOffline; 
@property (nonatomic,readonly) int offlineState; 
@property (nonatomic,readonly) float offlineProgress; 
@property (nonatomic,readonly) SPPlaylistOfflineSyncStatus * offlineSyncStatus; 
@property (nonatomic,readonly) char isSpecial; 
@property (assign,getter=isPublished,nonatomic) char published; 
@property (nonatomic,copy) NSString * name; 
@property (nonatomic,readonly) NSURL * link; 
@property (nonatomic,readonly) NSString * ownerCanonicalUsername; 
@property (nonatomic,copy) NSString * freeformDescription; 
@property (nonatomic,copy) NSString * imageIdent; 
@property (nonatomic,readonly) NSURL * URL; 
@property (nonatomic,readonly) NSURL * mosaicURL; 
@property (assign,nonatomic) char collaborative; 
@property (nonatomic,readonly) char isOwnedBySelf; 
@property (nonatomic,readonly) char isLoading; 
@property (nonatomic,readonly) unsigned synchronizationState; 
@property (nonatomic,readonly) char isWriteable; 
@property (nonatomic,readonly) char isSeparator; 
@property (nonatomic,readonly) char isStarred; 
@property (nonatomic,readonly) char isToplist; 
@property (nonatomic,readonly) char isInbox; 
@property (nonatomic,readonly) char isLocalFiles; 
@property (nonatomic,readonly) char isSubscribable; 
@property (nonatomic,readonly) NSString * formatListType; 
@property (nonatomic,readonly) NSDictionary * formatListAttributes; 
@property (nonatomic,readonly) NSArray * formatListItemAttributes; 
@property (getter=isMigratedStarred,nonatomic,readonly) char migratedStarred; 
@property (nonatomic,readonly) unsigned nodeType; 
+(id)keyPathsForValuesAffectingSpecialName;
+(id)playlistWithPlaylist:(Playlist*)arg1 ;
+(id)KVOCompliantKeyPaths;
+(void)load;
+(id)playlist;
-(char)isStarred;
-(char)isInbox;
-(char)isLocalFiles;
-(char)isToplist;
-(id)specialName;
-(int)offlineState;
-(NSString *)freeformDescription;
-(id)imageLink;
-(unsigned)countOfTracks;
-(void)addTrackURLs:(id)arg1 ;
-(char)isOwnedBySelf;
-(NSString *)ownerCanonicalUsername;
-(char)isAvailableOffline;
-(SPPlaylistOfflineSyncStatus *)offlineSyncStatus;
-(id)objectInTracksAtIndex:(unsigned)arg1 ;
-(NSString *)formatListType;
-(NSArray *)formatListItemAttributes;
-(NSURL *)mosaicURL;
-(unsigned)synchronizationState;
-(char)isMigratedStarred;
-(id)userThatAddedTrackAtIndex:(unsigned)arg1 ;
-(void)setCollaborative:(char)arg1 ;
-(id)mutableTracks;
-(char)collaborative;
-(char)isWriteable;
-(float)offlineProgress;
-(char)makeAvailableOffline;
-(void)setMakeAvailableOffline:(char)arg1 ;
-(char)isSpecial;
-(int)countOfTracksLocallyPlayable;
-(int)countOfAvailableTracksIncludingLocal:(char)arg1 ;
-(NSString *)imageIdent;
-(id)formatListItemAttributesForTrackAtIndex:(unsigned)arg1 ;
-(void)removeCallbacks;
-(int)observedChangeSource;
-(id)observedAttributeChangeKey;
-(id)trackURLSet;
-(void)setFreeformDescription:(NSString *)arg1 ;
-(void)setImageIdent:(NSString *)arg1 ;
-(char)isSeparator;
-(char)isSubscribable;
-(NSDictionary *)formatListAttributes;
-(void)insertObject:(id)arg1 inTracksAtIndex:(unsigned)arg2 ;
-(void)removeObjectFromTracksAtIndex:(unsigned)arg1 ;
-(id)dateAddedForTrackAtIndex:(unsigned)arg1 ;
-(void)setTrackCreationTimeWithInternalSource:(id)arg1 userThatAddedTrack:(id)arg2 forTrackAtIndex:(unsigned)arg3 ;
-(id)messageForTrackAtIndex:(unsigned)arg1 ;
-(void)setMessage:(id)arg1 forTrackAtIndex:(unsigned)arg2 ;
-(char)trackIsSeenAtIndex:(unsigned)arg1 ;
-(void)setTrackIsSeen:(char)arg1 atIndex:(unsigned)arg2 ;
-(id)attributeForKey:(id)arg1 atIndex:(unsigned)arg2 ;
-(void)setValue:(id)arg1 forAttribute:(id)arg2 atIndex:(unsigned)arg3 ;
-(id)attributeKeysAtIndex:(unsigned)arg1 ;
-(void)setObservedChangeSource:(int)arg1 ;
-(void)setObservedAttributeChangeKey:(id)arg1 ;
-(id)trackURLsByRemovingDuplicatesFromTrackURLs:(id)arg1 ;
-(void)addCallbacks;
-(char)isPublished;
-(void)setPublished:(char)arg1 ;
-(id)mutableArrayValueForKey:(id)arg1 ;
-(void)dealloc;
-(NSString *)description;
-(void)setName:(NSString *)arg1 ;
-(NSString *)name;
-(NSURL *)URL;
-(void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned)arg3 context:(void*)arg4 ;
-(char)isLoading;
-(void)removeObserver:(id)arg1 forKeyPath:(id)arg2 ;
-(unsigned)nodeType;
-(NSURL *)link;
-(Playlist*)playlist;
@end

