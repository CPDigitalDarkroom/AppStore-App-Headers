/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:39 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/AVAudioPlayerDelegate.h>
#import <Spotify/SPTNowPlayingRemoteControlPolicyUpdateOserver.h>

@protocol SPTNowPlayingRemoteControlPolicy, SPTAudioSessionController;
@class NSTimer, AVAudioPlayer, SPTNowPlayingModel, NSMapTable, MPRemoteCommandCenter, NSString;

@interface SPTNowPlayingRemoteControlEventController : NSObject <AVAudioPlayerDelegate, SPTNowPlayingRemoteControlPolicyUpdateOserver> {

	NSTimer* _seekTimer;
	AVAudioPlayer* play;
	AVAudioPlayer* pause;
	AVAudioPlayer* next;
	AVAudioPlayer* prev;
	AVAudioPlayer* toBeginning;
	AVAudioPlayer* fastprev_start;
	AVAudioPlayer* fastprev_end;
	AVAudioPlayer* ffwd_start;
	AVAudioPlayer* ffwd_end;
	AVAudioPlayer* failed;
	char _enabled;
	char _disableSecondaryRemoteControlControls;
	id<SPTNowPlayingRemoteControlPolicy> _remoteControlPolicy;
	id<SPTAudioSessionController> _audioSessionController;
	SPTNowPlayingModel* _nowPlayingModel;
	NSMapTable* _audioSessionActivators;
	MPRemoteCommandCenter* _remoteCommandCenter;

}

@property (assign,getter=isEnabled,nonatomic) char enabled;                                         //@synthesize enabled=_enabled - In the implementation block
@property (nonatomic,retain) id<SPTNowPlayingRemoteControlPolicy> remoteControlPolicy;              //@synthesize remoteControlPolicy=_remoteControlPolicy - In the implementation block
@property (assign,nonatomic) char disableSecondaryRemoteControlControls;                            //@synthesize disableSecondaryRemoteControlControls=_disableSecondaryRemoteControlControls - In the implementation block
@property (nonatomic,retain) id<SPTAudioSessionController> audioSessionController;                  //@synthesize audioSessionController=_audioSessionController - In the implementation block
@property (nonatomic,retain) SPTNowPlayingModel * nowPlayingModel;                                  //@synthesize nowPlayingModel=_nowPlayingModel - In the implementation block
@property (nonatomic,retain) NSMapTable * audioSessionActivators;                                   //@synthesize audioSessionActivators=_audioSessionActivators - In the implementation block
@property (nonatomic,retain) MPRemoteCommandCenter * remoteCommandCenter;                           //@synthesize remoteCommandCenter=_remoteCommandCenter - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)initialize;
-(id<SPTAudioSessionController>)audioSessionController;
-(void)setAudioSessionController:(id<SPTAudioSessionController>)arg1 ;
-(void)setDisableSecondaryRemoteControlControls:(char)arg1 ;
-(SPTNowPlayingModel *)nowPlayingModel;
-(void)setNowPlayingModel:(SPTNowPlayingModel *)arg1 ;
-(id)newPlayerNamed:(id)arg1 ;
-(void)applyRemoteControlPolicy;
-(void)playFeedbackSoundIfEnabled:(id)arg1 ;
-(void)seekBackward;
-(void)seekForward;
-(MPRemoteCommandCenter *)remoteCommandCenter;
-(id<SPTNowPlayingRemoteControlPolicy>)remoteControlPolicy;
-(char)disableSecondaryRemoteControlControls;
-(void)doNothing;
-(void)applyPolicyToCommand:(id)arg1 shouldBeAvailable:(char)arg2 shouldBeEnabled:(char)arg3 action:(SEL)arg4 ;
-(void)handleSkipBackward:(id)arg1 ;
-(void)handleSkipForward:(id)arg1 ;
-(void)likeButtonPressed;
-(void)dislikeButtonPressed;
-(NSMapTable *)audioSessionActivators;
-(void)remoteControlPolicyDidChange:(id)arg1 ;
-(id)initWithNowPlayingModel:(id)arg1 audioSessionController:(id)arg2 remoteCommandCenter:(id)arg3 ;
-(char)handleRemoteEventSubType:(int)arg1 ;
-(void)setRemoteControlPolicy:(id<SPTNowPlayingRemoteControlPolicy>)arg1 ;
-(void)setAudioSessionActivators:(NSMapTable *)arg1 ;
-(void)setRemoteCommandCenter:(MPRemoteCommandCenter *)arg1 ;
-(void)dealloc;
-(void)setEnabled:(char)arg1 ;
-(char)isEnabled;
-(void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(char)arg2 ;
-(void)audioPlayerDecodeErrorDidOccur:(id)arg1 error:(id)arg2 ;
@end

