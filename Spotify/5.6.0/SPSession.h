/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:52 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <Spotify/Spotify-Structs.h>
@class NSMapTable, SPTPlaylistBackendManager, SPTPlayerMftSequenceRules, SPTApplicationStateTracker, SPTPlayerRestorable, SPTProductState, SPTTrackContextPlayerFactory, SPTLogger, SPTLocalFileManager, SPTPlayerProxyContextPlayer, SPTSocialManager, SPTOfflineManager, AdController, SPTRouter, SPTPlayerResolverRegistration, SPCore, NSString;

@interface SPSession : NSObject {

	Session* _session;
	unique_ptr<spotify::client::ClientFeatureStack, std::__1::default_delete<spotify::client::ClientFeatureStack> >* _clientFeatureStack;
	shared_ptr<spotify::item_list::TrackListFactory>* _trackListFactory;
	NSMapTable* _observers;
	scoped_connection* _on_sync_error_connection;
	scoped_connection* _incognito_mode_handler_connection;
	scoped_connection* _offline_error_connection;
	unique_ptr<spotify::social::objc::SocialEventListener, std::__1::default_delete<spotify::social::objc::SocialEventListener> >* _social_event_listener;
	char _incognitoModeEnabled;
	char _isOnline;
	char _isOffline;
	char _isLoggedIn;
	SPTPlaylistBackendManager* _playlistBackendManager;
	SPTPlayerMftSequenceRules* _mftSequenceRules;
	SPTApplicationStateTracker* _applicationStateTracker;
	SPTPlayerRestorable* _restorable;
	SPTProductState* _productState;
	SPTTrackContextPlayerFactory* _trackContextPlayerFactory;
	SPTLogger* _logger;
	SPTLocalFileManager* _localFileManager;
	SPTPlayerProxyContextPlayer* _proxyContextPlayer;
	SPTSocialManager* _socialManager;
	SPTOfflineManager* _offlineManager;
	int _currentLoginMode;
	AdController* _adController;
	SPTRouter* _cosmosRouter;
	SPTPlayerResolverRegistration* _playerResolverRegistration;
	SPCore* _core;
	NSString* _clientVersionString;

}

@property (getter=isIncognitoModeEnabled,nonatomic,readonly) char incognitoModeEnabled;               //@synthesize incognitoModeEnabled=_incognitoModeEnabled - In the implementation block
@property (nonatomic,retain) SPTPlaylistBackendManager * playlistBackendManager;                      //@synthesize playlistBackendManager=_playlistBackendManager - In the implementation block
@property (nonatomic,retain) SPTPlayerMftSequenceRules * mftSequenceRules;                            //@synthesize mftSequenceRules=_mftSequenceRules - In the implementation block
@property (nonatomic,retain) SPTApplicationStateTracker * applicationStateTracker;                    //@synthesize applicationStateTracker=_applicationStateTracker - In the implementation block
@property (nonatomic,retain) SPTPlayerRestorable * restorable;                                        //@synthesize restorable=_restorable - In the implementation block
@property (nonatomic,retain) SPTProductState * productState;                                          //@synthesize productState=_productState - In the implementation block
@property (nonatomic,retain) SPTTrackContextPlayerFactory * trackContextPlayerFactory;                //@synthesize trackContextPlayerFactory=_trackContextPlayerFactory - In the implementation block
@property (nonatomic,retain) SPTLogger * logger;                                                      //@synthesize logger=_logger - In the implementation block
@property (nonatomic,readonly) SPTLocalFileManager * localFileManager;                                //@synthesize localFileManager=_localFileManager - In the implementation block
@property (nonatomic,retain) SPTPlayerProxyContextPlayer * proxyContextPlayer;                        //@synthesize proxyContextPlayer=_proxyContextPlayer - In the implementation block
@property (assign,nonatomic) char isOnline;                                                           //@synthesize isOnline=_isOnline - In the implementation block
@property (assign,nonatomic) char isOffline;                                                          //@synthesize isOffline=_isOffline - In the implementation block
@property (assign,nonatomic) char isLoggedIn;                                                         //@synthesize isLoggedIn=_isLoggedIn - In the implementation block
@property (nonatomic,readonly) NSString * currentAP; 
@property (nonatomic,readonly) double serverTime; 
@property (nonatomic,retain) SPTSocialManager * socialManager;                                        //@synthesize socialManager=_socialManager - In the implementation block
@property (nonatomic,retain) SPTOfflineManager * offlineManager;                                      //@synthesize offlineManager=_offlineManager - In the implementation block
@property (nonatomic,readonly) double incognitoModeTimeout; 
@property (nonatomic,readonly) NSString * currentUsername; 
@property (assign,nonatomic) int currentLoginMode;                                                    //@synthesize currentLoginMode=_currentLoginMode - In the implementation block
@property (nonatomic,readonly) AdController * adController;                                           //@synthesize adController=_adController - In the implementation block
@property (nonatomic,retain) SPTRouter * cosmosRouter;                                                //@synthesize cosmosRouter=_cosmosRouter - In the implementation block
@property (nonatomic,retain) SPTPlayerResolverRegistration * playerResolverRegistration;              //@synthesize playerResolverRegistration=_playerResolverRegistration - In the implementation block
@property (assign,nonatomic,__weak) SPCore * core;                                                    //@synthesize core=_core - In the implementation block
@property (assign,nonatomic) NSString * clientVersionString;                                          //@synthesize clientVersionString=_clientVersionString - In the implementation block
-(SPTProductState *)productState;
-(SPCore *)core;
-(void)addObserver:(id)arg1 onQueue:(id)arg2 ;
-(void)toggleLastFMWithUsername:(id)arg1 passwordHash:(id)arg2 useLastFM:(char)arg3 ;
-(void)removeObserver:(id)arg1 onQueue:(id)arg2 ;
-(SPTApplicationStateTracker *)applicationStateTracker;
-(char)isIncognitoModeEnabled;
-(void)setCore:(SPCore *)arg1 ;
-(void)setProductState:(SPTProductState *)arg1 ;
-(void)tryReconnect:(char)arg1 toAp:(id)arg2 ;
-(char)isLoggedIn;
-(NSString *)currentUsername;
-(NSString *)currentAP;
-(void)prepareForShutdown;
-(id)inbox;
-(AdController *)adController;
-(id)playlistForLink:(id)arg1 withAutolink:(char)arg2 ;
-(id)treeContainer;
-(SPTOfflineManager *)offlineManager;
-(void)setOfflineManager:(SPTOfflineManager *)arg1 ;
-(SPTLocalFileManager *)localFileManager;
-(id)starredForUser:(id)arg1 ;
-(SPTPlaylistBackendManager *)playlistBackendManager;
-(id)userWithUsername:(id)arg1 ;
-(SPTSocialManager *)socialManager;
-(void)setSocialManager:(SPTSocialManager *)arg1 ;
-(void)setPlaylistBackendManager:(SPTPlaylistBackendManager *)arg1 ;
-(void)unacceptedLicencesWithCallback:(/*^block*/id)arg1 ;
-(void)acceptLicenses:(id)arg1 ;
-(double)serverTime;
-(id)flatContainer;
-(SPTPlayerRestorable *)restorable;
-(SPTPlayerMftSequenceRules *)mftSequenceRules;
-(SPTRouter *)cosmosRouter;
-(SPTPlayerProxyContextPlayer *)proxyContextPlayer;
-(SPTTrackContextPlayerFactory *)trackContextPlayerFactory;
-(id)localFiles;
-(void)setAudioVolume:(float)arg1 systemInitiated:(BOOL)arg2 ;
-(void)setCosmosRouter:(SPTRouter *)arg1 ;
-(double)incognitoModeTimeout;
-(void)enableIncognitoMode;
-(void)disableIncognitoMode;
-(id)trackForLink:(id)arg1 ;
-(int)streamingRules;
-(void)processEvent:(id)arg1 ;
-(const ClientFeatureStack*)clientFeatureStack;
-(Session*)cpp;
-(id)initWithCore:(id)arg1 coreCreateOptions:(id)arg2 session:(Session*)arg3 audioDriverController:(id)arg4 clientVersionString:(id)arg5 acceptLanguages:(/*^block*/id)arg6 ;
-(void)loginModeChanged;
-(shared_ptr<spotify::lookup::CoreLookups>*)cppCoreLookups;
-(SPTPlayerResolverRegistration *)playerResolverRegistration;
-(void)setIsOnline:(char)arg1 ;
-(void)setIsLoggedIn:(char)arg1 ;
-(id)unacceptedLicences;
-(void)processAutoUpdateEvent:(id)arg1 ;
-(void)processProductStateEvent:(id)arg1 ;
-(void)processTemporaryConnectionError:(id)arg1 ;
-(void)processLoginModeChangedEvent:(id)arg1 ;
-(NSString *)clientVersionString;
-(id)localTracksMatching:(id)arg1 ;
-(void)scrobblingError;
-(void)processIncognitoModeEvent:(char)arg1 timeout:(char)arg2 ;
-(void)processOfflineSyncFailed:(const error_code*)arg1 ;
-(void)processSocialEvent:(int)arg1 error:(int)arg2 description:(id)arg3 ;
-(void)onErrorNotEnoughSpaceOnDevice;
-(TrackListFactory*)trackListFactory;
-(void)setMftSequenceRules:(SPTPlayerMftSequenceRules *)arg1 ;
-(void)setApplicationStateTracker:(SPTApplicationStateTracker *)arg1 ;
-(void)setRestorable:(SPTPlayerRestorable *)arg1 ;
-(void)setTrackContextPlayerFactory:(SPTTrackContextPlayerFactory *)arg1 ;
-(void)setProxyContextPlayer:(SPTPlayerProxyContextPlayer *)arg1 ;
-(int)currentLoginMode;
-(void)setCurrentLoginMode:(int)arg1 ;
-(void)setPlayerResolverRegistration:(SPTPlayerResolverRegistration *)arg1 ;
-(void)setClientVersionString:(NSString *)arg1 ;
-(SPTLogger *)logger;
-(void)setLogger:(SPTLogger *)arg1 ;
-(char)isOnline;
-(void)dealloc;
-(void)invalidate;
-(void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned)arg3 context:(void*)arg4 ;
-(void)flushCaches;
-(id)currentUser;
-(void)logout;
-(void)setIsOffline:(char)arg1 ;
-(void)enumerateObserversWithBlock:(/*^block*/id)arg1 ;
-(void)printError:(id)arg1 ;
-(char)isOffline;
@end

