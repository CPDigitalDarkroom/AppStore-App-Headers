/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:32 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Spotify/SPTPlayerObserver.h>
#import <Spotify/SPTOfflineObserver.h>
#import <Spotify/SPTCollectionOfflineObserver.h>
#import <Spotify/SPTCollectionSongItemPlaying.h>
#import <Spotify/SPTOfflineModeStateObserver.h>

@protocol SPTCollectionAlbumModelDelegate, SPTPlayer, SPTTrackContextPlayer, SPTCollectionInternal, SPTOfflineModeState, SPTCollectionCacheplayTestManager;
@class SPTrackContext, SPTCollectionContextMenuComponentFactory, SPTCollectionCurrentlyPlayingIndex, SPTAlbum, SPTCollectionAlbum, NSURL, SPTEntityCancelationToken, SPTEntityService, NSMutableArray, NSArray, NSString;

@interface SPTCollectionAlbumModel : NSObject <SPTPlayerObserver, SPTOfflineObserver, SPTCollectionOfflineObserver, SPTCollectionSongItemPlaying, SPTOfflineModeStateObserver> {

	SPTrackContext* _fullAlbumContext;
	SPTCollectionContextMenuComponentFactory* _contextMenuComponentFactory;
	SPTCollectionCurrentlyPlayingIndex* _currentlyPlayingIndex;
	char _loaded;
	id<SPTCollectionAlbumModelDelegate> _delegate;
	id<SPTPlayer> _player;
	id<SPTTrackContextPlayer> _trackContextPlayer;
	SPTAlbum* _album;
	SPTCollectionAlbum* _collectionAlbum;
	NSURL* _URL;
	id<SPTCollectionInternal> _collectionInternal;
	SPTrackContext* _collectionAlbumContext;
	SPTEntityCancelationToken* _metadataTask;
	SPTEntityService* _entityService;
	id<SPTOfflineModeState> _offlineNotifier;
	id<SPTCollectionCacheplayTestManager> _cacheplayTestManager;
	NSMutableArray* _songItems;
	NSArray* _cacheplayIndexMap;

}

@property (assign,nonatomic) char loaded;                                                                    //@synthesize loaded=_loaded - In the implementation block
@property (assign,nonatomic,__weak) id<SPTCollectionAlbumModelDelegate> delegate;                            //@synthesize delegate=_delegate - In the implementation block
@property (assign,getter=isInCollection,nonatomic) char inCollection; 
@property (nonatomic,readonly) NSURL * currentlyPlayingURL; 
@property (nonatomic,readonly) NSURL * collectionAlbumLink; 
@property (nonatomic,readonly) id<SPTCollection> collection; 
@property (assign,getter=isOffline,nonatomic) char offline; 
@property (nonatomic,readonly) NSURL * coverArtLink; 
@property (nonatomic,readonly) NSURL * artistURL; 
@property (nonatomic,readonly) NSString * albumName; 
@property (nonatomic,readonly) NSString * artistName; 
@property (getter=isSessionOffline,nonatomic,readonly) char sessionOffline; 
@property (getter=isEmpty,nonatomic,readonly) char empty; 
@property (nonatomic,retain) id<SPTPlayer> player;                                                           //@synthesize player=_player - In the implementation block
@property (nonatomic,retain) id<SPTTrackContextPlayer> trackContextPlayer;                                   //@synthesize trackContextPlayer=_trackContextPlayer - In the implementation block
@property (nonatomic,retain) SPTAlbum * album;                                                               //@synthesize album=_album - In the implementation block
@property (nonatomic,retain) SPTCollectionAlbum * collectionAlbum;                                           //@synthesize collectionAlbum=_collectionAlbum - In the implementation block
@property (nonatomic,retain) NSURL * URL;                                                                    //@synthesize URL=_URL - In the implementation block
@property (assign,nonatomic,__weak) id<SPTCollectionInternal> collectionInternal;                            //@synthesize collectionInternal=_collectionInternal - In the implementation block
@property (nonatomic,retain) SPTrackContext * collectionAlbumContext;                                        //@synthesize collectionAlbumContext=_collectionAlbumContext - In the implementation block
@property (nonatomic,retain) SPTrackContext * fullAlbumContext;                                              //@synthesize fullAlbumContext=_fullAlbumContext - In the implementation block
@property (nonatomic,retain) SPTEntityCancelationToken * metadataTask;                                       //@synthesize metadataTask=_metadataTask - In the implementation block
@property (assign,nonatomic,__weak) SPTEntityService * entityService;                                        //@synthesize entityService=_entityService - In the implementation block
@property (assign,nonatomic,__weak) id<SPTOfflineModeState> offlineNotifier;                                 //@synthesize offlineNotifier=_offlineNotifier - In the implementation block
@property (assign,nonatomic,__weak) id<SPTCollectionCacheplayTestManager> cacheplayTestManager;              //@synthesize cacheplayTestManager=_cacheplayTestManager - In the implementation block
@property (nonatomic,retain) NSMutableArray * songItems;                                                     //@synthesize songItems=_songItems - In the implementation block
@property (nonatomic,retain) NSArray * cacheplayIndexMap;                                                    //@synthesize cacheplayIndexMap=_cacheplayIndexMap - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id<SPTOfflineModeState>)offlineNotifier;
-(void)offlineModeState:(id)arg1 updated:(char)arg2 ;
-(SPTEntityService *)entityService;
-(void)player:(id)arg1 stateDidChange:(id)arg2 ;
-(NSURL *)artistURL;
-(id<SPTTrackContextPlayer>)trackContextPlayer;
-(void)setTrackContextPlayer:(id<SPTTrackContextPlayer>)arg1 ;
-(void)offlineStateChangedForEntity:(id)arg1 ;
-(void)setEntityService:(SPTEntityService *)arg1 ;
-(void)setOfflineNotifier:(id<SPTOfflineModeState>)arg1 ;
-(id)initWithCollection:(id)arg1 player:(id)arg2 trackContextPlayer:(id)arg3 contextMenuComponentFactory:(id)arg4 URL:(id)arg5 entityService:(id)arg6 offlineNotifier:(id)arg7 cacheplayTestManager:(id)arg8 ;
-(id<SPTCollectionCacheplayTestManager>)cacheplayTestManager;
-(void)setCacheplayTestManager:(id<SPTCollectionCacheplayTestManager>)arg1 ;
-(void)playCollectionSongTrackItem:(id)arg1 ;
-(char)checkPlayabilityOfCollectionSongTrackItem:(id)arg1 ;
-(void)removeKVO;
-(SPTEntityCancelationToken *)metadataTask;
-(void)setMetadataTask:(SPTEntityCancelationToken *)arg1 ;
-(void)updateSongItems;
-(void)updateCurrentlyPlayingTrack:(id)arg1 ;
-(void)addKVO;
-(char)isSessionOffline;
-(void)setSongItems:(NSMutableArray *)arg1 ;
-(NSMutableArray *)songItems;
-(void)setCacheplayIndexMap:(NSArray *)arg1 ;
-(NSArray *)cacheplayIndexMap;
-(void)offlineStateChanged;
-(id)contextMenuComponentForTrackAtIndexPath:(id)arg1 ;
-(unsigned)offlineSyncStateForTrackAtIndexPath:(id)arg1 ;
-(unsigned)offlineAvailability;
-(void)shufflePlayAlbumWithOptions:(id)arg1 ;
-(id)albumContextMenuComponent;
-(NSURL *)collectionAlbumLink;
-(NSURL *)coverArtLink;
-(char)isInCollection;
-(void)setInCollection:(char)arg1 ;
-(char)hasSavedTracks;
-(id<SPTCollectionInternal>)collectionInternal;
-(void)updateWithCollectionAlbum:(id)arg1 ;
-(void)retrieveAlbumEntity:(id)arg1 ;
-(SPTCollectionAlbum *)collectionAlbum;
-(id)trackAtIndexpath:(id)arg1 ;
-(void)setCollectionAlbum:(SPTCollectionAlbum *)arg1 ;
-(void)setCollectionAlbumContext:(SPTrackContext *)arg1 ;
-(SPTrackContext *)collectionAlbumContext;
-(void)setFullAlbumContext:(SPTrackContext *)arg1 ;
-(SPTrackContext *)fullAlbumContext;
-(char)fullAlbumContextLoaded;
-(void)setCollectionInternal:(id<SPTCollectionInternal>)arg1 ;
-(NSURL *)currentlyPlayingURL;
-(id<SPTCollection>)collection;
-(void)setPlayer:(id<SPTPlayer>)arg1 ;
-(SPTAlbum *)album;
-(NSString *)albumName;
-(void)setAlbum:(SPTAlbum *)arg1 ;
-(id<SPTPlayer>)player;
-(void)setLoaded:(char)arg1 ;
-(char)loaded;
-(void)setDelegate:(id<SPTCollectionAlbumModelDelegate>)arg1 ;
-(void)dealloc;
-(id<SPTCollectionAlbumModelDelegate>)delegate;
-(int)numberOfItemsInSection:(int)arg1 ;
-(int)numberOfSections;
-(char)isEmpty;
-(id)context;
-(NSURL *)URL;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setURL:(NSURL *)arg1 ;
-(void)load;
-(NSString *)artistName;
-(id)username;
-(id)tracks;
-(char)isOffline;
-(void)setOffline:(char)arg1 ;
-(id)itemAtIndexPath:(id)arg1 ;
@end

