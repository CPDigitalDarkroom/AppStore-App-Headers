/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:24 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class GCKClearcutLogger, NSString;

@interface GCKEventLogger : NSObject {

	GCKClearcutLogger* _clearcutLogger;
	NSString* _pseudonymousID;

}
+(long long)hashDeviceID:(id)arg1 ;
+(id)sharedInstance;
-(void)resetPseudonymousID;
-(void)logFilterConnectingToDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 ;
-(void)logFilterFinishedForDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 matchedApplicationIDs:(id)arg4 unmatchedApplicationIDs:(id)arg5 matchedNamespaces:(id)arg6 unmatchedNamespaces:(id)arg7 ;
-(void)logFilterFailedForDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 withError:(int)arg4 ;
-(void)logFilterConnectedToDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 ;
-(void)logFilterConnectionFailedToDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 withError:(int)arg4 ;
-(void)logFilterReceivedStatusForDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 ;
-(void)logFilterRequestedAppAvailabilityForDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 ;
-(void)logFilterReceivedAppAvailabilityForDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 ;
-(void)logDeviceControllerConnecting:(long long)arg1 sessionID:(long long)arg2 ;
-(void)logDeviceController:(long long)arg1 sessionID:(long long)arg2 disconnectedWithError:(int)arg3 explicit:(char)arg4 ;
-(void)logDeviceController:(long long)arg1 sessionID:(long long)arg2 applicationConnected:(id)arg3 ;
-(void)logDeviceController:(long long)arg1 sessionID:(long long)arg2 application:(id)arg3 connectionFailedWithError:(int)arg4 ;
-(void)logDeviceController:(long long)arg1 sessionID:(long long)arg2 application:(id)arg3 disconnectedWithError:(int)arg4 ;
-(void)logDeviceController:(long long)arg1 sessionID:(long long)arg2 launchingApplication:(id)arg3 relaunchIfRunning:(char)arg4 ;
-(void)logDeviceController:(long long)arg1 sessionID:(long long)arg2 joiningApplication:(id)arg3 existingSession:(char)arg4 ;
-(void)logDeviceControllerConnected:(long long)arg1 sessionID:(long long)arg2 ;
-(void)logDeviceController:(long long)arg1 sessionID:(long long)arg2 connectionFailedWithError:(int)arg3 ;
-(void)logMdnsSubtypeFilteringEvent:(long long)arg1 subtype:(id)arg2 isPositiveFilteringResult:(char)arg3 wasSubtypePreviouslyDiscovered:(char)arg4 deviceCapabilities:(int)arg5 deviceModelName:(id)arg6 latency:(double)arg7 ;
-(void)logMdnsSubtypeFilteringEvent:(long long)arg1 subtype:(id)arg2 isPositiveFilteringResult:(char)arg3 wasSubtypePreviouslyDiscovered:(char)arg4 deviceCapabilities:(int)arg5 deviceModelName:(id)arg6 ;
-(void)logAdaptiveDiscoveryFailedToDevice:(long long)arg1 withReason:(int)arg2 error:(int)arg3 expectedSubtypes:(id)arg4 receivedSubtypes:(id)arg5 deviceModelName:(id)arg6 ;
-(void)logDeviceDiscovered:(long long)arg1 ;
-(void)logAdaptiveDiscoverySuccess:(long long)arg1 withReason:(int)arg2 isSameDevice:(char)arg3 expectedSubtypes:(id)arg4 receivedSubtypes:(id)arg5 deviceModelName:(id)arg6 ;
-(void)logSlowMdnsResponse:(long long)arg1 withType:(int)arg2 expectedSubtypes:(id)arg3 receivedSubtypes:(id)arg4 deviceModelName:(id)arg5 latency:(double)arg6 ;
-(void)logEvent:(id)arg1 forAction:(int)arg2 ;
-(int)encodeApplicationID:(id)arg1 ;
-(void)logAdaptiveDiscoveryResult:(id)arg1 withExpectedSubtypes:(id)arg2 receivedSubtypes:(id)arg3 ;
-(int)translateDeviceConnectionError:(int)arg1 ;
-(id)convertToSubtypes:(id)arg1 ;
-(int)translateApplicationConnectionError:(int)arg1 ;
-(void)logFilterRequestedStatusForDevice:(long long)arg1 sessionID:(long long)arg2 filterID:(int)arg3 ;
-(id)init;
@end

