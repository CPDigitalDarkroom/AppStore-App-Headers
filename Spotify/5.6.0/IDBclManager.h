/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:22 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Spotify/IDStreamProviderDelegate.h>
#import <Spotify/IDConnectionMultiplexerDelegate.h>
#import <Spotify/IDBclBroadcastSender.h>

@protocol IDBclManagerDelegate, IDBclBroadcastReceiver, IDStreamProvider;
@class NSConditionLock, IDConnectionMultiplexer, NSString;

@interface IDBclManager : NSObject <IDStreamProviderDelegate, IDConnectionMultiplexerDelegate, IDBclBroadcastSender> {

	id<IDBclManagerDelegate> _delegate;
	id<IDBclBroadcastReceiver> _broadcastReceiver;
	id<IDStreamProvider> _streamProvider;
	NSConditionLock* _stateCondition;
	NSConditionLock* _connectionCondition;
	IDConnectionMultiplexer* _multiplexer;
	float _handshakeTimeout;

}

@property (__weak) id<IDBclManagerDelegate> delegate;                          //@synthesize delegate=_delegate - In the implementation block
@property (__weak) id<IDBclBroadcastReceiver> broadcastReceiver;               //@synthesize broadcastReceiver=_broadcastReceiver - In the implementation block
@property (getter=isStarted,nonatomic,readonly) char started; 
@property (getter=isConnected,nonatomic,readonly) char connected; 
@property (retain) id<IDStreamProvider> streamProvider;                        //@synthesize streamProvider=_streamProvider - In the implementation block
@property (retain) NSConditionLock * stateCondition;                           //@synthesize stateCondition=_stateCondition - In the implementation block
@property (retain) NSConditionLock * connectionCondition;                      //@synthesize connectionCondition=_connectionCondition - In the implementation block
@property (retain) IDConnectionMultiplexer * multiplexer;                      //@synthesize multiplexer=_multiplexer - In the implementation block
@property (assign) float handshakeTimeout;                                     //@synthesize handshakeTimeout=_handshakeTimeout - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)communicationURL;
-(id)proxyInfo;
-(NSConditionLock *)stateCondition;
-(NSConditionLock *)connectionCondition;
-(IDConnectionMultiplexer *)multiplexer;
-(id)stringFromIDBclManagerState:(unsigned)arg1 ;
-(id)stringFromIDBclConnectionToAccessoryState:(unsigned)arg1 ;
-(void)setStreamProvider:(id<IDStreamProvider>)arg1 ;
-(id<IDStreamProvider>)streamProvider;
-(char)shouldEnqueProtocolInUseNotification;
-(void)enqueueProtocolInUseNotification;
-(char)shouldRegisterForiAPAppLaunch;
-(id)selectedProtocol;
-(void)enqueueRegisterForApplicationLaunch:(id)arg1 registerPacketType:(unsigned)arg2 ;
-(void)processBroadcast:(id)arg1 ;
-(void)forwardBroadcast:(id)arg1 ;
-(void)enqueueBroadcastProtocolResponseForRequest:(id)arg1 ;
-(id<IDBclBroadcastReceiver>)broadcastReceiver;
-(void)sendBroadcast:(id)arg1 ;
-(void)setMultiplexer:(IDConnectionMultiplexer *)arg1 ;
-(float)handshakeTimeout;
-(void)waitForHandshakeWithTimeout:(float)arg1 ;
-(void)stopMultiplexer;
-(char)connectionSupportsMultisession;
-(void)connectionMultiplexer:(id)arg1 errorOccurred:(id)arg2 ;
-(void)connectionMultiplexerDidFinishHandshake:(id)arg1 ;
-(void)connectionMultiplexerDidReceiveEndOfStreamFromA4AConnection:(id)arg1 ;
-(void)connectionMultiplexerDidReceiveHangup:(id)arg1 ;
-(void)connectionMultiplexer:(id)arg1 didReceiveBroadcast:(id)arg2 ;
-(void)startWithStreamProvider:(id)arg1 ;
-(void)enqueueRequestApplicationLaunch:(id)arg1 ;
-(void)setBroadcastReceiver:(id<IDBclBroadcastReceiver>)arg1 ;
-(void)setStateCondition:(NSConditionLock *)arg1 ;
-(void)setConnectionCondition:(NSConditionLock *)arg1 ;
-(void)setHandshakeTimeout:(float)arg1 ;
-(void)streamProvider:(id)arg1 didFailToStartWithError:(id)arg2 ;
-(void)streamProvider:(id)arg1 didFailToResolveStreamsWithError:(id)arg2 ;
-(void)streamProvider:(id)arg1 didResolveInputStream:(id)arg2 outputStream:(id)arg3 ;
-(void)streamProviderWillDiscardStreams:(id)arg1 ;
-(void)setDelegate:(id<IDBclManagerDelegate>)arg1 ;
-(id)init;
-(NSString *)description;
-(id<IDBclManagerDelegate>)delegate;
-(void)stop;
-(char)isStarted;
-(char)isConnected;
@end

