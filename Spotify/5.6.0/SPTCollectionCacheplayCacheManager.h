/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:31 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Spotify/SPTPlayerObserver.h>
#import <Spotify/SPTCollectionEntityListObserver.h>

@protocol SPTPlayer, SPTLocalSettings, SPTCollection, SPTCollectionEntityList;
@class SPTOfflineManager, NSMutableDictionary, SPTPlayerState, NSString;

@interface SPTCollectionCacheplayCacheManager : NSObject <SPTPlayerObserver, SPTCollectionEntityListObserver> {

	char _entitiesLoadedFromLocalStorage;
	id<SPTPlayer> _player;
	id<SPTLocalSettings> _localSettings;
	SPTOfflineManager* _offlineManager;
	id<SPTCollection> _collection;
	id<SPTCollectionEntityList> _recentlyPlayedEntityList;
	id<SPTCollectionEntityList> _recentPlaylistsEntityList;
	NSMutableDictionary* _recentEntitiesCachedTracks;
	SPTPlayerState* _previousPlayState;

}

@property (nonatomic,readonly) id<SPTPlayer> player;                                                      //@synthesize player=_player - In the implementation block
@property (nonatomic,readonly) id<SPTLocalSettings> localSettings;                                        //@synthesize localSettings=_localSettings - In the implementation block
@property (nonatomic,readonly) SPTOfflineManager * offlineManager;                                        //@synthesize offlineManager=_offlineManager - In the implementation block
@property (nonatomic,__weak,readonly) id<SPTCollection> collection;                                       //@synthesize collection=_collection - In the implementation block
@property (nonatomic,__weak,readonly) id<SPTCollectionEntityList> recentlyPlayedEntityList;               //@synthesize recentlyPlayedEntityList=_recentlyPlayedEntityList - In the implementation block
@property (nonatomic,__weak,readonly) id<SPTCollectionEntityList> recentPlaylistsEntityList;              //@synthesize recentPlaylistsEntityList=_recentPlaylistsEntityList - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * recentEntitiesCachedTracks;                            //@synthesize recentEntitiesCachedTracks=_recentEntitiesCachedTracks - In the implementation block
@property (nonatomic,retain) SPTPlayerState * previousPlayState;                                          //@synthesize previousPlayState=_previousPlayState - In the implementation block
@property (assign,nonatomic) char entitiesLoadedFromLocalStorage;                                         //@synthesize entitiesLoadedFromLocalStorage=_entitiesLoadedFromLocalStorage - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id<SPTLocalSettings>)localSettings;
-(void)player:(id)arg1 stateDidChange:(id)arg2 ;
-(SPTOfflineManager *)offlineManager;
-(id)initWithPlayer:(id)arg1 localSettings:(id)arg2 offlineManager:(id)arg3 collection:(id)arg4 recentlyPlayedEntityList:(id)arg5 recentPlaylistsEntityList:(id)arg6 ;
-(id<SPTCollectionEntityList>)recentlyPlayedEntityList;
-(void)entityListDidReload:(id)arg1 ;
-(void)loadLocalEntities;
-(id<SPTCollectionEntityList>)recentPlaylistsEntityList;
-(char)isEligibleEntityURL:(id)arg1 ;
-(id)canonicalURLFromEntityURL:(id)arg1 ;
-(NSMutableDictionary *)recentEntitiesCachedTracks;
-(char)isCachedTracksEntry:(id)arg1 entityURI:(id)arg2 ;
-(SPTPlayerState *)previousPlayState;
-(void)updateWithPlayState:(id)arg1 ;
-(void)setPreviousPlayState:(SPTPlayerState *)arg1 ;
-(void)setEntitiesLoadedFromLocalStorage:(char)arg1 ;
-(void)setRecentEntitiesCachedTracks:(NSMutableDictionary *)arg1 ;
-(char)entitiesLoadedFromLocalStorage;
-(char)isCacheOrOfflineTrackURL:(id)arg1 ;
-(void)addEntityURI:(id)arg1 trackURI:(id)arg2 isLocalTrack:(char)arg3 ;
-(void)saveAndTrimLocalEntities;
-(char)isAlbumInCollectionURL:(id)arg1 ;
-(char)isArtistInCollectionURL:(id)arg1 ;
-(char)isCacheOrOfflineEntityURL:(id)arg1 ;
-(id<SPTCollection>)collection;
-(id<SPTPlayer>)player;
-(void)dealloc;
@end

