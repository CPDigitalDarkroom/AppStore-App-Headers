/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:24 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Spotify/Spotify-Structs.h>
#import <Spotify/GNSAudioEncoding.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSString;

@interface GNSDSSSEncoding : NSObject <GNSAudioEncoding, NSCopying> {

	char _includesParitySymbol;
	char _usesSingleSideband;
	int _tokenLengthBytes;
	float _coderSampleRate;
	int _basebandDecimationFactor;
	int _numberOfCRCCheckBytes;
	int _numberOfTapsLSFR;
	int _codeNumber;
	int _upsamplingFactor;
	int _desiredCarrierFrequency;
	int _bitsPerSymbol;
	int _minCyclesPerFrame;

}

@property (assign,nonatomic) char usesSingleSideband;                   //@synthesize usesSingleSideband=_usesSingleSideband - In the implementation block
@property (assign,nonatomic) int numberOfTapsLSFR;                      //@synthesize numberOfTapsLSFR=_numberOfTapsLSFR - In the implementation block
@property (assign,nonatomic) int codeNumber;                            //@synthesize codeNumber=_codeNumber - In the implementation block
@property (assign,nonatomic) int upsamplingFactor;                      //@synthesize upsamplingFactor=_upsamplingFactor - In the implementation block
@property (assign,nonatomic) int desiredCarrierFrequency;               //@synthesize desiredCarrierFrequency=_desiredCarrierFrequency - In the implementation block
@property (assign,nonatomic) int bitsPerSymbol;                         //@synthesize bitsPerSymbol=_bitsPerSymbol - In the implementation block
@property (assign,nonatomic) int minCyclesPerFrame;                     //@synthesize minCyclesPerFrame=_minCyclesPerFrame - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic) int tokenLengthBytes;                      //@synthesize tokenLengthBytes=_tokenLengthBytes - In the implementation block
@property (assign,nonatomic) char includesParitySymbol;                 //@synthesize includesParitySymbol=_includesParitySymbol - In the implementation block
@property (assign,nonatomic) float coderSampleRate;                     //@synthesize coderSampleRate=_coderSampleRate - In the implementation block
@property (assign,nonatomic) int basebandDecimationFactor;              //@synthesize basebandDecimationFactor=_basebandDecimationFactor - In the implementation block
@property (assign,nonatomic) int numberOfCRCCheckBytes;                 //@synthesize numberOfCRCCheckBytes=_numberOfCRCCheckBytes - In the implementation block
+(id)encodingWithTokenLength:(unsigned)arg1 ;
-(SymbolWaveCoder*)symbolWaveCoder;
-(id)initWithTokenLength:(unsigned)arg1 ;
-(int)tokenLengthBytes;
-(char)includesParitySymbol;
-(char)usesSingleSideband;
-(int)numberOfTapsLSFR;
-(int)codeNumber;
-(float)coderSampleRate;
-(int)upsamplingFactor;
-(int)desiredCarrierFrequency;
-(int)bitsPerSymbol;
-(int)minCyclesPerFrame;
-(int)basebandDecimationFactor;
-(int)numberOfCRCCheckBytes;
-(void)setTokenLengthBytes:(int)arg1 ;
-(void)setIncludesParitySymbol:(char)arg1 ;
-(void)setUsesSingleSideband:(char)arg1 ;
-(void)setNumberOfTapsLSFR:(int)arg1 ;
-(void)setCodeNumber:(int)arg1 ;
-(void)setCoderSampleRate:(float)arg1 ;
-(void)setUpsamplingFactor:(int)arg1 ;
-(void)setDesiredCarrierFrequency:(int)arg1 ;
-(void)setBitsPerSymbol:(int)arg1 ;
-(void)setMinCyclesPerFrame:(int)arg1 ;
-(void)setBasebandDecimationFactor:(int)arg1 ;
-(void)setNumberOfCRCCheckBytes:(int)arg1 ;
-(void)encodeData:(vector<unsigned char, std::__1::allocator<unsigned char> >)arg1 asToken:(vector<float, std::__1::allocator<float> >*)arg2 withStartTransition:(vector<float, std::__1::allocator<float> >*)arg3 startTransitionDuration:(double)arg4 ;
-(WhispernetDecoder*)decoderWithTokenLength:(int)arg1 broadcasterStoppedThreshold:(double)arg2 maxTokenGuesses:(int)arg3 decodingBufferSize:(double)arg4 ;
-(char)isEqual:(id)arg1 ;
-(unsigned)hash;
-(id)copyWithZone:(NSZone*)arg1 ;
@end

