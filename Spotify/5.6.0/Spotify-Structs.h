/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:55 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSOutputStream, NSData, NSString, GCKPB_PBGeneratedMessage, GCKPB_PBArray, GCKPB_PBEnumDescriptor, SPApHermesRequest, SPCollectionController, SPCore, SPTOfflineManager;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _NSZone* NSZoneRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct sqlite3* sqlite3Ref;

typedef struct CGPath* CGPathRef;

typedef struct {
	int field1;
	void field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
} SCD_Struct_XA7;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFString* CFStringRef;

typedef struct {
	char* field1;
	/*function pointer*/void* field2;
	int field3;
	/*function pointer*/void* field4;
	void field5;
	char* field6;
	int field7;
	int field8;
	int field9;
} SCD_Struct_XV10;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct OpaqueAudioConverter* OpaqueAudioConverterRef;

typedef struct __CFNumber* CFNumberRef;

typedef struct __CFUUID* CFUUIDRef;

typedef struct __SecTrust* SecTrustRef;

typedef struct __CFSocket* CFSocketRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct SSLContext* SSLContextRef;

typedef struct __SecIdentity* SecIdentityRef;

typedef struct __SecCertificate* SecCertificateRef;

typedef struct CGColor* CGColorRef;

typedef struct __SecKey* SecKeyRef;

typedef struct __CTFontDescriptor* CTFontDescriptorRef;

typedef struct OpaqueAudioQueue* OpaqueAudioQueueRef;

typedef struct {
	unsigned long field1;
	id field2;
	unsigned long field3;
	unsigned long field4[5];
} SCD_Struct_GC25;

typedef struct PBInputBufferState {
	char* bytes;
	unsigned bufferSize;
	unsigned bufferPos;
	unsigned currentLimit;
} PBInputBufferState;

typedef struct PBOutputBufferState {
	char* bytes;
	unsigned size;
	unsigned position;
	NSOutputStream* output;
} PBOutputBufferState;

typedef union {
	char valueBool;
	unsigned valueFixed32;
	int valueSFixed32;
	float valueFloat;
	unsigned long long valueFixed64;
	long long valueSFixed64;
	double valueDouble;
	int valueInt32;
	long long valueInt64;
	int valueSInt32;
	long long valueSInt64;
	unsigned valueUInt32;
	unsigned long long valueUInt64;
	NSData* valueData;
	NSString* valueString;
	GCKPB_PBGeneratedMessage* valueMessage;
	GCKPB_PBGeneratedMessage* valueGroup;
	int valueEnum;
	GCKPB_PBArray* valueArray;
	id valueObject;
} SCD_Union_GC28;

typedef union {
	GCKPB_PBEnumDescriptor* enumDescriptor_;
	/*function pointer*/void* enumVerifier_;
} SCD_Union_GC29;

typedef struct PBGeneratedMessage_Storage* PBGeneratedMessage_StorageRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct OpaqueVTCompressionSession* OpaqueVTCompressionSessionRef;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct __CVBuffer* CVBufferRef;

typedef struct {
	int version;
	void info;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
} SCD_Struct_GC35;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_SP39;

typedef struct {
	double latitude;
	double longitude;
} SCD_Struct_SP40;

typedef struct OpaqueAudioComponentInstance* OpaqueAudioComponentInstanceRef;

typedef struct CGContext* CGContextRef;

typedef struct CGImage* CGImageRef;

typedef struct UIOffset {
	float horizontal;
	float vertical;
} UIOffset;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct {
	char field1;
	unsigned char field2;
	char field3;
	unsigned long long field4;
} SCD_Struct_MP46;

typedef struct objc_method* objc_methodRef;

typedef struct SPTHubIndexPath {
	unsigned blockIndex;
	unsigned itemIndex;
} SPTHubIndexPath;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct CGVector {
	float dx;
	float dy;
} CGVector;

typedef struct {
	double x;
	double y;
	double z;
} SCD_Struct_SP51;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SPTTimeRange, void *> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SPTTimeRange, void *> > >;

typedef struct _list_node_base<SPTTimeRange, void *> {
	__list_node<SPTTimeRange, void *> __prev_;
	__list_node<SPTTimeRange, void *> __next_;
} list_node_base<SPTTimeRange, void *>;

typedef struct list<SPTTimeRange, std::__1::allocator<SPTTimeRange> > {
	list_node_base<SPTTimeRange, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SPTTimeRange, void *> > > __size_alloc_;
} list<SPTTimeRange, std::__1::allocator<SPTTimeRange> >;

typedef struct OpaqueAudioFileStreamID* OpaqueAudioFileStreamIDRef;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void mData;
} AudioBuffer;

typedef struct {
	void buffer;
	int length;
	int tail;
	int head;
	int fillCount;
	BOOL atomic;
} SCD_Struct_SP57;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
} SCD_Struct_CL58;

typedef struct {
	void field1;
	unsigned long long field2;
	void field3;
} SCD_Struct_CL59;

typedef struct {
	char field1[33];
	BOOL field2;
	SCD_Struct_CL58 field3;
	SCD_Struct_CL58 field4;
	SCD_Struct_CL59 field5;
	unsigned char field6;
	unsigned long field7;
	unsigned short field8;
	M field9;
	a field10;
	char field11;
	h field12;
	O field13;
	unsigned short field14;
	long field15;
	int field16;
	char field17;
	e field18;
	int field19;
} SCD_Struct_CL60;

typedef struct {
	char* field1;
	void field2;
	BOOL field3;
	void field4;
	char* field5;
	char* field6;
	char* field7;
	char* field8;
	char* field9;
	unsigned field10;
	BOOL field11;
	BOOL field12;
	unsigned field13;
	unsigned field14;
	unsigned field15;
	unsigned field16;
} SCD_Struct_CL61;

typedef struct {
	char* field1;
	char* field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_CL62;

typedef struct {
	unsigned major;
	unsigned minor;
	unsigned bugfix;
} SCD_Struct_FA63;

typedef struct {
	int field1;
	int field2;
	int field3;
} SCD_Struct_FB64;

typedef struct __SecRandom* SecRandomRef;

typedef struct GLUESideMargins {
	float leading;
	float trailing;
} GLUESideMargins;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct SPTID3ParserHeaderStruct {
	char headerType[3];
	unsigned char version;
	unsigned char flags;
	unsigned char unknown;
	int synchsafeLength;
} SPTID3ParserHeaderStruct;

typedef struct bound_memfunc_ptr_t {
	 memfunc_ptr;
	void obj_ptr;
} bound_memfunc_ptr_t;

typedef struct obj_ref_t {
	void obj_ptr;
	BOOL is_const_qualified;
	BOOL is_volatile_qualified;
} obj_ref_t;

typedef struct type_t {
	type_info type;
	BOOL const_qualified;
	BOOL volatile_qualified;
} type_t;

typedef struct function<void (spotify_resolver *)> {
	vtable_base vtable;
	function_buffer functor;
	void obj_ptr;
	type_t type;
	/*function pointer*/void* func_ptr;
	bound_memfunc_ptr_t bound_memfunc_ptr;
	obj_ref_t obj_ref;
	c) data;
} function<void (spotify_resolver *)>;

typedef struct shared_count {
	sp_counted_base pi_;
} shared_count;

typedef struct shared_ptr<spotify::api::CResolverWrapper> {
	CResolverWrapper px;
	shared_count pn;
} shared_ptr<spotify::api::CResolverWrapper>;

typedef struct RefPtr<const spotify::metadata::AlbumInfo> {
	AlbumInfo _p;
} RefPtr<const spotify::metadata::AlbumInfo>;

typedef struct SPApHermesRequestCpp {
	SPApHermesRequest* objc;
} SPApHermesRequestCpp;

typedef struct RefPtr<const spotify::metadata::ArtistInfo> {
	ArtistInfo _p;
} RefPtr<const spotify::metadata::ArtistInfo>;

typedef struct _compressed_pair<spotify::collection_cosmos::CollectionCosmosHandler *, std::__1::default_delete<spotify::collection_cosmos::CollectionCosmosHandler> > {
	CollectionCosmosHandler __first_;
} compressed_pair<spotify::collection_cosmos::CollectionCosmosHandler *, std::__1::default_delete<spotify::collection_cosmos::CollectionCosmosHandler> >;

typedef struct unique_ptr<spotify::collection_cosmos::CollectionCosmosHandler, std::__1::default_delete<spotify::collection_cosmos::CollectionCosmosHandler> > {
	compressed_pair<spotify::collection_cosmos::CollectionCosmosHandler *, std::__1::default_delete<spotify::collection_cosmos::CollectionCosmosHandler> > __ptr_;
} unique_ptr<spotify::collection_cosmos::CollectionCosmosHandler, std::__1::default_delete<spotify::collection_cosmos::CollectionCosmosHandler> >;

typedef struct weak_count {
	sp_counted_base pi_;
} weak_count;

typedef struct weak_ptr<boost::signals2::detail::connection_body_base> {
	connection_body_base px;
	weak_count pn;
} weak_ptr<boost::signals2::detail::connection_body_base>;

typedef struct scoped_connection {
	weak_ptr<boost::signals2::detail::connection_body_base> _weak_connection_body;
} scoped_connection;

typedef struct SPCollectionModelObserver {
	SPCollectionController* _objc;
	scoped_connection _artists_list_observer;
	scoped_connection _all_albums_list_observer;
	scoped_connection _artist_albums_list_observer;
} SPCollectionModelObserver;

typedef struct SPCollectionModelCallbacks {
	SPCollectionController* _objc;
} SPCollectionModelCallbacks;

typedef struct CollectionOfflineHelper* CollectionOfflineHelperRef;

typedef struct _compressed_pair<SPCollectionOfflineHelperBridge *, std::__1::default_delete<SPCollectionOfflineHelperBridge> > {
	SPCollectionOfflineHelperBridge __first_;
} compressed_pair<SPCollectionOfflineHelperBridge *, std::__1::default_delete<SPCollectionOfflineHelperBridge> >;

typedef struct unique_ptr<SPCollectionOfflineHelperBridge, std::__1::default_delete<SPCollectionOfflineHelperBridge> > {
	compressed_pair<SPCollectionOfflineHelperBridge *, std::__1::default_delete<SPCollectionOfflineHelperBridge> > __ptr_;
} unique_ptr<SPCollectionOfflineHelperBridge, std::__1::default_delete<SPCollectionOfflineHelperBridge> >;

typedef struct SPCoreCallbacks {
	SPCore* _objc;
} SPCoreCallbacks;

typedef struct shared_ptr<spotify::accesspoint::LoginCredentials::Impl> {
	Impl px;
	shared_count pn;
} shared_ptr<spotify::accesspoint::LoginCredentials::Impl>;

typedef struct LoginCredentials {
	shared_ptr<spotify::accesspoint::LoginCredentials::Impl> _impl;
} LoginCredentials;

typedef struct RefPtr<spotify::playlist::Playlist> {
	Playlist _p;
} RefPtr<spotify::playlist::Playlist>;

typedef struct RefPtr<spotify::playlist::PlaylistContainer> {
	PlaylistContainer _p;
} RefPtr<spotify::playlist::PlaylistContainer>;

typedef struct _compressed_pair<PopcountObjC *, std::__1::default_delete<PopcountObjC> > {
	PopcountObjC __first_;
} compressed_pair<PopcountObjC *, std::__1::default_delete<PopcountObjC> >;

typedef struct unique_ptr<PopcountObjC, std::__1::default_delete<PopcountObjC> > {
	compressed_pair<PopcountObjC *, std::__1::default_delete<PopcountObjC> > __ptr_;
} unique_ptr<PopcountObjC, std::__1::default_delete<PopcountObjC> >;

typedef struct _compressed_pair<spotify::client::ClientFeatureStack *, std::__1::default_delete<spotify::client::ClientFeatureStack> > {
	ClientFeatureStack __first_;
} compressed_pair<spotify::client::ClientFeatureStack *, std::__1::default_delete<spotify::client::ClientFeatureStack> >;

typedef struct unique_ptr<spotify::client::ClientFeatureStack, std::__1::default_delete<spotify::client::ClientFeatureStack> > {
	compressed_pair<spotify::client::ClientFeatureStack *, std::__1::default_delete<spotify::client::ClientFeatureStack> > __ptr_;
} unique_ptr<spotify::client::ClientFeatureStack, std::__1::default_delete<spotify::client::ClientFeatureStack> >;

typedef struct shared_ptr<spotify::item_list::TrackListFactory> {
	TrackListFactory px;
	shared_count pn;
} shared_ptr<spotify::item_list::TrackListFactory>;

typedef struct _compressed_pair<spotify::social::objc::SocialEventListener *, std::__1::default_delete<spotify::social::objc::SocialEventListener> > {
	SocialEventListener __first_;
} compressed_pair<spotify::social::objc::SocialEventListener *, std::__1::default_delete<spotify::social::objc::SocialEventListener> >;

typedef struct unique_ptr<spotify::social::objc::SocialEventListener, std::__1::default_delete<spotify::social::objc::SocialEventListener> > {
	compressed_pair<spotify::social::objc::SocialEventListener *, std::__1::default_delete<spotify::social::objc::SocialEventListener> > __ptr_;
} unique_ptr<spotify::social::objc::SocialEventListener, std::__1::default_delete<spotify::social::objc::SocialEventListener> >;

typedef struct shared_ptr<base::RevocableStore::Store> {
	Store px;
	shared_count pn;
} shared_ptr<base::RevocableStore::Store>;

typedef struct UnboundRevocable<base::RevocableStore> {
	shared_ptr<base::RevocableStore::Store> _store_ref;
} UnboundRevocable<base::RevocableStore>;

typedef struct _compressed_pair<SocialLookupObjC *, std::__1::default_delete<SocialLookupObjC> > {
	SocialLookupObjC __first_;
} compressed_pair<SocialLookupObjC *, std::__1::default_delete<SocialLookupObjC> >;

typedef struct unique_ptr<SocialLookupObjC, std::__1::default_delete<SocialLookupObjC> > {
	compressed_pair<SocialLookupObjC *, std::__1::default_delete<SocialLookupObjC> > __ptr_;
} unique_ptr<SocialLookupObjC, std::__1::default_delete<SocialLookupObjC> >;

typedef const struct function<void (const boost::system::error_code &, const spotify::uri::SpotifyLink &, const base::RefPtr<const spotify::metadata::TrackInfo> &)>* function<void (const boost::system::error_code &, const spotify::uri::SpotifyLink &, const base::RefPtr<const spotify::metadata::TrackInfo> &)>Ref;

typedef const struct function<void (const boost::system::error_code &, const spotify::uri::SpotifyLink &, const base::RefPtr<const spotify::metadata::ArtistMetadata> &)>* function<void (const boost::system::error_code &, const spotify::uri::SpotifyLink &, const base::RefPtr<const spotify::metadata::ArtistMetadata> &)>Ref;

typedef const struct function<void (const boost::system::error_code &, const spotify::uri::SpotifyLink &, const base::RefPtr<const spotify::metadata::AlbumMetadata> &)>* function<void (const boost::system::error_code &, const spotify::uri::SpotifyLink &, const base::RefPtr<const spotify::metadata::AlbumMetadata> &)>Ref;

typedef const struct function<void (const boost::system::error_code &, base::AsArray<const spotify::uri::SpotifyLink>, base::AsArray<base::RefPtr<const spotify::metadata::TrackInfo> >)>* function<void (const boost::system::error_code &, base::AsArray<const spotify::uri::SpotifyLink>, base::AsArray<base::RefPtr<const spotify::metadata::TrackInfo> >)>Ref;

typedef const struct function<void (const boost::system::error_code &, base::AsArray<const spotify::uri::SpotifyLink>, base::AsArray<base::RefPtr<const spotify::metadata::AlbumMetadata> >)>* function<void (const boost::system::error_code &, base::AsArray<const spotify::uri::SpotifyLink>, base::AsArray<base::RefPtr<const spotify::metadata::AlbumMetadata> >)>Ref;

typedef const struct function<void (const boost::system::error_code &, base::AsArray<const spotify::uri::SpotifyLink>, base::AsArray<base::RefPtr<const spotify::metadata::ArtistMetadata> >)>* function<void (const boost::system::error_code &, base::AsArray<const spotify::uri::SpotifyLink>, base::AsArray<base::RefPtr<const spotify::metadata::ArtistMetadata> >)>Ref;

typedef struct error_code {
	int m_val;
	error_category m_cat;
} error_code;

typedef struct shared_ptr<spotify::connect::GaiaDeviceInterface> {
	GaiaDeviceInterface px;
	shared_count pn;
} shared_ptr<spotify::connect::GaiaDeviceInterface>;

typedef struct shared_ptr<spotify::connect::GaiaManagerInterface> {
	GaiaManagerInterface px;
	shared_count pn;
} shared_ptr<spotify::connect::GaiaManagerInterface>;

typedef struct shared_ptr<spotify::connect::GaiaConnectDeviceApi> {
	GaiaConnectDeviceApi px;
	shared_count pn;
} shared_ptr<spotify::connect::GaiaConnectDeviceApi>;

typedef struct shared_ptr<coreobjc::LogObserver> {
	LogObserver px;
	shared_count pn;
} shared_ptr<coreobjc::LogObserver>;

typedef struct shared_ptr<spotify::analytics::Logger> {
	Logger px;
	shared_count pn;
} shared_ptr<spotify::analytics::Logger>;

typedef struct _long {
	unsigned __cap_;
	unsigned __size_;
	char* __data_;
} long;

typedef struct _short {
	/*function pointer*/void* ;
	unsigned char __size_;
	c) __lx;
	char __data_[11];
} short;

typedef struct _raw {
	unsigned long __words[3];
} raw;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct MetadataInfo {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > title;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > artist;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > album_artist;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > album;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > composer;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > track_number;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > track_count;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > disc_number;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > disc_count;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > year;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > genre;
	int length;
	long long file_size;
	BOOL has_drm;
	BOOL is_valid;
	BOOL automatic_metadata;
	BOOL authoritative_length;
	int image_state;
} MetadataInfo;

typedef struct OfflineManagerObserverBridge {
	/*function pointer*/void* _vptr$Observer;
	SPTOfflineManager* _objc;
} OfflineManagerObserverBridge;

typedef struct shared_ptr<spotify::played_state::PlayedStateManager> {
	PlayedStateManager px;
	shared_count pn;
} shared_ptr<spotify::played_state::PlayedStateManager>;

typedef struct Session* SessionRef;

typedef struct _compressed_pair<long *, std::__1::allocator<long> > {
	long __first_;
} compressed_pair<long *, std::__1::allocator<long> >;

typedef struct vector<long, std::__1::allocator<long> > {
	long __begin_;
	long __end_;
	compressed_pair<long *, std::__1::allocator<long> > __end_cap_;
} vector<long, std::__1::allocator<long> >;

typedef struct shared_ptr<spotify::playlist::objc::SPTPlaylistHolder> {
	SPTPlaylistHolder px;
	shared_count pn;
} shared_ptr<spotify::playlist::objc::SPTPlaylistHolder>;

typedef struct RefPtr<spotify::playlist::PlaylistBackendManager> {
	PlaylistBackendManager _p;
} RefPtr<spotify::playlist::PlaylistBackendManager>;

typedef struct shared_ptr<spotify::product_state::ProductState> {
	ProductState px;
	shared_count pn;
} shared_ptr<spotify::product_state::ProductState>;

typedef struct _compressed_pair<spotify::recently_played::RecentlyPlayed *, std::__1::default_delete<spotify::recently_played::RecentlyPlayed> > {
	RecentlyPlayed __first_;
} compressed_pair<spotify::recently_played::RecentlyPlayed *, std::__1::default_delete<spotify::recently_played::RecentlyPlayed> >;

typedef struct unique_ptr<spotify::recently_played::RecentlyPlayed, std::__1::default_delete<spotify::recently_played::RecentlyPlayed> > {
	compressed_pair<spotify::recently_played::RecentlyPlayed *, std::__1::default_delete<spotify::recently_played::RecentlyPlayed> > __ptr_;
} unique_ptr<spotify::recently_played::RecentlyPlayed, std::__1::default_delete<spotify::recently_played::RecentlyPlayed> >;

typedef struct _compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate> > {
	RecentlyPlayedCosmosSocialDelegate __first_;
} compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate> >;

typedef struct unique_ptr<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate> > {
	compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate> > __ptr_;
} unique_ptr<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSocialDelegate> >;

typedef struct _compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources> > {
	RecentlyPlayedCosmosSources __first_;
} compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources> >;

typedef struct unique_ptr<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources> > {
	compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources> > __ptr_;
} unique_ptr<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmosSources> >;

typedef struct _compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmos *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmos> > {
	RecentlyPlayedCosmos __first_;
} compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmos *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmos> >;

typedef struct unique_ptr<spotify::recently_played_cosmos::RecentlyPlayedCosmos, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmos> > {
	compressed_pair<spotify::recently_played_cosmos::RecentlyPlayedCosmos *, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmos> > __ptr_;
} unique_ptr<spotify::recently_played_cosmos::RecentlyPlayedCosmos, std::__1::default_delete<spotify::recently_played_cosmos::RecentlyPlayedCosmos> >;

typedef struct weak_ptr<spotify::analytics::RequestAccounting::Impl> {
	Impl px;
	weak_count pn;
} weak_ptr<spotify::analytics::RequestAccounting::Impl>;

typedef struct RequestAccountingSink {
	weak_ptr<spotify::analytics::RequestAccounting::Impl> _weak_impl;
} RequestAccountingSink;

typedef struct shared_ptr<spotify::tlc::TrackListContext> {
	TrackListContext px;
	shared_count pn;
} shared_ptr<spotify::tlc::TrackListContext>;

typedef struct RefPtr<const spotify::metadata::TrackInfo> {
	TrackInfo _p;
} RefPtr<const spotify::metadata::TrackInfo>;

typedef struct shared_ptr<spotify::tlc::TrackListContextFilter> {
	TrackListContextFilter px;
	shared_count pn;
} shared_ptr<spotify::tlc::TrackListContextFilter>;

typedef struct shared_ptr<spotify::tlc::PlaylistTrackListContext> {
	PlaylistTrackListContext px;
	shared_count pn;
} shared_ptr<spotify::tlc::PlaylistTrackListContext>;

typedef struct shared_ptr<spotify::tlc::FolderContext> {
	FolderContext px;
	shared_count pn;
} shared_ptr<spotify::tlc::FolderContext>;

typedef struct shared_ptr<const spotify::social::SocialUserData> {
	SocialUserData px;
	shared_count pn;
} shared_ptr<const spotify::social::SocialUserData>;

typedef struct shared_ptr<spotify::api::Router> {
	Router px;
	shared_count pn;
} shared_ptr<spotify::api::Router>;

typedef struct shared_ptr<spotify::api::RouterSharedContext> {
	RouterSharedContext px;
	shared_count pn;
} shared_ptr<spotify::api::RouterSharedContext>;

typedef struct shared_ptr<spotify::motion::MotionProcessor> {
	MotionProcessor __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<spotify::motion::MotionProcessor>;

typedef struct shared_ptr<spotify::player::VolatileContextPlayer> {
	VolatileContextPlayer px;
	shared_count pn;
} shared_ptr<spotify::player::VolatileContextPlayer>;

typedef struct PlayOrigin {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > feature_identifier;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > feature_version;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > view_uri;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > external_referrer;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > referrer_identifier;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > device_identifier;
} PlayOrigin;

typedef struct type {
	unsigned char __lx[12];
} type;

typedef struct function<boost::shared_ptr<spotify::player::VolatileContext> (const boost::shared_ptr<spotify::tlc::TrackListContext> &, const boost::container::flat_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, boost::container::new_allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::basic_string<char> > > > &)> {
	type __buf_;
	__base<boost::shared_ptr<spotify::player::VolatileContext> (const boost::shared_ptr<spotify::tlc::TrackListContext> &, const boost::container::flat_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, boost::container::new_allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::basic_string<char> > > > &)> __f_;
} function<boost::shared_ptr<spotify::player::VolatileContext> (const boost::shared_ptr<spotify::tlc::TrackListContext> &, const boost::container::flat_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, boost::container::new_allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::basic_string<char> > > > &)>;

typedef struct function<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > ()> {
	type __buf_;
	__base<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > ()> __f_;
} function<boost::chrono::time_point<boost::chrono::system_clock, boost::chrono::duration<long long, boost::ratio<1, 1000000000> > > ()>;

typedef struct PreparePlayOptionsoptional<std::__1::basic_string<char> >Baligned_storage<std::__1::basic_string<char> >(dummy_u[12c]a4)SkipToTrackoptional<std::__1::basic_string<char> >Baligned_storage<std::__1::basic_string<char> >(dummy_u[12c]a4)optional<unsigned long>Baligned_storage<unsigned long>(dummy_u[4c]a4)optional<std::__1::basic_string<char> >Baligned_storage<std::__1::basic_string<char> >(dummy_u[12c]a4)optional<std::__1::basic_string<char> >Baligned_storage<std::__1::basic_string<char> >(dummy_u[12c]a4)optional<unsigned long>Baligned_storage<unsigned long>(dummy_u[4c]a4)optional<boost::chrono::duration<long long* reparePlayOptionsRef;

typedef struct shared_ptr<spotify::player::legacy::MftSequenceRules> {
	MftSequenceRules px;
	shared_count pn;
} shared_ptr<spotify::player::legacy::MftSequenceRules>;

typedef struct shared_ptr<spotify::player::ProxyContextPlayer> {
	ProxyContextPlayer px;
	shared_count pn;
} shared_ptr<spotify::player::ProxyContextPlayer>;

typedef struct shared_ptr<spotify::player::Restorable> {
	Restorable px;
	shared_count pn;
} shared_ptr<spotify::player::Restorable>;

typedef struct SkipToTrackoptional<std::__1::basic_string<char> >Baligned_storage<std::__1::basic_string<char> >(dummy_u[12c]a4)optional<unsigned long>Baligned_storage<unsigned long>(dummy_u[4c]a4)optional<std::__1::basic_string<char> >Baligned_storage<std::__1::basic_string<char> >(dummy_u[12c]a4)optional<std::__1::basic_string<char> >Baligned_storage<std::__1::basic_string<char> >(dummy_u[12c]a4)optional<unsigned long>Baligned_storage<unsigned long>(dummy_u[4c]a4)* kipToTrackRef;

typedef struct function<void (const spotify::player::PlayOptions &, const std::__1::function<void (const spotify::player::ContextPlayerError &)> &)> {
	type __buf_;
	__base<void (const spotify::player::PlayOptions &, const std::__1::function<void (const spotify::player::ContextPlayerError &)> &)> __f_;
} function<void (const spotify::player::PlayOptions &, const std::__1::function<void (const spotify::player::ContextPlayerError &)> &)>;

typedef struct weak_ptr<spotify::http::HttpConnectionApple> {
	HttpConnectionApple px;
	weak_count pn;
} weak_ptr<spotify::http::HttpConnectionApple>;

typedef struct _compressed_pair<short **, std::__1::allocator<short *> > {
	short __first_;
} compressed_pair<short **, std::__1::allocator<short *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<short> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<short> >;

typedef struct _split_buffer<short *, std::__1::allocator<short *> > {
	short __first_;
	short __begin_;
	short __end_;
	compressed_pair<short **, std::__1::allocator<short *> > __end_cap_;
} split_buffer<short *, std::__1::allocator<short *> >;

typedef struct deque<short, std::__1::allocator<short> > {
	split_buffer<short *, std::__1::allocator<short *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<short> > __size_;
} deque<short, std::__1::allocator<short> >;

typedef struct function<void ()> {
	type __buf_;
	__base<void ()> __f_;
} function<void ()>;

typedef struct __CFArray* CFArrayRef;

