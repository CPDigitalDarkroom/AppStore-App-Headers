/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:23 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <Spotify/Spotify-Structs.h>
@interface IDRemoteBMWRemotingServerAdapter : NSObject {

	/*function pointer*/void* _newServerFunction;
	RemoteBMWRemotingServer* _server;

}
-(RemoteBMWRemotingServer*)serverPointer;
-(id)initWithNewServerFunction:(/*function pointer*/void*)arg1 ;
-(int)createServerWithEtchRuntime:(EtchRuntime*)arg1 urlString:(EtchString*)arg2 etchResources:(EtchResources*)arg3 factory:(BMWRemotingClientFactory*)arg4 ;
-(int)waitUp:(int)arg1 ;
-(int)startAndWaitUp:(int)arg1 ;
-(int)waitDown:(int)arg1 ;
-(int)stopAndWaitDown:(int)arg1 ;
-(SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> >*)ver_getVersion;
-(SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> > >*)info_getSystemInfoWithComponent:(SmartPointer<EtchString>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)sas_crlWithData:(SmartPointer<EtchNativeArray<signed char> >*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchNativeArray<signed char> > >*)sas_certificateWithData:(SmartPointer<EtchNativeArray<signed char> >*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchString> >*)sas_loginWithData:(SmartPointer<EtchNativeArray<signed char> >*)arg1 version:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo>*)arg2 ;
-(SmartPointer<EtchAsyncResult<EtchString> >*)sas_permissionWithToken:(SmartPointer<EtchString>*)arg1 key:(SmartPointer<EtchString>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)sas_logoutWithToken:(SmartPointer<EtchString>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)rhmi_createWithToken:(SmartPointer<EtchString>*)arg1 metaData:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData>*)arg2 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)rhmi_createWithToken:(SmartPointer<EtchString>*)arg1 rhmiVersion:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIVersion>*)arg2 metaData:(SmartPointer<de_bmw_idrive_BMWRemoting::BMWRemoting::RHMIMetaData>*)arg3 ;
-(SmartPointer<EtchAsyncResult<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> > >*)rhmi_getCapabilitiesWithHandle:(SmartPointer<EtchInt32>*)arg1 component:(SmartPointer<EtchString>*)arg2 ;
-(SmartPointer<EtchAsyncResult<EtchBool> >*)rhmi_checkResourceWithHandle:(SmartPointer<EtchInt32>*)arg1 type:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>*)arg2 name:(SmartPointer<EtchString>*)arg3 size:(SmartPointer<EtchInt32>*)arg4 hash:(SmartPointer<EtchNativeArray<signed char> >*)arg5 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_setResourceWithHandle:(SmartPointer<EtchInt32>*)arg1 type:(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIResourceType>*)arg2 data:(SmartPointer<EtchNativeArray<signed char> >*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_initializeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_setStateWithHandle:(SmartPointer<EtchInt32>*)arg1 state:(SmartPointer<EtchInt32>*)arg2 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)rhmi_getStateWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_setPropertyWithHandle:(SmartPointer<EtchInt32>*)arg1 componentId:(SmartPointer<EtchInt32>*)arg2 propertyId:(SmartPointer<EtchInt32>*)arg3 values:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_setDataWithHandle:(SmartPointer<EtchInt32>*)arg1 modelId:(SmartPointer<EtchInt32>*)arg2 value:(SmartPointer<EtchObject>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_addActionEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 actionId:(SmartPointer<EtchInt32>*)arg2 ident:(SmartPointer<EtchString>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_removeActionEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 actionId:(SmartPointer<EtchInt32>*)arg2 ident:(SmartPointer<EtchString>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_ackActionEventWithHandle:(SmartPointer<EtchInt32>*)arg1 actionId:(SmartPointer<EtchInt32>*)arg2 confirmId:(SmartPointer<EtchInt32>*)arg3 success:(SmartPointer<EtchBool>*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_addHmiEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 componentId:(SmartPointer<EtchInt32>*)arg2 eventId:(SmartPointer<EtchInt32>*)arg3 ident:(SmartPointer<EtchString>*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_removeHmiEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 componentId:(SmartPointer<EtchInt32>*)arg2 eventId:(SmartPointer<EtchInt32>*)arg3 ident:(SmartPointer<EtchString>*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_triggerEventWithHandle:(SmartPointer<EtchInt32>*)arg1 eventId:(SmartPointer<EtchInt32>*)arg2 args:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)rhmi_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)am_createWithDeviceId:(SmartPointer<EtchString>*)arg1 bluetoothAddress:(SmartPointer<EtchNativeArray<signed char> >*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)am_registerAppWithHandle:(SmartPointer<EtchInt32>*)arg1 appId:(SmartPointer<EtchString>*)arg2 values:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)am_showLoadingHintWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)am_showLoadedSuccessHintWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)am_showLoadingFailHintWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)am_addAppEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 ident:(SmartPointer<EtchString>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)am_removeAppEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 ident:(SmartPointer<EtchString>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)am_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)cds_createWithToken:(SmartPointer<EtchString>*)arg1 ;
-(SmartPointer<EtchAsyncResult<de_bmw_idrive_BMWRemoting::BMWRemoting::VersionInfo> >*)cds_getVersion;
-(SmartPointer<EtchAsyncResultNone>*)cds_getPropertyAsyncWithHandle:(SmartPointer<EtchInt32>*)arg1 propertyName:(SmartPointer<EtchString>*)arg2 ident:(SmartPointer<EtchString>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)cds_setPropertyAsyncWithHandle:(SmartPointer<EtchInt32>*)arg1 propertyName:(SmartPointer<EtchString>*)arg2 ident:(SmartPointer<EtchString>*)arg3 propertyValue:(SmartPointer<EtchString>*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)cds_addPropertyChangedEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 propertyName:(SmartPointer<EtchString>*)arg2 ident:(SmartPointer<EtchString>*)arg3 intervalLimit:(SmartPointer<EtchInt32>*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)cds_removePropertyChangedEventHandlerWithHandle:(SmartPointer<EtchInt32>*)arg1 propertyName:(SmartPointer<EtchString>*)arg2 ident:(SmartPointer<EtchString>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)cds_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)av_createWithToken:(SmartPointer<EtchString>*)arg1 instanceID:(SmartPointer<EtchInt32>*)arg2 identifier:(SmartPointer<EtchString>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)av_requestConnectionWithHandle:(SmartPointer<EtchInt32>*)arg1 connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)av_playerStateChangedWithHandle:(SmartPointer<EtchInt32>*)arg1 connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>*)arg2 playerState:(SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)av_closeConnectionWithHandle:(SmartPointer<EtchInt32>*)arg1 connectionType:(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)av_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)voice_createWithDeviceId:(SmartPointer<EtchString>*)arg1 bluetoothAddress:(SmartPointer<EtchNativeArray<signed char> >*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)voice_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)voice_requestSessionWithHandle:(SmartPointer<EtchInt32>*)arg1 priority:(SmartPointer<de_bmw_idrive_BMWRemoting::VoicePriorityType>*)arg2 filterType:(SmartPointer<EtchHashTable<capu::SmartPointer<EtchObject>, capu::SmartPointer<EtchObject>, EtchComparator<capu::SmartPointer<EtchObject> >, EtchObjectHash> >*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)voice_stopSessionWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)log_createWithToken:(SmartPointer<EtchString>*)arg1 name:(SmartPointer<EtchString>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)log_logWithHandle:(SmartPointer<EtchInt32>*)arg1 level:(SmartPointer<de_bmw_idrive_BMWRemoting::LogLevel>*)arg2 message:(SmartPointer<EtchString>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)log_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchObject> >*)diag_echoWithData:(SmartPointer<EtchObject>*)arg1 mode:(SmartPointer<EtchInt32>*)arg2 parameter:(SmartPointer<EtchInt32>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)diag_perf_startWithMode:(SmartPointer<EtchInt32>*)arg1 data:(SmartPointer<EtchObject>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)diag_perf_onewayWithData:(SmartPointer<EtchObject>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)diag_perf_twowayWithData:(SmartPointer<EtchObject>*)arg1 ;
-(SmartPointer<EtchAsyncResult<EtchObject> >*)diag_perf_end;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)pia_createWithToken:(SmartPointer<EtchString>*)arg1 deviceId:(SmartPointer<EtchString>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)pia_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)pia_requestWithHandle:(SmartPointer<EtchInt32>*)arg1 data:(SmartPointer<EtchNativeArray<signed char> >*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)pia_importWithHandle:(SmartPointer<EtchInt32>*)arg1 data:(SmartPointer<EtchNativeArray<signed char> >*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)pia_exportResultWithHandle:(SmartPointer<EtchInt32>*)arg1 success:(SmartPointer<EtchBool>*)arg2 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)map_create;
-(SmartPointer<EtchAsyncResultNone>*)map_disposeWithHandle:(SmartPointer<EtchInt32>*)arg1 ;
-(SmartPointer<EtchAsyncResultNone>*)map_highlightWithHandle:(SmartPointer<EtchInt32>*)arg1 filename:(SmartPointer<EtchString>*)arg2 overlayId:(SmartPointer<EtchShort>*)arg3 location:(SmartPointer<EtchString>*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)map_showOverlayWithHandle:(SmartPointer<EtchInt32>*)arg1 filename:(SmartPointer<EtchString>*)arg2 overlayId:(SmartPointer<EtchShort>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)map_hideOverlayWithHandle:(SmartPointer<EtchInt32>*)arg1 filename:(SmartPointer<EtchString>*)arg2 overlayId:(SmartPointer<EtchShort>*)arg3 ;
-(SmartPointer<EtchAsyncResultNone>*)map_removeWithHandle:(SmartPointer<EtchInt32>*)arg1 filename:(SmartPointer<EtchString>*)arg2 ;
-(SmartPointer<EtchAsyncResultNone>*)map_setModeWithHandle:(SmartPointer<EtchInt32>*)arg1 mode:(SmartPointer<de_bmw_idrive_BMWRemoting::MapMode>*)arg2 ;
-(SmartPointer<EtchAsyncResult<EtchInt32> >*)map_initializeImportWithHandle:(SmartPointer<EtchInt32>*)arg1 transferId:(SmartPointer<EtchInt32>*)arg2 filename:(SmartPointer<EtchString>*)arg3 size:(SmartPointer<EtchInt32>*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)map_importDataWithHandle:(SmartPointer<EtchInt32>*)arg1 transferId:(SmartPointer<EtchInt32>*)arg2 seq:(SmartPointer<EtchInt32>*)arg3 data:(SmartPointer<EtchNativeArray<signed char> >*)arg4 ;
-(SmartPointer<EtchAsyncResultNone>*)map_abortImportWithHandle:(SmartPointer<EtchInt32>*)arg1 transferId:(SmartPointer<EtchInt32>*)arg2 reason:(SmartPointer<EtchInt32>*)arg3 ;
-(void)dealloc;
-(int)stop;
-(int)start;
-(void)destroyServer;
@end

