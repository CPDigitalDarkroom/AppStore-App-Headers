/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:45:22 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D2238F36-ED84-40F4-9CB2-8C71CACC8B47/Spotify.app/Spotify
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol IDEtchSessionHmiDelegate, IDEtchSessionAudioDelegate, IDEtchSessionCdsDelegate, IDEtchSessionPiaDelegate, IDEtchSessionApplicationManagementDelegate;
#import <Spotify/Spotify-Structs.h>
@class NSOperationQueue, NSUUID, IDRemoteBMWRemotingServerAdapter;

@interface IDEtchSession : NSObject {

	IDEtchSessionCppAdaptor* _adaptor;
	int _sessionState;
	id<IDEtchSessionHmiDelegate> _hmiDelegate;
	id<IDEtchSessionAudioDelegate> _audioDelegate;
	id<IDEtchSessionCdsDelegate> _cdsDelegate;
	id<IDEtchSessionPiaDelegate> _piaDelegate;
	id<IDEtchSessionApplicationManagementDelegate> _applicationManagementDelegate;
	NSOperationQueue* _delegateQueue;
	NSUUID* _sessionIdentifier;
	IDRemoteBMWRemotingServerAdapter* _remoteServerAdaptor;

}

@property (assign) int sessionState;                                                                          //@synthesize sessionState=_sessionState - In the implementation block
@property (__weak) id<IDEtchSessionHmiDelegate> hmiDelegate;                                                  //@synthesize hmiDelegate=_hmiDelegate - In the implementation block
@property (__weak) id<IDEtchSessionAudioDelegate> audioDelegate;                                              //@synthesize audioDelegate=_audioDelegate - In the implementation block
@property (__weak) id<IDEtchSessionCdsDelegate> cdsDelegate;                                                  //@synthesize cdsDelegate=_cdsDelegate - In the implementation block
@property (__weak) id<IDEtchSessionPiaDelegate> piaDelegate;                                                  //@synthesize piaDelegate=_piaDelegate - In the implementation block
@property (__weak) id<IDEtchSessionApplicationManagementDelegate> applicationManagementDelegate;              //@synthesize applicationManagementDelegate=_applicationManagementDelegate - In the implementation block
@property (retain) NSOperationQueue * delegateQueue;                                                          //@synthesize delegateQueue=_delegateQueue - In the implementation block
@property (readonly) NSUUID * sessionIdentifier;                                                              //@synthesize sessionIdentifier=_sessionIdentifier - In the implementation block
@property (retain) IDRemoteBMWRemotingServerAdapter * remoteServerAdaptor;                                    //@synthesize remoteServerAdaptor=_remoteServerAdaptor - In the implementation block
+(void)initialize;
-(id)authChallengeForCertificate:(id)arg1 error:(id*)arg2 ;
-(char)loginWithSignedChallenge:(id)arg1 error:(id*)arg2 ;
-(void)setApplicationManagementDelegate:(id<IDEtchSessionApplicationManagementDelegate>)arg1 ;
-(char)applicationManagementService:(int)arg1 disposeWithError:(id*)arg2 ;
-(void)applicationManagementService:(int)arg1 registerAppId:(id)arg2 variantMap:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)applicationManagementService:(int)arg1 addEventHandlerAppId:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)applicationManagementService:(int)arg1 removeEventHandlerAppId:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)audioService:(int)arg1 requestConnectionOfType:(int)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)audioService:(int)arg1 closeConnectionOfType:(int)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)audioService:(int)arg1 confirmPlayerState:(int)arg2 forConnectionOfType:(int)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)cdsService:(int)arg1 bindProperty:(id)arg2 refreshInterval:(unsigned)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)cdsService:(int)arg1 unbindProperty:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)cdsService:(int)arg1 requestProperty:(id)arg2 requestIdentifier:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)cdsService:(int)arg1 setProperty:(id)arg2 value:(id)arg3 requestIdentifier:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)handleEvent:(int)arg1 uniqueIdentifier:(id)arg2 appIdentifier:(id)arg3 applicationManagementServiceEvent:(int)arg4 ;
-(char)isValidConnectionType:(int)arg1 ;
-(id)invalidValueErrorForParameter:(id)arg1 callName:(id)arg2 ;
-(SmartPointer<de_bmw_idrive_BMWRemoting::AVConnectionType>*)avConnectionTypeWithIDAudioConnectionType:(int)arg1 ;
-(char)isValidPlayerState:(int)arg1 ;
-(SmartPointer<de_bmw_idrive_BMWRemoting::AVPlayerState>*)avPlayerStateWithIDAudioPlayerState:(int)arg1 ;
-(char)audioService:(int)arg1 confirmPlayerState:(int)arg2 forConnectionOfType:(int)arg3 error:(id*)arg4 ;
-(void)handleConnectionGranted:(int)arg1 connectionType:(int)arg2 ;
-(void)handleConnectionDeactivated:(int)arg1 connectionType:(int)arg2 ;
-(void)handleConnectionDenied:(int)arg1 connectionType:(int)arg2 ;
-(void)handleMultimediaButtonEvent:(int)arg1 audioButtonEvent:(int)arg2 ;
-(void)handlePlayerStateChanged:(int)arg1 audioConnectionType:(int)arg2 audioPlayerState:(int)arg3 ;
-(char)updateCertificateRevocationList:(id)arg1 error:(id*)arg2 ;
-(char)cdsService:(int)arg1 requestProperty:(id)arg2 requestIdentifier:(id)arg3 error:(id*)arg4 ;
-(char)cdsService:(int)arg1 bindProperty:(id)arg2 refreshInterval:(unsigned)arg3 error:(id*)arg4 ;
-(char)cdsService:(int)arg1 unbindProperty:(id)arg2 error:(id*)arg3 ;
-(char)cdsService:(int)arg1 setProperty:(id)arg2 value:(id)arg3 requestIdentifier:(id)arg4 error:(id*)arg5 ;
-(void)handlePropertyChanged:(int)arg1 uniqueIdentifier:(id)arg2 propertyName:(id)arg3 propertyValue:(id)arg4 ;
-(id)stringWithRhmiVersion:(int)arg1 ;
-(SmartPointer<de_bmw_idrive_BMWRemoting::RHMIVersion>*)rhmiVersionWithIDRhmiVersion:(int)arg1 ;
-(int)registerHmiServiceWithIdentifier:(id)arg1 name:(id)arg2 vendor:(id)arg3 versionInfo:(id)arg4 error:(id*)arg5 ;
-(void)registerHmiServiceWithIdentifier:(id)arg1 name:(id)arg2 vendor:(id)arg3 versionInfo:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)hmiService:(int)arg1 setHmiResource:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)hmiService:(int)arg1 hmiCapabilitiesWithCompletionHandler:(/*^block*/id)arg2 ;
-(void)handleActionEvent:(int)arg1 uniqueIdentifier:(id)arg2 actionIdentifier:(int)arg3 actionInfo:(id)arg4 ;
-(void)handleHmiEvent:(int)arg1 uniqueIdentifier:(id)arg2 componentIdentifier:(int)arg3 eventIdentifier:(int)arg4 eventInfo:(id)arg5 ;
-(void)handlePiaEvent:(int)arg1 piaEvent:(int)arg2 payload:(id)arg3 ;
-(void)setupEtchRuntime;
-(void)teardownEtchRuntime;
-(char)createRemoteServerWithUrl:(id)arg1 ;
-(char)startRemoteServer;
-(char)stopRemoteServer;
-(void)destroyRemoteServer;
-(IDRemoteBMWRemotingServerAdapter *)remoteServerAdaptor;
-(id)wrongStateErrorForCall:(id)arg1 ;
-(id)nilParameterErrorForParameter:(id)arg1 callName:(id)arg2 ;
-(id)etchExceptionError:(id)arg1 forCall:(id)arg2 ;
-(id)stringFromRemotingWrapperState:(int)arg1 ;
-(void)handleSessionNotStartedForCall:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)handleNilValueForParameter:(id)arg1 callName:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)processAsyncResultNone:(SmartPointer<EtchAsyncResultNone>*)arg1 callName:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(id<IDEtchSessionHmiDelegate>)hmiDelegate;
-(id<IDEtchSessionAudioDelegate>)audioDelegate;
-(id<IDEtchSessionCdsDelegate>)cdsDelegate;
-(id<IDEtchSessionPiaDelegate>)piaDelegate;
-(id<IDEtchSessionApplicationManagementDelegate>)applicationManagementDelegate;
-(void)setRemoteServerAdaptor:(IDRemoteBMWRemotingServerAdapter *)arg1 ;
-(char)hmiService:(int)arg1 startRemoteHmiWitherror:(id*)arg2 ;
-(char)hmiService:(int)arg1 checkAvailabilityOfResource:(id)arg2 error:(id*)arg3 ;
-(char)hmiService:(int)arg1 setHmiResource:(id)arg2 error:(id*)arg3 ;
-(void)hmiService:(int)arg1 updateDataModel:(int)arg2 variantData:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)hmiService:(int)arg1 updateTable:(int)arg2 tableData:(id)arg3 rows:(NSRange)arg4 columns:(NSRange)arg5 totalRows:(unsigned)arg6 totalColumns:(unsigned)arg7 completionHandler:(/*^block*/id)arg8 ;
-(void)hmiService:(int)arg1 updateProperty:(int)arg2 forComponent:(int)arg3 variantMap:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)hmiService:(int)arg1 triggerHmiEvent:(unsigned)arg2 parameterMap:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(char)hmiService:(int)arg1 confirmActionEvent:(int)arg2 error:(id*)arg3 ;
-(char)piaService:(int)arg1 requestWithData:(id)arg2 error:(id*)arg3 ;
-(char)piaService:(int)arg1 importData:(id)arg2 error:(id*)arg3 ;
-(char)piaService:(int)arg1 exportResult:(char)arg2 error:(id*)arg3 ;
-(char)piaService:(int)arg1 disposeWithError:(id*)arg2 ;
-(int)registerAudioServiceWithApplicationIdentifier:(id)arg1 auxiliaryInput:(unsigned short)arg2 error:(id*)arg3 ;
-(void)setAudioDelegate:(id<IDEtchSessionAudioDelegate>)arg1 ;
-(int)registerHmiServiceWithIdentifier:(id)arg1 name:(id)arg2 vendor:(id)arg3 versionInfo:(id)arg4 rhmiVersion:(int)arg5 error:(id*)arg6 ;
-(char)hmiService:(int)arg1 addActionEventHandlerWithError:(id*)arg2 ;
-(char)hmiService:(int)arg1 addHmiEventHandlerWithError:(id*)arg2 ;
-(id)hmiService:(int)arg1 hmiCapabilitiesWitherror:(id*)arg2 ;
-(void)setHmiDelegate:(id<IDEtchSessionHmiDelegate>)arg1 ;
-(int)registerCdsServiceWithError:(id*)arg1 ;
-(void)setCdsDelegate:(id<IDEtchSessionCdsDelegate>)arg1 ;
-(int)registerPiaServiceWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(void)setPiaDelegate:(id<IDEtchSessionPiaDelegate>)arg1 ;
-(int)registerApplicationManagementServiceWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(char)startSessionWithUrl:(id)arg1 ;
-(id)systemInfoWithError:(id*)arg1 ;
-(id)cdsVersionInfoWithError:(id*)arg1 ;
-(id)etchVersionInfoWithError:(id*)arg1 ;
-(NSOperationQueue *)delegateQueue;
-(void)dealloc;
-(id)init;
-(id)description;
-(NSUUID *)sessionIdentifier;
-(void)setDelegateQueue:(NSOperationQueue *)arg1 ;
-(void)stopSession;
-(void)setSessionState:(int)arg1 ;
-(int)sessionState;
@end

