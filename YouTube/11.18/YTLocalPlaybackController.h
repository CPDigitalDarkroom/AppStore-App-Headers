/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:28 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/YouTube-Structs.h>
#import <YouTube/YTAudioTrackSwitchDelegate.h>
#import <YouTube/YTPlaybackBackgroundTaskControllerDelegate.h>
#import <YouTube/YTPlaybackTrackingControllerDelegate.h>
#import <YouTube/YTPlayerRequestBuilderDelegate.h>
#import <YouTube/YTReachabilityObserver.h>
#import <YouTube/YTVideoQualitySwitchDelegate.h>
#import <YouTube/MLPlayerDelegate.h>
#import <YouTube/YTAdsPlaybackCoordinatorDelegate.h>
#import <YouTube/YTPlaybackController.h>
#import <YouTube/YTLicenseCheckerDelegate.h>
#import <YouTube/YTLiveStreamStatusCheckerDelegate.h>
#import <YouTube/YTContentVideoPlayerOverlayDelegate.h>
#import <YouTube/YTFadePlayerOverlayDelegate.h>
#import <YouTube/YTPlayerViewDelegate.h>
#import <YouTube/YTRestrictedContentFlowDelegate.h>
#import <YouTube/YTSystemNotificationsObserver.h>
#import <YouTube/YTTotalMediaTimeProvider.h>
#import <YouTube/YTVisibilityProvider.h>

@protocol YTPlayerOverlayFactory, YTPlayerOverlayProtocol, YTContentVideoPlayerOverlayProtocol, YTVideoPlayerOverlayProtocol, YTFadePlayerOverlay, YTPlayerViewControllerConfig, YTPlayerTransition, YTPlayerServices, YTPlayerOfflineServices, YTDataServices, MLServices, YTPlaybackControllerAutoplayDelegate, YTPlaybackControllerEventsDelegate, YTResponder, YTPlaybackControllerUIDelegate, YTAdsPlaybackCoordinator;
@class YTPlayerMacroState, UIApplication, YTPlayerViewControllerContentPlayerState, YTSingleVideoPlayer, MLPlayerPool, UIViewController, YTPlayerView, YTLiveStreamStatusChecker, YTLicenseChecker, YTRestrictedContentFlow, NSObject, YTVSSControllerState, YTPlayerRequestBuilder, YTPlaybackData, NSError, NSDate, YTVSSController, YTPlaybackTrackingController, YTQoEController, YTSpeedyGController, YTStoryboardController, NSTimer, YTPlaybackBackgroundTaskController, YTAudioSession, YTBackgroundabilityPolicy, YTIWatchNextResponse, YTAudioTrackSwitchController, YTVideoQualitySwitchController, NSString;

@interface YTLocalPlaybackController : NSObject <YTAudioTrackSwitchDelegate, YTPlaybackBackgroundTaskControllerDelegate, YTPlaybackTrackingControllerDelegate, YTPlayerRequestBuilderDelegate, YTReachabilityObserver, YTVideoQualitySwitchDelegate, MLPlayerDelegate, YTAdsPlaybackCoordinatorDelegate, YTPlaybackController, YTLicenseCheckerDelegate, YTLiveStreamStatusCheckerDelegate, YTContentVideoPlayerOverlayDelegate, YTFadePlayerOverlayDelegate, YTPlayerViewDelegate, YTRestrictedContentFlowDelegate, YTSystemNotificationsObserver, YTTotalMediaTimeProvider, YTVisibilityProvider> {

	UIApplication* _sharedApplication;
	int _state;
	YTPlayerViewControllerContentPlayerState* _contentPlayerState;
	YTSingleVideoPlayer* _singleVideoPlayer;
	MLPlayerPool* _playerPool;
	UIViewController* _parentViewController;
	YTPlayerView* _playerView;
	id<YTPlayerOverlayFactory> _playerOverlayFactory;
	UIViewController*<YTPlayerOverlayProtocol> _activePlayerOverlay;
	UIViewController*<YTContentVideoPlayerOverlayProtocol> _contentVideoPlayerOverlay;
	UIViewController*<YTVideoPlayerOverlayProtocol> _adLoadingOverlay;
	UIViewController*<YTFadePlayerOverlay> _fadeOverlay;
	YTLiveStreamStatusChecker* _liveStreamStatusChecker;
	YTLicenseChecker* _licenseChecker;
	double _savedMediaTime;
	YTRestrictedContentFlow* _restrictedContentFlow;
	unsigned _playerRequestID;
	NSObject*<YTPlayerViewControllerConfig> _config;
	YTVSSControllerState* _adVSSState;
	id<YTPlayerTransition> _playerTransition;
	YTPlayerRequestBuilder* _requestBuilder;
	YTPlaybackData* _contentPlaybackData;
	YTPlaybackData* _adPlaybackData;
	YTPlaybackData* _adIntroPlaybackData;
	NSError* _error;
	char _shouldResumePlaybackWhenActive;
	char _hasFocus;
	char _wasPlayingBeforeSuspend;
	char _userScrubbing;
	char _startPlayback;
	char _playbackInSyncWithLivePlayhead;
	NSDate* _backgroundabilityUpsellExpiry;
	char _backgroundabilityUpsellShown;
	char _showBackgroundOnboardingHint;
	char _appInBackground;
	float _expansionCoefficient;
	unsigned _consecutiveFailedPlaybacks;
	char _inlinePlaybackActive;
	int _inlinePlaybackLayout;
	char _audioOnlyModeActive;
	char _userAudioOnlyModeActive;
	char _audioFromNonBuiltInSpeaker;
	char _audioFromVSSCapableDevice;
	char _audioCastingActive;
	char _performedDidBecomeActiveLogic;
	id<YTPlayerServices> _playerServices;
	id<YTPlayerOfflineServices> _playerOfflineServices;
	id<YTDataServices> _dataServices;
	id<MLServices> _mediaServices;
	YTVSSController* _vssController;
	YTPlaybackTrackingController* _playbackTrackingController;
	YTQoEController* _QoEController;
	YTSpeedyGController* _speedyGController;
	YTStoryboardController* _storyboardController;
	int _playerViewLayout;
	double _seekTime;
	NSTimer* _seekDebounceTimer;
	NSDate* _timeSinceLastScrub;
	YTPlaybackBackgroundTaskController* _backgroundTaskController;
	YTAudioSession* _audioSession;
	YTBackgroundabilityPolicy* _backgroundabilityPolicy;
	YTIWatchNextResponse* _watchNextResponse;
	char _hasNextVideo;
	char _hasPreviousVideo;
	char _playlistControlsHidden;
	char _transitioningPlayerViewLayout;
	char _externalPlaybackActive;
	UIViewController*<YTVideoPlayerOverlayProtocol> _activeVideoPlayerOverlay;
	YTAudioTrackSwitchController* _audioTrackController;
	id<YTPlaybackControllerAutoplayDelegate> _autoplayDelegate;
	id<YTPlaybackControllerEventsDelegate> _eventsDelegate;
	id<YTResponder> _parentResponder;
	id<YTPlaybackControllerUIDelegate> _UIDelegate;
	YTVideoQualitySwitchController* _videoQualityController;
	id<YTAdsPlaybackCoordinator> _adsPlaybackCoordinator;

}

@property (assign,getter=isExternalPlaybackActive,nonatomic) char externalPlaybackActive;                             //@synthesize externalPlaybackActive=_externalPlaybackActive - In the implementation block
@property (nonatomic,readonly) id<YTAdsPlaybackCoordinator> adsPlaybackCoordinator;                                   //@synthesize adsPlaybackCoordinator=_adsPlaybackCoordinator - In the implementation block
@property (nonatomic,readonly) id<YTDataServices> dataServices;                                                       //@synthesize dataServices=_dataServices - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) YTPlayerMacroState * lastKnownAdPlayerMacroState; 
@property (nonatomic,readonly) YTPlayerMacroState * contentPlayerMacroState; 
@property (nonatomic,readonly) id<YTInstreamAd> currentAd; 
@property (nonatomic,readonly) int playerState; 
@property (nonatomic,readonly) YTAudioTrackSwitchController * audioTrackController;                                   //@synthesize audioTrackController=_audioTrackController - In the implementation block
@property (nonatomic,readonly) YTVideoQualitySwitchController * videoQualityController;                               //@synthesize videoQualityController=_videoQualityController - In the implementation block
@property (nonatomic,__weak,readonly) id<YTResponder> parentResponder;                                                //@synthesize parentResponder=_parentResponder - In the implementation block
@property (assign,nonatomic,__weak) id<YTPlaybackControllerAutoplayDelegate> autoplayDelegate;                        //@synthesize autoplayDelegate=_autoplayDelegate - In the implementation block
@property (assign,nonatomic,__weak) id<YTPlaybackControllerEventsDelegate> eventsDelegate;                            //@synthesize eventsDelegate=_eventsDelegate - In the implementation block
@property (assign,nonatomic,__weak) id<YTPlaybackControllerUIDelegate> UIDelegate;                                    //@synthesize UIDelegate=_UIDelegate - In the implementation block
@property (nonatomic,readonly) NSString * videoID; 
@property (getter=isCurrentVideoVertical,nonatomic,readonly) char currentVideoVertical; 
@property (nonatomic,readonly) int state;                                                                             //@synthesize state=_state - In the implementation block
@property (nonatomic,readonly) char isPlayingAd; 
@property (nonatomic,readonly) char isPlayingAdSurvey; 
@property (nonatomic,readonly) char isPlayingAdIntro; 
@property (assign,nonatomic) char playlistControlsHidden;                                                             //@synthesize playlistControlsHidden=_playlistControlsHidden - In the implementation block
@property (assign,nonatomic) char hasPreviousVideo;                                                                   //@synthesize hasPreviousVideo=_hasPreviousVideo - In the implementation block
@property (assign,nonatomic) char hasNextVideo;                                                                       //@synthesize hasNextVideo=_hasNextVideo - In the implementation block
@property (assign,getter=isTransitioningPlayerViewLayout,nonatomic) char transitioningPlayerViewLayout;               //@synthesize transitioningPlayerViewLayout=_transitioningPlayerViewLayout - In the implementation block
@property (nonatomic,readonly) UIViewController*<YTVideoPlayerOverlayProtocol> activeVideoPlayerOverlay;              //@synthesize activeVideoPlayerOverlay=_activeVideoPlayerOverlay - In the implementation block
-(void)handleRemoteControlEvent:(int)arg1 ;
-(id<YTResponder>)parentResponder;
-(char)hasNextVideo;
-(char)hasPreviousVideo;
-(void)appDidBecomeActive:(id)arg1 ;
-(void)appDidEnterBackground:(id)arg1 ;
-(void)appWillResignActive:(id)arg1 ;
-(void)appWillTerminate:(id)arg1 ;
-(void)appDidReceiveAudioRouteChange;
-(id<YTDataServices>)dataServices;
-(id)playerResponse;
-(void)restrictedContentFlowDidComplete;
-(void)restrictedContentFlowDidFailWithError:(id)arg1 ;
-(void)restrictedContentFlowConfirmationDidCancel;
-(id)playerRequestForVideoID:(id)arg1 ;
-(void)setAutoplayDelegate:(id<YTPlaybackControllerAutoplayDelegate>)arg1 ;
-(id<YTPlaybackControllerAutoplayDelegate>)autoplayDelegate;
-(void)replay;
-(void)activeCaptionTrackDidChange:(id)arg1 ;
-(void)setMarkers:(id)arg1 ;
-(void)setWatchNextResponse:(id)arg1 ;
-(void)setAutonavController:(id)arg1 ;
-(char)arePlayerControlsHidden;
-(char)isContentPanAllowed;
-(void)setPlaylistControlsHidden:(char)arg1 ;
-(void)setHasPreviousVideo:(char)arg1 ;
-(void)setHasNextVideo:(char)arg1 ;
-(void)setInlinePlaybackLayout:(int)arg1 ;
-(void)setExpansionCoefficient:(float)arg1 ;
-(void)setPlayerViewLayout:(int)arg1 ;
-(int)playerViewLayout;
-(void)setPlaybackInSyncWithLivePlayhead:(char)arg1 ;
-(void)setEventsDelegate:(id<YTPlaybackControllerEventsDelegate>)arg1 ;
-(void)loadWithPlayerTransition:(id)arg1 startPlayback:(char)arg2 ;
-(id)currentVideoID;
-(void)showAddToMenuFromView:(id)arg1 ;
-(void)didPressCardboardButton;
-(void)didStartScrubbing;
-(void)didEndScrubbing;
-(void)didPressToggleFullscreen;
-(void)didPressLiveSync;
-(void)didTogglePlayPause;
-(void)didPressPlayerBarNext;
-(void)didPressPlayerBarReplay;
-(char)isCurrentVideoVertical;
-(NSString *)videoID;
-(YTPlayerMacroState *)contentPlayerMacroState;
-(id)visibilityString;
-(void)reachabilityDidChange;
-(void)didPressPlay;
-(void)didPressPause;
-(void)didPressReplay;
-(void)didScrubToTime:(double)arg1 ;
-(id)playbackDebugData;
-(void)didPressCompanionAd;
-(void)setTransitioningPlayerViewLayout:(char)arg1 ;
-(id)currentVideoCPN;
-(double)contentVideoMediaTime;
-(double)currentVideoMediaTime;
-(char)shouldAutoplayForFailedPlayback;
-(char)consecutiveFailedPlaybacksBelowAcceptanceThreshold;
-(void)autoplayForUnplayablePlayerResponseDidFail;
-(char)shouldAutoplayForFinishedVideo;
-(void)prepareToLoadWithPlayerTransition:(id)arg1 ;
-(void)switchToInlinePlayback:(char)arg1 ;
-(void)resetToLoading;
-(char)isInlinePlaybackActive;
-(void)suspendPlayback;
-(void)resumePlayback;
-(char)isPlayingAd;
-(id<YTInstreamAd>)currentAd;
-(void)loadCompanionAd:(id)arg1 ;
-(id)nextPlayerTransitionForAutoplay;
-(void)setSharedApplication:(id)arg1 ;
-(void)resetActiveOverlayToNewAdLoadingOverlay;
-(void)playMidrollAdInterrupt:(id)arg1 ;
-(void)haltCurrentAdPlaybackWithError:(id)arg1 ;
-(id)playbackContextForAd;
-(void)currentMediaTimeDidChangeToTime:(double)arg1 ;
-(double)totalMediaTime;
-(void)suspendMainVideo;
-(void)didFinishWithAdInterrupt:(id)arg1 hideCompanionAd:(char)arg2 ;
-(YTAudioTrackSwitchController *)audioTrackController;
-(YTVideoQualitySwitchController *)videoQualityController;
-(void)didDismissModal;
-(void)didEndFadeFromContentVideoWithAdInterrupt:(id)arg1 ;
-(void)didEndFadeToContentVideo;
-(YTPlayerMacroState *)lastKnownAdPlayerMacroState;
-(void)willLoseFocus;
-(void)loadWithPlayerTransition:(id)arg1 startPlayback:(char)arg2 initialMediaTime:(double)arg3 ;
-(void)didGainFocus;
-(id)selectedAudioTrack;
-(char)shouldReloadPlayerResponse;
-(void)reloadPlayerResponseAndSaveMediaTime:(char)arg1 startPlayback:(char)arg2 ;
-(void)playerStateDidChangeToPlaying;
-(id)restorableState;
-(void)restoreToState:(id)arg1 startPlayback:(char)arg2 ;
-(id)contentVideoState;
-(void)setUserAudioOnlyModeActive:(char)arg1 ;
-(id<YTPlaybackControllerEventsDelegate>)eventsDelegate;
-(char)isPlayingAdSurvey;
-(char)isPlayingAdIntro;
-(char)playlistControlsHidden;
-(char)isTransitioningPlayerViewLayout;
-(UIViewController*<YTVideoPlayerOverlayProtocol>)activeVideoPlayerOverlay;
-(void)setActiveVideoPlayerOverlayMediaTime:(double)arg1 ;
-(void)audioTrackDidChange:(id)arg1 ;
-(void)setAudioTrackController:(YTAudioTrackSwitchController *)arg1 ;
-(id)initWithPlayerServices:(id)arg1 playerOfflineServices:(id)arg2 dataServices:(id)arg3 mediaServices:(id)arg4 config:(id)arg5 parentResponder:(id)arg6 overlayFactory:(id)arg7 playerView:(id)arg8 parentViewController:(id)arg9 ;
-(char)isPrefetchForPlaylistEnabled;
-(void)didPressCardboardBackButton;
-(void)hideTapToKeepWatching;
-(void)reportEventToQoE:(id)arg1 ;
-(void)activateOverlay:(id)arg1 updatePlayerView:(char)arg2 ;
-(void)resetPlayerWithReturnToPool:(char)arg1 ;
-(void)resetContentPlayerState;
-(id)resetServicesWithAllowResume:(char)arg1 ;
-(id)currentPlayerState;
-(id)contentStateFromTransition;
-(void)applyContentVideoPlaybackData:(id)arg1 incrementAutoplays:(char)arg2 startPlayback:(char)arg3 allowAutoplayIfUnplayable:(char)arg4 ;
-(void)makeOfflineVideoRequestWithPlaybackDataBlock:(/*^block*/id)arg1 errorBlock:(/*^block*/id)arg2 ;
-(void)makePlayerRequestWithExpiredPlaybackData:(id)arg1 playbackDataBlock:(/*^block*/id)arg2 errorBlock:(/*^block*/id)arg3 ;
-(void)sendTimingEventWithType:(int)arg1 data:(id)arg2 ;
-(void)setContentPlaybackData:(id)arg1 ;
-(char)canHandlePlayerResponseForApplicationState;
-(void)launchRestrictedContentFlowOrInitializePlaybackWithStartPlayback:(char)arg1 ;
-(void)prepareContentOverlay;
-(void)updateActivePlayerOverlayTimes;
-(void)updatePlayerViewWithActivePlayerOverlay;
-(void)playIfPermitted;
-(void)initializeAudioController;
-(void)loadContentVideoPlaybackDataWithExpiredPlaybackData:(id)arg1 incrementAutoplays:(char)arg2 startPlayback:(char)arg3 allowAutoplayIfUnplayable:(char)arg4 ;
-(void)resetToState:(int)arg1 forNewPlayback:(char)arg2 ;
-(char)isVideoFinished;
-(char)isCurrentVideoLiveStreamWithStatusChecker;
-(void)failWithReset:(char)arg1 error:(id)arg2 ;
-(void)setLiveSyncStateWithPlayerState:(int)arg1 ;
-(void)updateLockScreenController;
-(void)initializePlayback;
-(double)adVideoMediaTime;
-(CGSize)playerSizeInPixels;
-(void)playbackDidFailWithError:(id)arg1 ;
-(void)reloadLiveStream;
-(void)performDebouncedSeekIfNeeded;
-(void)adPlaybackDidStop;
-(void)playerStateDidChangeToReadyToPlay;
-(void)playerStateDidChangeToPaused;
-(void)playerStateDidChangeToFinished;
-(void)playerStateDidChangeToLoadingContent;
-(void)playerStateDidChangeToError;
-(void)loadPlayerWithPlaybackData:(id)arg1 initialMediaTime:(double)arg2 ;
-(char)detectAirplayAdSkipWithCurrentMediaTime:(double)arg1 ;
-(void)resetAdOverlayAndActivateAfterInlinePlaybackSwitch;
-(void)resetContentOverlayAndActivateAfterInlinePlaybackSwitch;
-(void)clearOverlay:(id)arg1 ;
-(id)playerViewportSize;
-(void)stopBackgroundPlayback;
-(void)maybeStopBackgroundPlayback;
-(void)maybePerformDidBecomeActiveLogic;
-(void)showBackgroundabilityUpsell;
-(void)showBackgroundOnboardingHint;
-(void)performDidBecomeActiveLogic;
-(void)adIntroPlaybackDidStop;
-(void)startLiveStreamStatusChecker;
-(void)setPlayerViewControllerState:(int)arg1 ;
-(void)loadAdThenMainVideo;
-(void)loadOrRestoreMainVideo;
-(void)loadAdIntro;
-(void)clearActivePlayerOverlay;
-(void)playAdInterrupt:(id)arg1 ;
-(void)startCPNServicesWithPlaybackData:(id)arg1 playbackLoggingState:(id)arg2 adInterrupt:(id)arg3 ;
-(void)activatePlayer;
-(void)updateOverlayNerdStatsDataWithCPN:(id)arg1 ;
-(char)canResumePlayback;
-(void)stateDidChangeFromState:(int)arg1 toState:(int)arg2 ;
-(void)applyWatchNextResponse;
-(id)currentVideoState;
-(char)maybeInitFadeOverlay;
-(void)setVRModeActive:(char)arg1 ;
-(void)reloadPlayerAndStartPlayback:(char)arg1 ;
-(id)contentOrTrailerStateWithMediaTime:(double)arg1 finished:(char)arg2 ;
-(id)adStateWithType:(int)arg1 playbackData:(id)arg2 finished:(char)arg3 ;
-(void)storeCrashReportPlaybackData;
-(void)playbackBackgroundTaskIsExpiring;
-(void)videoQualitySwitchDidSelectFormatConstraint:(id)arg1 ;
-(void)bufferedMediaTimeDidChangeToTime:(double)arg1 ;
-(void)seekableTimeRangeDidChangeToMinimumTime:(double)arg1 maximumTime:(double)arg2 ;
-(void)playerHasSelectableFormats:(id)arg1 ;
-(void)playerDidSelectVideoFormat:(id)arg1 audioFormat:(id)arg2 percentCached:(float)arg3 ;
-(void)playerForegroundAudioOnlyPlaybackReasonDidChange:(int)arg1 ;
-(char)canReloadStreamingData;
-(void)reloadStreamingDataAndStartPlayback:(char)arg1 ;
-(id)licenseChecker;
-(char)shouldResumePlaybackWhenActive;
-(void)flushStatsServices;
-(void)setVideoQualityController:(YTVideoQualitySwitchController *)arg1 ;
-(void)setBackgroundabilityPolicy:(id)arg1 ;
-(id<YTAdsPlaybackCoordinator>)adsPlaybackCoordinator;
-(id)selectedVideoFormat;
-(void)viewportSizeDidChange;
-(void)playerViewDidPinchToSmallscreen;
-(void)playerViewDidPinchToFullscreen;
-(char)pluggedInOnly;
-(void)licenseChecker:(id)arg1 failedHeartbeatForVideoID:(id)arg2 withError:(id)arg3 ;
-(void)liveStreamStatusDidChangeWithStatusChecker:(id)arg1 forVideoID:(id)arg2 ;
-(char)isExternalPlaybackActive;
-(id)playerView;
-(void)failWithError:(id)arg1 ;
-(void)setVolume:(float)arg1 ;
-(void)appWillEnterForeground:(id)arg1 ;
-(void)dealloc;
-(int)state;
-(id)sharedApplication;
-(void)reset;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setUIDelegate:(id<YTPlaybackControllerUIDelegate>)arg1 ;
-(char)accessibilityPerformMagicTap;
-(void)audioRouteDidChange:(char)arg1 ;
-(void)togglePlayPause;
-(void)seekToEnd;
-(id)playerStatus;
-(int)playerState;
-(int)visibility;
-(void)setExternalPlaybackActive:(char)arg1 ;
-(id<YTPlaybackControllerUIDelegate>)UIDelegate;
@end

