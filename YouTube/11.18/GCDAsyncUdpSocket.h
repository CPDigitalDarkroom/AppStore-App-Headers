/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:50:05 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_dispatch_source;
#import <YouTube/YouTube-Structs.h>
@class NSObject, GCDAsyncUdpSendPacket, NSMutableArray, NSData, NSString;

@interface GCDAsyncUdpSocket : NSObject {

	id delegate;
	NSObject*<OS_dispatch_queue> delegateQueue;
	/*^block*/id receiveFilterBlock;
	NSObject*<OS_dispatch_queue> receiveFilterQueue;
	char receiveFilterAsync;
	/*^block*/id sendFilterBlock;
	NSObject*<OS_dispatch_queue> sendFilterQueue;
	char sendFilterAsync;
	unsigned flags;
	unsigned short config;
	unsigned short max4ReceiveSize;
	unsigned max6ReceiveSize;
	int socket4FD;
	int socket6FD;
	NSObject*<OS_dispatch_queue> socketQueue;
	NSObject*<OS_dispatch_source> send4Source;
	NSObject*<OS_dispatch_source> send6Source;
	NSObject*<OS_dispatch_source> receive4Source;
	NSObject*<OS_dispatch_source> receive6Source;
	NSObject*<OS_dispatch_source> sendTimer;
	GCDAsyncUdpSendPacket* currentSend;
	NSMutableArray* sendQueue;
	unsigned long socket4FDBytesAvailable;
	unsigned long socket6FDBytesAvailable;
	unsigned pendingFilterOperations;
	NSData* cachedLocalAddress4;
	NSString* cachedLocalHost4;
	unsigned short cachedLocalPort4;
	NSData* cachedLocalAddress6;
	NSString* cachedLocalHost6;
	unsigned short cachedLocalPort6;
	NSData* cachedConnectedAddress;
	NSString* cachedConnectedHost;
	unsigned short cachedConnectedPort;
	int cachedConnectedFamily;
	void* IsOnSocketQueueOrTargetQueueKey;
	SCD_Struct_GC188* streamContext;
	CFReadStreamRef readStream4;
	CFReadStreamRef readStream6;
	CFWriteStreamRef writeStream4;
	CFWriteStreamRef writeStream6;
	id userData;

}
+(char)isIPv4Address:(id)arg1 ;
+(char)isIPv6Address:(id)arg1 ;
+(unsigned short)portFromAddress:(id)arg1 ;
+(id)hostFromSockaddr4:(const sockaddr_in*)arg1 ;
+(id)hostFromSockaddr6:(const sockaddr_in6*)arg1 ;
+(unsigned short)portFromSockaddr4:(const sockaddr_in*)arg1 ;
+(unsigned short)portFromSockaddr6:(const sockaddr_in6*)arg1 ;
+(char)getHost:(id*)arg1 port:(unsigned short*)arg2 fromAddress:(id)arg3 ;
+(char)getHost:(id*)arg1 port:(unsigned short*)arg2 family:(int*)arg3 fromAddress:(id)arg4 ;
+(id)hostFromAddress:(id)arg1 ;
+(int)familyFromAddress:(id)arg1 ;
+(void)listenerThread;
+(void)startListenerThreadIfNeeded;
+(void)addStreamListener:(id)arg1 ;
+(void)removeStreamListener:(id)arg1 ;
+(void)ignore:(id)arg1 ;
-(char)leaveMulticastGroup:(id)arg1 error:(id*)arg2 ;
-(char)joinMulticastGroup:(id)arg1 error:(id*)arg2 ;
-(char)connectToAddress:(id)arg1 error:(id*)arg2 ;
-(id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2 socketQueue:(id)arg3 ;
-(void)setDelegate:(id)arg1 synchronously:(char)arg2 ;
-(void)setDelegateQueue:(id)arg1 synchronously:(char)arg2 ;
-(void)setDelegate:(id)arg1 delegateQueue:(id)arg2 synchronously:(char)arg3 ;
-(id)errnoErrorWithReason:(id)arg1 ;
-(id)badConfigError:(id)arg1 ;
-(id)badParamError:(id)arg1 ;
-(id)otherError:(id)arg1 ;
-(id)connectedHost;
-(unsigned short)connectedPort;
-(void)removeStreamsFromRunLoop;
-(id)gaiError:(int)arg1 ;
-(id)initWithSocketQueue:(id)arg1 ;
-(void)synchronouslySetDelegate:(id)arg1 ;
-(void)synchronouslySetDelegateQueue:(id)arg1 ;
-(void)getDelegate:(id*)arg1 delegateQueue:(id*)arg2 ;
-(void)synchronouslySetDelegate:(id)arg1 delegateQueue:(id)arg2 ;
-(char)isIPv4Enabled;
-(void)setIPv4Enabled:(char)arg1 ;
-(char)isIPv6Enabled;
-(void)setIPv6Enabled:(char)arg1 ;
-(char)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id*)arg3 ;
-(id)errnoError;
-(id)localHost;
-(id)connectedAddress;
-(char)isIPv4;
-(void)markSocketQueueTargetQueue:(id)arg1 ;
-(void)unmarkSocketQueueTargetQueue:(id)arg1 ;
-(int)socket4FD;
-(int)socket6FD;
-(CFReadStreamRef)readStream;
-(CFWriteStreamRef)writeStream;
-(void)suspendSend4Source;
-(void)doSend;
-(void)doReceive;
-(void)doReceiveEOF;
-(void)suspendSend6Source;
-(void)setupSendAndReceiveSourcesForSocket4;
-(void)setupSendAndReceiveSourcesForSocket6;
-(char)createSocket4:(char)arg1 socket6:(char)arg2 error:(id*)arg3 ;
-(void)resumeSend4Source;
-(void)resumeReceive4Source;
-(void)resumeSend6Source;
-(void)resumeReceive6Source;
-(void)closeSocket4;
-(void)closeSocket6;
-(char)getLocalAddress:(id*)arg1 host:(id*)arg2 port:(unsigned short*)arg3 forSocket:(int)arg4 withFamily:(int)arg5 ;
-(void)maybeUpdateCachedLocalAddress4Info;
-(void)maybeUpdateCachedLocalAddress6Info;
-(void)maybeUpdateCachedConnectedAddressInfo;
-(char)preOp:(id*)arg1 ;
-(char)bindToPort:(unsigned short)arg1 interface:(id)arg2 error:(id*)arg3 ;
-(char)preBind:(id*)arg1 ;
-(void)convertIntefaceDescription:(id)arg1 port:(unsigned short)arg2 intoAddress4:(id*)arg3 address6:(id*)arg4 ;
-(void)closeSockets;
-(char)preConnect:(id*)arg1 ;
-(char)createSockets:(id*)arg1 ;
-(void)maybeConnect;
-(void)asyncResolveHost:(id)arg1 port:(unsigned short)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(void)maybeDequeueSend;
-(void)notifyDidNotConnect:(id)arg1 ;
-(int)getAddress:(id*)arg1 error:(id*)arg2 fromAddresses:(id)arg3 ;
-(char)connectWithAddress4:(id)arg1 error:(id*)arg2 ;
-(char)connectWithAddress6:(id)arg1 error:(id*)arg2 ;
-(void)notifyDidConnectToAddress:(id)arg1 ;
-(void)endCurrentSend;
-(char)joinMulticastGroup:(id)arg1 onInterface:(id)arg2 error:(id*)arg3 ;
-(char)performMulticastRequest:(int)arg1 forGroup:(id)arg2 onInterface:(id)arg3 error:(id*)arg4 ;
-(char)leaveMulticastGroup:(id)arg1 onInterface:(id)arg2 error:(id*)arg3 ;
-(char)preJoin:(id*)arg1 ;
-(void)convertNumericHost:(id)arg1 port:(unsigned short)arg2 intoAddress4:(id*)arg3 address6:(id*)arg4 ;
-(unsigned)indexOfInterfaceAddr6:(id)arg1 ;
-(void)sendData:(id)arg1 withTimeout:(double)arg2 tag:(long)arg3 ;
-(void)doPreSend;
-(void)setSendFilter:(/*^block*/id)arg1 withQueue:(id)arg2 isAsynchronous:(char)arg3 ;
-(void)notifyDidNotSendDataWithTag:(long)arg1 dueToError:(id)arg2 ;
-(void)notifyDidSendDataWithTag:(long)arg1 ;
-(void)setupSendTimerWithTimeout:(double)arg1 ;
-(id)sendTimeoutError;
-(void)doSendTimeout;
-(void)suspendReceive4Source;
-(void)suspendReceive6Source;
-(void)setReceiveFilter:(/*^block*/id)arg1 withQueue:(id)arg2 isAsynchronous:(char)arg3 ;
-(char)isConnectedToAddress4:(id)arg1 ;
-(char)isConnectedToAddress6:(id)arg1 ;
-(void)notifyDidReceiveData:(id)arg1 fromAddress:(id)arg2 withFilterContext:(id)arg3 ;
-(id)socketClosedError;
-(void)closeReadAndWriteStreams;
-(void)notifyDidCloseWithError:(id)arg1 ;
-(char)createReadAndWriteStreams:(id*)arg1 ;
-(char)isIPv4Preferred;
-(char)isIPv6Preferred;
-(char)isIPVersionNeutral;
-(void)setPreferIPv4;
-(void)setPreferIPv6;
-(void)setIPVersionNeutral;
-(unsigned short)maxReceiveIPv4BufferSize;
-(void)setMaxReceiveIPv4BufferSize:(unsigned short)arg1 ;
-(unsigned)maxReceiveIPv6BufferSize;
-(void)setMaxReceiveIPv6BufferSize:(unsigned)arg1 ;
-(unsigned)indexOfInterfaceAddr4:(id)arg1 ;
-(id)localAddress_IPv4;
-(id)localHost_IPv4;
-(unsigned short)localPort_IPv4;
-(id)localAddress_IPv6;
-(id)localHost_IPv6;
-(unsigned short)localPort_IPv6;
-(char)bindToPort:(unsigned short)arg1 error:(id*)arg2 ;
-(char)bindToAddress:(id)arg1 error:(id*)arg2 ;
-(char)enableBroadcast:(char)arg1 error:(id*)arg2 ;
-(void)sendData:(id)arg1 withTag:(long)arg2 ;
-(void)sendData:(id)arg1 toHost:(id)arg2 port:(unsigned short)arg3 withTimeout:(double)arg4 tag:(long)arg5 ;
-(void)sendData:(id)arg1 toAddress:(id)arg2 withTimeout:(double)arg3 tag:(long)arg4 ;
-(void)setSendFilter:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(char)receiveOnce:(id*)arg1 ;
-(char)beginReceiving:(id*)arg1 ;
-(void)pauseReceiving;
-(void)setReceiveFilter:(/*^block*/id)arg1 withQueue:(id)arg2 ;
-(void)closeAfterSending;
-(char)registerForStreamCallbacks:(id*)arg1 ;
-(char)addStreamsToRunLoop:(id*)arg1 ;
-(char)openStreams:(id*)arg1 ;
-(char)enableBackgroundingOnSockets;
-(id)delegateQueue;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(id)delegate;
-(void)applicationWillEnterForeground:(id)arg1 ;
-(void)close;
-(id)userData;
-(void)setUserData:(id)arg1 ;
-(void)performBlock:(/*^block*/id)arg1 ;
-(int)socketFD;
-(char)isConnected;
-(void)setDelegateQueue:(id)arg1 ;
-(void)closeWithError:(id)arg1 ;
-(char)isIPv6;
-(id)localAddress;
-(char)isClosed;
-(id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2 ;
-(unsigned short)localPort;
-(void)setDelegate:(id)arg1 delegateQueue:(id)arg2 ;
@end

