/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:14 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/YTInstreamAdsController.h>

@protocol YTInnerTubeUIServiceWithTimeoutInterval, YTResponder, YTAdErrorDelegate;
@class YTPlayerService, YTVideoAdsService, YTAdBreakService, YTPlayerRequestFactory, NSDate, YTReachabilityController, YTVASTParser, NSString;

@interface YTVideoAdsController : NSObject <YTInstreamAdsController> {

	YTPlayerService* _playerService;
	id<YTInnerTubeUIServiceWithTimeoutInterval> _watchNextService;
	YTVideoAdsService* _videoAdsService;
	YTAdBreakService* _adBreakService;
	YTPlayerRequestFactory* _playerRequestFactory;
	NSDate* _lastAdTime;
	YTReachabilityController* _reachabilityController;
	YTVASTParser* _VASTParser;
	id<YTResponder> _parentResponder;
	id<YTAdErrorDelegate> _delegate;

}

@property (assign,nonatomic,__weak) id<YTAdErrorDelegate> delegate;                 //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,__weak,readonly) id<YTResponder> parentResponder;              //@synthesize parentResponder=_parentResponder - In the implementation block
+(char)isAdSenseAdTag:(id)arg1 ;
+(void)appendAdSenseClientParamsToURLBuilder:(id)arg1 onWiFi:(char)arg2 ;
-(id)init;
-(id<YTResponder>)parentResponder;
-(id)playerService;
-(id)videoAdsService;
-(void)setParentResponder:(id<YTResponder>)arg1 ;
-(void)fillWatchNextResponseInAd:(id)arg1 contentPlayerResponse:(id)arg2 isPreroll:(char)arg3 responseBlock:(/*^block*/id)arg4 errorBlock:(/*^block*/id)arg5 ;
-(id)initWithPlayerService:(id)arg1 watchNextService:(id)arg2 videoAdsService:(id)arg3 adBreakService:(id)arg4 playerRequestFactory:(id)arg5 reachabilityController:(id)arg6 VASTParser:(id)arg7 parentResponder:(id)arg8 ;
-(id)adBreaksWithPlayerResponse:(id)arg1 VMAPParser:(id)arg2 error:(id*)arg3 isLoggingEnabled:(char)arg4 ;
-(void)makeAdRequestWithAdBreak:(id)arg1 isOffline:(char)arg2 contentPlayerResponse:(id)arg3 responseBlock:(/*^block*/id)arg4 playbackContext:(id)arg5 clientPlaybackNonce:(id)arg6 midrollIndex:(int)arg7 macros:(id)arg8 ;
-(void)makeAdBreakRequestWithAdBreak:(id)arg1 forOffline:(char)arg2 contentPlayerResponse:(id)arg3 responseBlock:(/*^block*/id)arg4 playbackContext:(id)arg5 clientPlaybackNonce:(id)arg6 midrollIndex:(int)arg7 macros:(id)arg8 ;
-(void)findValidVASTAdWithEnumerator:(id)arg1 adBreak:(id)arg2 forOffline:(char)arg3 contentPlayerResponse:(id)arg4 adPlayerRequestParams:(id)arg5 timeoutTime:(id)arg6 impressionURLs:(id)arg7 macros:(id)arg8 responseBlock:(/*^block*/id)arg9 ;
-(void)notifyDidGeneratePartialVASTAd:(id)arg1 adBreak:(id)arg2 reason:(id)arg3 ;
-(void)fillVideoAndPlayerDataForAd:(id)arg1 adBreak:(id)arg2 forOffline:(char)arg3 contentPlayerResponse:(id)arg4 adPlayerRequestParams:(id)arg5 responseBlock:(/*^block*/id)arg6 errorBlock:(/*^block*/id)arg7 ;
-(char)shouldContinueFallbackFromError:(id)arg1 ;
-(void)resolveVMAPVASTAd:(id)arg1 timeoutTime:(id)arg2 adRequestConfig:(id)arg3 responseBlock:(/*^block*/id)arg4 partialResponseBlock:(/*^block*/id)arg5 ;
-(id)adsFromResponse:(id)arg1 error:(id*)arg2 ;
-(void)fillVATTDataForAd:(id)arg1 responseBlock:(/*^block*/id)arg2 errorBlock:(/*^block*/id)arg3 ;
-(void)makeInlineAdWithWrapperAd:(id)arg1 timeoutTime:(id)arg2 numRedirectsLimit:(unsigned)arg3 adRequestConfig:(id)arg4 responseBlock:(/*^block*/id)arg5 partialResponseBlock:(/*^block*/id)arg6 ;
-(void)makeWrapperAdRequestWithVASTAd:(id)arg1 hostVideoID:(id)arg2 adRequestConfig:(id)arg3 responseBlock:(/*^block*/id)arg4 errorBlock:(/*^block*/id)arg5 ;
-(id)prepareAdTagURL:(id)arg1 ;
-(id)adTagRequestWithURL:(id)arg1 adRequestConfig:(id)arg2 ;
-(char)maybeUsePrefetchedPlayerResponseWithAdBreak:(id)arg1 contentPlayerResponse:(id)arg2 adVideoID:(id)arg3 VASTAd:(id)arg4 responseBlock:(/*^block*/id)arg5 ;
-(id)VASTAdsFromVASTRenderer:(id)arg1 error:(id*)arg2 ;
-(id)playerResponseFromInstreamRenderer:(id)arg1 ;
-(void)setDelegate:(id<YTAdErrorDelegate>)arg1 ;
-(id<YTAdErrorDelegate>)delegate;
@end

