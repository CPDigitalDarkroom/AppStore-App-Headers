/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:35 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/GIPAudioPlayerDelegate.h>

@class AVAudioSession, GIPAudioPlayer;

@interface GIPAudioController : NSObject <GIPAudioPlayerDelegate> {

	AVAudioSession* _audioSession;
	char _isActive;
	GIPAudioPlayer* _player;
	unsigned long _audioSessionCategory;
	int _iPodPlaybackState;
	char _isInterrupted;
	char _activeWhenInterrupted;
	char _inputIsAvailable;
	char _useSpeakerOutput;
	char _resumePlayingAfterAudio;
	char _allowBluetoothInput;
	unsigned long _noMicAudioSessionCategory;

}

@property (assign,nonatomic) char useSpeakerOutput;                                //@synthesize useSpeakerOutput=_useSpeakerOutput - In the implementation block
@property (assign,nonatomic) char resumePlayingAfterAudio;                         //@synthesize resumePlayingAfterAudio=_resumePlayingAfterAudio - In the implementation block
@property (assign,nonatomic) char allowBluetoothInput;                             //@synthesize allowBluetoothInput=_allowBluetoothInput - In the implementation block
@property (assign,nonatomic) unsigned long noMicAudioSessionCategory;              //@synthesize noMicAudioSessionCategory=_noMicAudioSessionCategory - In the implementation block
+(id)sharedInstance;
-(char)audioInputAvailable;
-(char)setAudioSessionCategory:(unsigned long)arg1 ;
-(char)audioInit;
-(void)setAllowBluetoothInput:(char)arg1 ;
-(char)playSound:(id)arg1 identifier:(id)arg2 ;
-(void)receivedInterruptionNotification:(id)arg1 ;
-(void)setUseSpeakerOutput:(char)arg1 ;
-(void)setNoMicAudioSessionCategory:(unsigned long)arg1 ;
-(void)receivedRouteChangeNotification:(id)arg1 ;
-(char)isMusicPlaying;
-(char)audioSessionSetActive;
-(unsigned)optionsForCategory:(id)arg1 ;
-(char)wasMusicPlaying;
-(char)playSound:(id)arg1 identifier:(id)arg2 async:(char)arg3 ;
-(void)notifyPlaybackComplete:(id)arg1 ;
-(char)audioInitIfAvailable;
-(void)updateAudioOutputOverrideIfNeeded;
-(void)playbackDidComplete:(id)arg1 ;
-(unsigned long)audioSessionCategory;
-(char)audioSessionSetInactive;
-(char)hasExternalMicrophone;
-(char)useSpeakerOutput;
-(char)resumePlayingAfterAudio;
-(void)setResumePlayingAfterAudio:(char)arg1 ;
-(char)allowBluetoothInput;
-(unsigned long)noMicAudioSessionCategory;
-(void)beginInterruption;
-(void)endInterruptionWithFlags:(unsigned)arg1 ;
-(void)endInterruption;
-(void)inputIsAvailableChanged:(char)arg1 ;
-(char)isPlaying;
-(void)dealloc;
-(id)init;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(char)isInitialized;
-(char)playSound:(id)arg1 ;
-(void)stopPlayback;
@end

