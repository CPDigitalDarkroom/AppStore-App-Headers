/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:26 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/YTBaseWorker.h>
#import <YouTube/YTOfflinePlaylistControllerObserver.h>
#import <YouTube/YTWorker.h>

@protocol YTWorkerDelegate;
@class YTOfflineVideoController, YTOfflinePlaylistController, YTOfflinePlaylistSyncCheckService, YTStorageController, YTUserDefaults, NSTimer, NSDate, NSString;

@interface YTOfflinePlaylistSyncWorker : YTBaseWorker <YTOfflinePlaylistControllerObserver, YTWorker> {

	YTOfflineVideoController* _offlineVideoController;
	YTOfflinePlaylistController* _offlinePlaylistController;
	YTOfflinePlaylistSyncCheckService* _offlinePlaylistSyncService;
	YTStorageController* _storageController;
	YTUserDefaults* _userDefaults;
	NSTimer* _triggerTimer;
	double _tryAgainLaterBackoff;
	id<YTWorkerDelegate> _workerDelegate;
	NSDate* _nextWorkDate;

}

@property (nonatomic,retain) NSDate * nextWorkDate;                                   //@synthesize nextWorkDate=_nextWorkDate - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic,__weak) id<YTWorkerDelegate> workerDelegate;              //@synthesize workerDelegate=_workerDelegate - In the implementation block
-(void)willRequestOfflinePlaylistWithPlaylistID:(id)arg1 ;
-(void)setCurrentUserID:(id)arg1 ;
-(void)startWorkWithCompletionBlock:(/*^block*/id)arg1 errorBlock:(/*^block*/id)arg2 ;
-(int)workerRequirements;
-(char)runsAsynchronously;
-(char)isWorkingAsynchronously;
-(id<YTWorkerDelegate>)workerDelegate;
-(void)setWorkerDelegate:(id<YTWorkerDelegate>)arg1 ;
-(id)initWithOfflineVideoController:(id)arg1 initWithOfflinePlaylistController:(id)arg2 storageController:(id)arg3 offlinePlaylistSyncService:(id)arg4 userDefaults:(id)arg5 ;
-(void)fetchVideoIDsWithPlaylistID:(id)arg1 responseBlock:(/*^block*/id)arg2 errorBlock:(/*^block*/id)arg3 ;
-(void)setNextWorkDate:(NSDate *)arg1 ;
-(void)stopTriggerTimer;
-(void)doWorkWithCompletionBlock:(/*^block*/id)arg1 errorBlock:(/*^block*/id)arg2 ;
-(void)hasWorkWithCompletionBlock:(/*^block*/id)arg1 errorBlock:(/*^block*/id)arg2 ;
-(char)refreshIntervalHasExpired;
-(void)startTriggerTimer;
-(NSDate *)nextWorkDate;
-(void)triggerTimerDidFire;
-(void)schedulePlaylistSyncNow;
-(void)performOfflinePlaylistSyncCheckWithPlaylistArray:(id)arg1 completionBlock:(/*^block*/id)arg2 errorBlock:(/*^block*/id)arg3 ;
-(void)fetchAllPlaylistsWithResponseBlock:(/*^block*/id)arg1 errorBlock:(/*^block*/id)arg2 ;
-(id)buildChecksArrayWithPlaylistArray:(id)arg1 videoIDsArray:(id)arg2 ;
-(void)performOfflinePlaylistSyncCheckWithChecks:(id)arg1 completionBlock:(/*^block*/id)arg2 errorBlock:(/*^block*/id)arg3 ;
-(id)getMissingPlaylistsInResponse:(id)arg1 checksArray:(id)arg2 ;
-(void)maybeSyncPlaylistWithSyncCheckResponse:(id)arg1 missingPlaylistIDs:(id)arg2 completionBlock:(/*^block*/id)arg3 errorBlock:(/*^block*/id)arg4 ;
-(void)offlinePlaylistSyncServiceCheckWithChecks:(id)arg1 timeSinceLastOfflinePlayback:(unsigned)arg2 responseBlock:(/*^block*/id)arg3 errorBlock:(/*^block*/id)arg4 ;
-(void)fetchLastOfflinePlaybackDateWithResponseBlock:(/*^block*/id)arg1 errorBlock:(/*^block*/id)arg2 ;
-(char)syncCheckResponseHasPlaylistID:(id)arg1 syncCheckResponse:(id)arg2 ;
-(void)syncOfflinePlaylistsWithPlaylistIDArray:(id)arg1 playlistIDArrayAllowingMediaDownloadIDs:(id)arg2 responseBlock:(/*^block*/id)arg3 errorBlock:(/*^block*/id)arg4 ;
-(float)queryBatteryLevel;
-(void)resetTryAgainLater;
-(/*^block*/id)tryAgainLaterBlockWithErrorBlock:(/*^block*/id)arg1 ;
-(id)triggerTimer;
-(double)tryAgainLaterBackoff;
-(void)dealloc;
@end

