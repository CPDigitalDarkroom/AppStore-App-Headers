/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:21 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/YouTube-Structs.h>
#import <YouTube/GPUImageTwoPassTextureSamplingFilter.h>

@interface GPUImageGaussianBlurFilter : GPUImageTwoPassTextureSamplingFilter {

	char shouldResizeBlurRadiusWithImageSize;
	float _blurRadiusInPixels;
	float _texelSpacingMultiplier;
	float _blurRadiusAsFractionOfImageWidth;
	float _blurRadiusAsFractionOfImageHeight;
	unsigned _blurPasses;

}

@property (assign,nonatomic) float texelSpacingMultiplier;                         //@synthesize texelSpacingMultiplier=_texelSpacingMultiplier - In the implementation block
@property (assign,nonatomic) float blurRadiusInPixels;                             //@synthesize blurRadiusInPixels=_blurRadiusInPixels - In the implementation block
@property (assign,nonatomic) float blurRadiusAsFractionOfImageWidth;               //@synthesize blurRadiusAsFractionOfImageWidth=_blurRadiusAsFractionOfImageWidth - In the implementation block
@property (assign,nonatomic) float blurRadiusAsFractionOfImageHeight;              //@synthesize blurRadiusAsFractionOfImageHeight=_blurRadiusAsFractionOfImageHeight - In the implementation block
@property (assign,nonatomic) unsigned blurPasses;                                  //@synthesize blurPasses=_blurPasses - In the implementation block
+(id)vertexShaderForOptimizedBlurOfRadius:(unsigned)arg1 sigma:(float)arg2 ;
+(id)fragmentShaderForOptimizedBlurOfRadius:(unsigned)arg1 sigma:(float)arg2 ;
+(id)vertexShaderForStandardBlurOfRadius:(unsigned)arg1 sigma:(float)arg2 ;
+(id)fragmentShaderForStandardBlurOfRadius:(unsigned)arg1 sigma:(float)arg2 ;
-(void)setBlurPasses:(unsigned)arg1 ;
-(void)setupFilterForSize:(CGSize)arg1 ;
-(void)setBlurRadiusInPixels:(float)arg1 ;
-(float)blurRadiusInPixels;
-(void)renderToTextureWithVertices:(const float*)arg1 textureCoordinates:(const float*)arg2 ;
-(void)setTexelSpacingMultiplier:(float)arg1 ;
-(id)initWithFirstStageVertexShaderFromString:(id)arg1 firstStageFragmentShaderFromString:(id)arg2 secondStageVertexShaderFromString:(id)arg3 secondStageFragmentShaderFromString:(id)arg4 ;
-(void)switchToVertexShader:(id)arg1 fragmentShader:(id)arg2 ;
-(float)texelSpacingMultiplier;
-(float)blurRadiusAsFractionOfImageWidth;
-(void)setBlurRadiusAsFractionOfImageWidth:(float)arg1 ;
-(float)blurRadiusAsFractionOfImageHeight;
-(void)setBlurRadiusAsFractionOfImageHeight:(float)arg1 ;
-(unsigned)blurPasses;
-(id)init;
@end

