/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:35 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/YouTube-Structs.h>
#import <YouTube/MLAVAssetPlayerDelegate.h>
#import <YouTube/MLAVPlayerQoEDataSource.h>
#import <YouTube/MLAVPlayerViewDelegate.h>
#import <YouTube/MLStreamSelectorDelegate.h>
#import <YouTube/MLTransitionalPlayerDelegate.h>
#import <YouTube/YTSystemNotificationsObserver.h>
#import <YouTube/MLPlayer.h>

@protocol MLServices, MLExternalPlayerProtocol, MLPlayerCaptionDelegate, MLPlayerConfig, MLPlayerDelegate, MLAVPlayerViewProtocol;
@class AVPlayer, MLFormat, MLExternalPlayerSyncer, NSMutableArray, NSURL, EXOViewportSize, NSError, NSArray, MLVideo, UIView, MLAVAssetPlayer, MLAVQoEMeasurementProvider, MLTransitionalPlayer, MLStreamSelector, NSString;

@interface MLAVPlayer : NSObject <MLAVAssetPlayerDelegate, MLAVPlayerQoEDataSource, MLAVPlayerViewDelegate, MLStreamSelectorDelegate, MLTransitionalPlayerDelegate, YTSystemNotificationsObserver, MLPlayer> {

	id<MLServices> _services;
	double _currentTimeOverride;
	char _pendingPlay;
	char _pausedDueToAudioInterruption;
	float _volume;
	char _muted;
	AVPlayer* _player;
	MLFormat* _lastFormatUsedByPlayer;
	id<MLExternalPlayerProtocol> _externalPlayer;
	MLExternalPlayerSyncer* _externalPlayerSyncer;
	NSMutableArray* _deferredDeallocationObjects;
	NSURL* _probeURLOnVideoPlay;
	EXOViewportSize* _viewportSize;
	unsigned _currentFailureID;
	int _failureRetryCount;
	NSError* _deferredBackgroundError;
	double _switchedToBackgroundAtSystemTime;
	char _foregroundVideoStreamDisabled;
	char _isInForeground;
	char _lastExternalPlaybackActive;
	char _backgroundPlaybackAllowed;
	char _deferDeallocationsWhileScrolling;
	char _externalPlaybackAllowed;
	char _externalPlaybackFullscreen;
	id<MLPlayerCaptionDelegate> _captionDelegate;
	id<MLPlayerConfig> _config;
	id<MLPlayerDelegate> _delegate;
	NSError* _error;
	NSArray* _selectableFormats;
	MLFormat* _selectedAudioFormat;
	MLFormat* _selectedVideoFormat;
	int _state;
	MLVideo* _video;
	UIView*<MLAVPlayerViewProtocol> _renderingView;
	MLAVAssetPlayer* _assetPlayer;
	MLAVQoEMeasurementProvider* _QoEProvider;
	MLTransitionalPlayer* _transitionalPlayer;
	MLStreamSelector* _streamSelector;

}

@property (nonatomic,retain) UIView*<MLAVPlayerViewProtocol> renderingView;                   //@synthesize renderingView=_renderingView - In the implementation block
@property (nonatomic,readonly) MLAVAssetPlayer * assetPlayer;                                 //@synthesize assetPlayer=_assetPlayer - In the implementation block
@property (nonatomic,readonly) MLAVQoEMeasurementProvider * QoEProvider;                      //@synthesize QoEProvider=_QoEProvider - In the implementation block
@property (nonatomic,readonly) MLTransitionalPlayer * transitionalPlayer;                     //@synthesize transitionalPlayer=_transitionalPlayer - In the implementation block
@property (nonatomic,readonly) MLExternalPlayerSyncer * externalPlayerSyncer;                 //@synthesize externalPlayerSyncer=_externalPlayerSyncer - In the implementation block
@property (nonatomic,readonly) MLStreamSelector * streamSelector;                             //@synthesize streamSelector=_streamSelector - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic,__weak) id<MLPlayerDelegate> delegate;                            //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic,__weak) id<MLPlayerCaptionDelegate> captionDelegate;              //@synthesize captionDelegate=_captionDelegate - In the implementation block
@property (nonatomic,readonly) int state;                                                     //@synthesize state=_state - In the implementation block
@property (nonatomic,readonly) NSError * error;                                               //@synthesize error=_error - In the implementation block
@property (assign,nonatomic) char backgroundPlaybackAllowed;                                  //@synthesize backgroundPlaybackAllowed=_backgroundPlaybackAllowed - In the implementation block
@property (assign,nonatomic) char externalPlaybackAllowed;                                    //@synthesize externalPlaybackAllowed=_externalPlaybackAllowed - In the implementation block
@property (assign,nonatomic) char externalPlaybackFullscreen;                                 //@synthesize externalPlaybackFullscreen=_externalPlaybackFullscreen - In the implementation block
@property (assign,nonatomic) char deferDeallocationsWhileScrolling;                           //@synthesize deferDeallocationsWhileScrolling=_deferDeallocationsWhileScrolling - In the implementation block
@property (assign,nonatomic) float volume;                                                    //@synthesize volume=_volume - In the implementation block
@property (assign,getter=isMuted,nonatomic) char muted;                                       //@synthesize muted=_muted - In the implementation block
@property (nonatomic,readonly) NSArray * selectableFormats;                                   //@synthesize selectableFormats=_selectableFormats - In the implementation block
@property (nonatomic,readonly) MLFormat * selectedAudioFormat;                                //@synthesize selectedAudioFormat=_selectedAudioFormat - In the implementation block
@property (nonatomic,readonly) MLFormat * selectedVideoFormat;                                //@synthesize selectedVideoFormat=_selectedVideoFormat - In the implementation block
@property (nonatomic,readonly) MLVideo * video;                                               //@synthesize video=_video - In the implementation block
@property (nonatomic,readonly) id<MLPlayerConfig> config;                                     //@synthesize config=_config - In the implementation block
@property (nonatomic,readonly) NSString * playerType; 
@property (nonatomic,readonly) CGSize currentVideoSize; 
-(void)appDidEnterBackground:(id)arg1 ;
-(void)appDidReceiveAudioSessionInterruptionWithUserInfo:(id)arg1 ;
-(void)appDidReceiveAudioSessionRouteChangeWithUserInfo:(id)arg1 ;
-(id)debugLogs;
-(char)deferDeallocationsWhileScrolling;
-(void)replay;
-(id)debugParameters;
-(double)totalMediaTime;
-(id)selectedAudioTrack;
-(id)initWithServices:(id)arg1 ;
-(void)playerViewErrorDidOccur:(id)arg1 ;
-(void)disablePlayerCaptions;
-(void)enablePlayerCaptionsWithOption:(id)arg1 ;
-(void)resumeVideoStreamPlayback;
-(void)viewportSizeDidChangeToSize:(id)arg1 ;
-(UIView*<MLAVPlayerViewProtocol>)renderingView;
-(void)setVideoFormatConstraint:(id)arg1 ;
-(void)setAudioFormatConstraint:(id)arg1 ;
-(NSArray *)selectableFormats;
-(void)setCaptionDelegate:(id<MLPlayerCaptionDelegate>)arg1 ;
-(MLFormat *)selectedAudioFormat;
-(MLFormat *)selectedVideoFormat;
-(double)bufferedMediaTime;
-(CGSize)currentVideoSize;
-(void)setExternalPlaybackAllowed:(char)arg1 ;
-(void)setExternalPlaybackFullscreen:(char)arg1 ;
-(void)setDeferDeallocationsWhileScrolling:(char)arg1 ;
-(id)createQoEMeasurementProviderWithPlayerConfig:(id)arg1 ;
-(void)loadWithVideo:(id)arg1 playerConfig:(id)arg2 externalPlayer:(id)arg3 ;
-(void)setBackgroundPlaybackAllowed:(char)arg1 ;
-(char)isPlayingOrPendingPlayback;
-(id<MLPlayerCaptionDelegate>)captionDelegate;
-(char)externalPlaybackAllowed;
-(char)externalPlaybackFullscreen;
-(void)setVideo:(id)arg1 playerConfig:(id)arg2 ;
-(void)createSharedPlayerAndAssignRenderingView:(char)arg1 ;
-(void)updateQoECollectorViewportSize;
-(void)updateExternalPlaybackForAssetPlayer:(id)arg1 ;
-(void)savePlaybackStateAndClearPlayer;
-(void)clearTransitionalPlayer;
-(id)assetPlayerWithURL:(id)arg1 format:(id)arg2 ;
-(void)transitionToAssetPlayer:(id)arg1 ;
-(void)streamSelectorWillRevokeSelectedStream;
-(void)setNewAssetPlayer:(id)arg1 ;
-(char)isPlayableState;
-(void)clearPlayer;
-(void)configureAssetPlayer:(id)arg1 ;
-(void)restorePrimaryPlayerAndClearTransitionalPlayer;
-(void)syncFailWithError:(id)arg1 failureID:(unsigned)arg2 forceAttemptRetry:(char)arg3 ;
-(char)shouldSwitchToAudioVideoStreamInForeground;
-(void)updateForegroundAudioOnlyPlaybackReason;
-(void)clearStreamSelector;
-(void)deferDeallocationsForAssetPlayer:(id)arg1 ;
-(void)clearExternalPlayerSyncer;
-(char)shouldRetryError:(id)arg1 ;
-(void)updateNetworkUsageNotifierWithState:(int)arg1 ;
-(unsigned)networkUsageBitrateEstimate;
-(void)doDeferredDeallocation;
-(MLAVAssetPlayer *)assetPlayer;
-(MLAVQoEMeasurementProvider *)QoEProvider;
-(MLTransitionalPlayer *)transitionalPlayer;
-(MLStreamSelector *)streamSelector;
-(MLExternalPlayerSyncer *)externalPlayerSyncer;
-(void)setRenderingView:(UIView*<MLAVPlayerViewProtocol>)arg1 ;
-(void)transitionalPlayerFailedWithError:(id)arg1 ;
-(void)replaceCurrentAssetPlayer:(id)arg1 withAssetPlayer:(id)arg2 graceful:(char)arg3 ;
-(void)assetPlayer:(id)arg1 stateDidChangeToState:(int)arg2 ;
-(void)assetPlayer:(id)arg1 currentMediaTimeDidChangeToTime:(double)arg2 ;
-(void)assetPlayer:(id)arg1 bufferedMediaTimeDidChangeToTime:(double)arg2 ;
-(void)assetPlayer:(id)arg1 externalPlaybackActiveDidChangeToValue:(char)arg2 ;
-(void)assetPlayer:(id)arg1 seekableTimeRangeDidChangeToMinimumTime:(double)arg2 maximumTime:(double)arg3 ;
-(void)streamSelectorFailedWithError:(id)arg1 ;
-(void)streamSelectorHasSelectableFormats:(id)arg1 ;
-(void)streamSelectorDidSelectVideoFormat:(id)arg1 audioFormat:(id)arg2 reason:(int)arg3 URL:(id)arg4 ;
-(char)backgroundPlaybackAllowed;
-(char)isExternalPlaybackActive;
-(void)seekToTime:(double)arg1 ;
-(void)setMuted:(char)arg1 ;
-(NSError *)error;
-(void)play;
-(void)failWithError:(id)arg1 ;
-(void)setVolume:(float)arg1 ;
-(void)appWillEnterForeground:(id)arg1 ;
-(void)setDelegate:(id<MLPlayerDelegate>)arg1 ;
-(void)dealloc;
-(id<MLPlayerDelegate>)delegate;
-(int)state;
-(void)setState:(int)arg1 ;
-(void)reset;
-(char)isVisible;
-(void)pause;
-(double)currentMediaTime;
-(id<MLPlayerConfig>)config;
-(void)seekToEnd;
-(float)volume;
-(MLVideo *)video;
-(char)isMuted;
-(void)clearAll;
-(NSString *)playerType;
@end

