/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:36 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/MLStreamSelector.h>
#import <YouTube/MLHLSProxyDelegate.h>

@protocol MLServices, MLPlayerConfig;
@class MLVideo, MLHLSProxy, YTIHlsProxyConfig, MLFormatSelectionStrategy, YTNetworkRetryConfig, MLHLSPlaylistLookupHelper, MLFairPlayKeyService, NSURL, NSArray, MLHLSMasterPlaylist, EXONetworkStats, NSString;

@interface MLHLSStreamSelector : MLStreamSelector <MLHLSProxyDelegate> {

	MLVideo* _video;
	MLHLSProxy* _proxy;
	id<MLServices> _services;
	id<MLPlayerConfig> _playerConfig;
	YTIHlsProxyConfig* _config;
	MLFormatSelectionStrategy* _formatSelectionStrategy;
	YTNetworkRetryConfig* _retryConfig;
	MLHLSPlaylistLookupHelper* _playlistLookupHelper;
	MLFairPlayKeyService* _fairPlayKeyService;
	NSURL* _inputMasterPlaylistURL;
	NSArray* _inputRemotePlaylists;
	MLHLSMasterPlaylist* _completeMasterPlaylist;
	MLHLSMasterPlaylist* _servingMasterPlaylist;
	char _initializing;
	EXONetworkStats* _lastNetworkStats;

}

@property (nonatomic,readonly) MLHLSMasterPlaylist * servingMasterPlaylist;              //@synthesize servingMasterPlaylist=_servingMasterPlaylist - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)debugParameters;
-(id)selectedAudioFormat;
-(char)updateServingMasterPlaylist;
-(void)selectServingMasterPlaylistWithReason:(int)arg1 ;
-(void)selectInitialStreamUsingInlinedMasterPlaylist;
-(void)selectInitialStreamUsingRemoteMasterPlaylist;
-(void)setDefaultAudioTrack:(id)arg1 ;
-(void)proxyFailedWithError:(id)arg1 ;
-(void)didLoadHLSMasterPlaylist:(id)arg1 ;
-(void)createCompleteMasterPlaylistFromOriginalMasterPlaylist:(id)arg1 ;
-(void)createPlaylistLookupHelperFromOriginalMasterPlaylist:(id)arg1 ;
-(void)fetchInitialMediaPlaylistsForServingMasterPlaylist;
-(void)performDNSLookupForHost:(id)arg1 ;
-(id)replaceRemotePlaylistURLsWithResourceLoaderURLs:(id)arg1 ;
-(id)replaceMediaTagURLsWithResourceLoaderURLs:(id)arg1 ;
-(id)remotePlaylistsForServingMasterPlaylist;
-(id)filterPlaylistsForAudioConstraint:(id)arg1 ;
-(id)mediaTagsForServingMasterPlaylist;
-(id)audioOnlyRemotePlaylist;
-(void)loadMasterPlaylistWithSuccessBlock:(/*^block*/id)arg1 ;
-(void)loadMediaPlaylistDataWithItag:(int)arg1 xtags:(id)arg2 successBlock:(/*^block*/id)arg3 ;
-(void)loadSecureKeyWithLoadingRequest:(id)arg1 successBlock:(/*^block*/id)arg2 ;
-(id)initWithVideo:(id)arg1 services:(id)arg2 playerConfig:(id)arg3 remotePlaylists:(id)arg4 masterPlaylistURL:(id)arg5 ;
-(id)resourceLoaderDelegate;
-(void)playbackWillStart;
-(MLHLSMasterPlaylist *)servingMasterPlaylist;
-(char)selectStreamWithReason:(int)arg1 forceSelection:(char)arg2 ;
-(void)terminate;
@end

