/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:36 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/MLDownloadOperationDelegate.h>
#import <YouTube/YTNetworkUsageObserver.h>
#import <YouTube/MLDownloadScheduler.h>

@protocol MLDownloadSchedulerConfig, YTNetworkServiceDelegate;
@class MLStreamStore, YTNetworkUsageNotifier, MLBandwidthUsageNotifier, MLNetworkStatsProvider, NSOperationQueue, NSMutableArray, NSTimer, NSString;

@interface MLDynamicDownloadScheduler : NSObject <MLDownloadOperationDelegate, YTNetworkUsageObserver, MLDownloadScheduler> {

	MLStreamStore* _streamStore;
	YTNetworkUsageNotifier* _networkUsageNotifier;
	MLBandwidthUsageNotifier* _bandwidthUsageNotifier;
	MLNetworkStatsProvider* _networkStatsProvider;
	NSOperationQueue* _downloadQueue;
	NSMutableArray* _pendingOperations;
	char _pausedDownload;
	id<MLDownloadSchedulerConfig> _schedulerConfig;
	id<YTNetworkServiceDelegate> _networkServiceDelegate;
	NSTimer* _delayedSetUnpausedDownloadTimer;

}

@property (assign,nonatomic) unsigned maxConcurrentDownloads; 
@property (assign,nonatomic,__weak) id<YTNetworkServiceDelegate> networkServiceDelegate;              //@synthesize networkServiceDelegate=_networkServiceDelegate - In the implementation block
@property (nonatomic,readonly) NSTimer * delayedSetUnpausedDownloadTimer;                             //@synthesize delayedSetUnpausedDownloadTimer=_delayedSetUnpausedDownloadTimer - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)setNetworkServiceDelegate:(id<YTNetworkServiceDelegate>)arg1 ;
-(id)initWithConfig:(id)arg1 streamStore:(id)arg2 networkUsageNotifier:(id)arg3 bandwidthUsageNotifier:(id)arg4 networkStatsProvider:(id)arg5 ;
-(void)networkUsageStateDidChange:(id)arg1 ;
-(void)cancelDownloadsForDelegate:(id)arg1 ;
-(char)downloadRemoteSegment:(id)arg1 localSegment:(id)arg2 userInfo:(id)arg3 delegate:(id)arg4 error:(id*)arg5 ;
-(id)operationWithRemoteSegment:(id)arg1 localSegment:(id)arg2 userInfo:(id)arg3 schedulerDelegate:(id)arg4 ;
-(void)scheduleOperation:(id)arg1 ;
-(void)cancelMatchingOperations:(/*^block*/id)arg1 ;
-(unsigned)maxConcurrentDownloads;
-(void)maybeDequeuePendingOperation;
-(id<YTNetworkServiceDelegate>)networkServiceDelegate;
-(char)shouldPauseDownloadWithNetworkUsageState:(id)arg1 ;
-(void)pauseExecutingOperation:(id)arg1 ;
-(void)delayedSetUnpausedDownload;
-(void)beginDownloadOperation:(id)arg1 ;
-(id)operationWithRemoteSegment:(id)arg1 localSegment:(id)arg2 userInfo:(id)arg3 ;
-(void)downloadOperationDidStart:(id)arg1 ;
-(void)downloadOperation:(id)arg1 didReceiveData:(id)arg2 elapsedTime:(double)arg3 ;
-(void)downloadOperationDidComplete:(id)arg1 ;
-(void)downloadOperation:(id)arg1 didFailWithError:(id)arg2 ;
-(void)setMaxConcurrentDownloads:(unsigned)arg1 ;
-(id)pendingOperations;
-(char)pausedDownload;
-(NSTimer *)delayedSetUnpausedDownloadTimer;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(id)downloadQueue;
@end

