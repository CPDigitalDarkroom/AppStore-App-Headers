/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:24 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/BCBrowserChannelClientDelegate.h>
#import <YouTube/MDXScreenAppControllerDelegate.h>
#import <YouTube/MDXVirtualVolumeControllerDelegate.h>
#import <YouTube/YTSystemNotificationsObserver.h>
#import <YouTube/YTUserChangedObserver.h>

@protocol MDXBrowserChannelFactory, MDXScreenAppController, MDXConfig, MDXScreenSessionConnectionDelegate, YTIdentityProvider;
@class NSString, MDXBaseScreen, MDXScreenAppControllerFactory, MDXTheme, YTSystemNotifications, YTLastActionController, NSMutableArray, NSTimer, BCBrowserChannelClient, NSHashTable, MDXVirtualVolumeController, YTIAudioTrack, NSDate, MDXAdSessionState, NSArray, MDXCastMediaControlChannel;

@interface MDXScreenSession : NSObject <BCBrowserChannelClientDelegate, MDXScreenAppControllerDelegate, MDXVirtualVolumeControllerDelegate, YTSystemNotificationsObserver, YTUserChangedObserver> {

	NSString* _deviceID;
	NSString* _deviceName;
	NSString* _deviceApp;
	MDXBaseScreen* _screen;
	MDXScreenAppControllerFactory* _controllerFactory;
	id<MDXBrowserChannelFactory> _browserChannelFactory;
	id<MDXScreenAppController> _controller;
	id<MDXConfig> _config;
	MDXTheme* _theme;
	YTSystemNotifications* _systemNotifications;
	YTLastActionController* _lastActionController;
	NSMutableArray* _messageQueue;
	NSTimer* _messageTimer;
	double _reconnectionStart;
	NSTimer* _reconnectionTimer;
	NSTimer* _lastUserActionPoller;
	BCBrowserChannelClient* _browserChannel;
	NSString* _currentListID;
	double _lastKnownMediaTime;
	double _timestampOfLastKnownMediaTime;
	NSMutableArray* _connectedDevices;
	char _wasConnected;
	NSHashTable* _screenSessionObservers;
	id<MDXScreenSessionConnectionDelegate> _connectionDelegate;
	MDXVirtualVolumeController* _volumeController;
	id<YTIdentityProvider> _identityProvider;
	YTIAudioTrack* _currentAudioTrack;
	NSDate* _timeOfLastUserAction;
	int _connectionState;
	unsigned _currentIndex;
	int _MDXPlayerState;
	NSString* _currentVideoID;
	NSString* _firstVideoID;
	int _volume;
	MDXAdSessionState* _adSessionState;
	NSArray* _availableAudioTracks;

}

@property (nonatomic,readonly) id<MDXScreen> screen;                                       //@synthesize screen=_screen - In the implementation block
@property (nonatomic,readonly) MDXCastMediaControlChannel * audioCastHandler; 
@property (nonatomic,readonly) int connectionState;                                        //@synthesize connectionState=_connectionState - In the implementation block
@property (nonatomic,readonly) unsigned currentIndex;                                      //@synthesize currentIndex=_currentIndex - In the implementation block
@property (nonatomic,readonly) int MDXPlayerState;                                         //@synthesize MDXPlayerState=_MDXPlayerState - In the implementation block
@property (nonatomic,readonly) NSString * currentVideoID;                                  //@synthesize currentVideoID=_currentVideoID - In the implementation block
@property (nonatomic,readonly) NSString * firstVideoID;                                    //@synthesize firstVideoID=_firstVideoID - In the implementation block
@property (nonatomic,readonly) double currentVideoProgress; 
@property (assign,nonatomic) int volume;                                                   //@synthesize volume=_volume - In the implementation block
@property (nonatomic,readonly) MDXAdSessionState * adSessionState;                         //@synthesize adSessionState=_adSessionState - In the implementation block
@property (nonatomic,readonly) NSArray * availableAudioTracks;                             //@synthesize availableAudioTracks=_availableAudioTracks - In the implementation block
@property (nonatomic,readonly) YTIAudioTrack * currentAudioTrack; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)capabilityQueryParameterForConfig:(id)arg1 ;
+(id)experimentQueryParameterForConfig:(id)arg1 ;
-(void)appDidBecomeActive:(id)arg1 ;
-(void)appDidEnterBackground:(id)arg1 ;
-(void)userDidChange;
-(void)addScreenSessionObserver:(id)arg1 ;
-(void)setAutoplayEnabledForTV:(char)arg1 ;
-(void)setWatchEndpoint:(id)arg1 ;
-(void)dismissAutoplay;
-(void)replay;
-(NSString *)firstVideoID;
-(void)removeScreenSessionObserver:(id)arg1 ;
-(NSString *)currentVideoID;
-(id)currentListID;
-(void)addVideoWithID:(id)arg1 ;
-(void)addVideosWithPlaylistID:(id)arg1 ;
-(char)isCurrentListIDEqualToListID:(id)arg1 ;
-(void)clearPlaylist;
-(void)removeVideoWithID:(id)arg1 ;
-(MDXCastMediaControlChannel *)audioCastHandler;
-(void)screenAppControllerDidAskForDisconnect;
-(void)seekTo:(double)arg1 ;
-(MDXAdSessionState *)adSessionState;
-(void)skipAd;
-(double)currentVideoProgress;
-(int)MDXPlayerState;
-(void)setAudioTrack:(id)arg1 forVideoID:(id)arg2 ;
-(void)setCaptionTrack:(id)arg1 withStyle:(id)arg2 forVideoID:(id)arg3 ;
-(void)unsetCaptionTrackForVideoID:(id)arg1 ;
-(NSArray *)availableAudioTracks;
-(void)disconnectWithUserAction:(char)arg1 ;
-(void)stopLastUserActionPoller;
-(void)createVolumeController;
-(void)connectToOnlineScreenWithWatchEndpoint:(id)arg1 uiParam:(char)arg2 ;
-(id)createListIDForRemoteQueue;
-(void)sendMessage:(id)arg1 withParams:(id)arg2 ;
-(void)clearAutoplay;
-(void)notifyAutoplayModeChanged:(int)arg1 ;
-(void)setLastKnownMediaTime:(double)arg1 ;
-(id)safeVideoIDFromString:(id)arg1 ;
-(int)safePlayerStateFromObject:(id)arg1 ;
-(void)loungeStatusWithConnectedDevices:(id)arg1 ;
-(void)loungeScreenDisconnectedWithVideo:(id)arg1 withCurrentTime:(int)arg2 withPlayerState:(int)arg3 ;
-(void)playlistModifiedWithVideoID:(id)arg1 listID:(id)arg2 videoIndex:(unsigned)arg3 firstVideoID:(id)arg4 ;
-(void)nowPlayingWithVideoID:(id)arg1 currentTime:(double)arg2 state:(int)arg3 videoIndex:(unsigned)arg4 listID:(id)arg5 firstVideoID:(id)arg6 ;
-(void)videoStateChanged:(int)arg1 withCurrentTime:(double)arg2 ;
-(void)prepareToReconnectAfterErrorWithDelay:(double)arg1 ;
-(void)adPlayingWithAdDuration:(double)arg1 currentTime:(double)arg2 isSkippable:(char)arg3 adState:(int)arg4 adVideoID:(id)arg5 ;
-(void)adStateChanged:(int)arg1 withCurrentTime:(double)arg2 isSkipEnabled:(char)arg3 ;
-(void)nowAutoplaying;
-(void)autoplayDismissed;
-(void)autoplayModeChanged:(id)arg1 ;
-(void)autoplayUpNext:(id)arg1 ;
-(void)onAudioTrackListChanged:(id)arg1 ;
-(void)onAudioTrackChanged:(id)arg1 ;
-(void)updateUser;
-(void)destroyVolumeController;
-(void)notifyVideoDidChange;
-(void)setMDXPlayerState:(int)arg1 ;
-(void)notifyPlayerStateDidChange;
-(void)setMDXPlayerStateWithAdState:(int)arg1 ;
-(void)notifyAutoplayStateChanged:(int)arg1 ;
-(void)notifyAutoplayUpNext:(id)arg1 ;
-(void)notifyAudioTrackListChanged:(id)arg1 ;
-(id)channelWithLoungeToken:(id)arg1 ;
-(void)stopReceiverApplicationIfNeededWithUserAction:(char)arg1 ;
-(void)reconnectAfterError:(id)arg1 ;
-(void)sendDataDelayed;
-(void)startLastUserActionPoller;
-(void)notifyConnectionStateDidChange;
-(void)connectionStateDidChange:(int)arg1 ;
-(void)recordUserActivityIfAnyHasOccurred;
-(void)recordUserActivity;
-(char)isAdState;
-(void)browserChannelConnected:(id)arg1 ;
-(void)browserChannel:(id)arg1 didReceiveMessage:(id)arg2 withId:(int)arg3 ;
-(void)browserChannel:(id)arg1 disconnectedWithPendingData:(id)arg2 ;
-(void)browserChannel:(id)arg1 failedWithError:(id)arg2 ;
-(void)didPressVolumeUp;
-(void)didPressVolumeDown;
-(id)initWithScreen:(id)arg1 controllerFactory:(id)arg2 browserChannelFactory:(id)arg3 config:(id)arg4 dataServices:(id)arg5 theme:(id)arg6 ;
-(void)connectWithWatchEndpoint:(id)arg1 ;
-(id)browserChannel;
-(int)connectionState;
-(void)play;
-(void)setVolume:(int)arg1 ;
-(void)dealloc;
-(id)init;
-(id<MDXScreen>)screen;
-(void)stop;
-(unsigned)currentIndex;
-(id)baseURL;
-(void)pause;
-(id)messageQueue;
-(void)setConnectionState:(int)arg1 ;
-(void)setConnectionDelegate:(id)arg1 ;
-(int)volume;
-(YTIAudioTrack *)currentAudioTrack;
@end

