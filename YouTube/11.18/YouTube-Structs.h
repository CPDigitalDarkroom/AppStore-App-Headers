/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:50:08 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSOutputStream, NSData, NSString, GCKPB_PBGeneratedMessage, GCKPB_PBArray, GCKPB_PBEnumDescriptor, PBGeneratedMessage, PBArray, PBEnumDescriptor, EXODataBuffer;

typedef struct __CVBuffer* CVBufferRef;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<YTIEdit_Effect_EffectType, std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::less<YTIEdit_Effect_EffectType>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<YTIEdit_Effect_EffectType, std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::less<YTIEdit_Effect_EffectType>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<YTIEdit_Effect_EffectType, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<YTIEdit_Effect_EffectType, int>, void *> > >;

typedef struct _tree<std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::__map_value_compare<YTIEdit_Effect_EffectType, std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::less<YTIEdit_Effect_EffectType>, true>, std::__1::allocator<std::__1::__value_type<YTIEdit_Effect_EffectType, int> > > {
	__tree_node<std::__1::__value_type<YTIEdit_Effect_EffectType, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<YTIEdit_Effect_EffectType, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<YTIEdit_Effect_EffectType, std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::less<YTIEdit_Effect_EffectType>, true> > __pair3_;
} tree<std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::__map_value_compare<YTIEdit_Effect_EffectType, std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::less<YTIEdit_Effect_EffectType>, true>, std::__1::allocator<std::__1::__value_type<YTIEdit_Effect_EffectType, int> > >;

typedef struct map<YTIEdit_Effect_EffectType, int, std::__1::less<YTIEdit_Effect_EffectType>, std::__1::allocator<std::__1::pair<const YTIEdit_Effect_EffectType, int> > > {
	tree<std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::__map_value_compare<YTIEdit_Effect_EffectType, std::__1::__value_type<YTIEdit_Effect_EffectType, int>, std::__1::less<YTIEdit_Effect_EffectType>, true>, std::__1::allocator<std::__1::__value_type<YTIEdit_Effect_EffectType, int> > > __tree_;
} map<YTIEdit_Effect_EffectType, int, std::__1::less<YTIEdit_Effect_EffectType>, std::__1::allocator<std::__1::pair<const YTIEdit_Effect_EffectType, int> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType> > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType> > >;

typedef struct map<std::__1::basic_string<char>, YTIEdit_Effect_EffectType, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, YTIEdit_Effect_EffectType> > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, YTIEdit_Effect_EffectType> > > __tree_;
} map<std::__1::basic_string<char>, YTIEdit_Effect_EffectType, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, YTIEdit_Effect_EffectType> > >;

typedef struct _NSZone* NSZoneRef;

typedef struct SSLContext* SSLContextRef;

typedef struct __SecTrust* SecTrustRef;

typedef struct CGColor* CGColorRef;

typedef struct __SecKey* SecKeyRef;

typedef struct __CTFontDescriptor* CTFontDescriptorRef;

typedef struct in_addr {
	unsigned s_addr;
} in_addr;

typedef struct sockaddr_in {
	unsigned char sin_len;
	unsigned char sin_family;
	unsigned short sin_port;
	in_addr sin_addr;
	char sin_zero[8];
} sockaddr_in;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct {
	unsigned long field1;
	id field2;
	unsigned long field3;
	unsigned long field4[5];
} SCD_Struct_GC19;

typedef struct PBInputBufferState {
	char* bytes;
	unsigned bufferSize;
	unsigned bufferPos;
	unsigned currentLimit;
} PBInputBufferState;

typedef struct __CFString* CFStringRef;

typedef struct PBOutputBufferState {
	char* bytes;
	unsigned size;
	unsigned position;
	NSOutputStream* output;
} PBOutputBufferState;

typedef union {
	char valueBool;
	unsigned valueFixed32;
	int valueSFixed32;
	float valueFloat;
	unsigned long long valueFixed64;
	long long valueSFixed64;
	double valueDouble;
	int valueInt32;
	long long valueInt64;
	int valueSInt32;
	long long valueSInt64;
	unsigned valueUInt32;
	unsigned long long valueUInt64;
	NSData* valueData;
	NSString* valueString;
	GCKPB_PBGeneratedMessage* valueMessage;
	GCKPB_PBGeneratedMessage* valueGroup;
	int valueEnum;
	GCKPB_PBArray* valueArray;
	id valueObject;
} SCD_Union_GC23;

typedef union {
	GCKPB_PBEnumDescriptor* enumDescriptor_;
	/*function pointer*/void* enumVerifier_;
} SCD_Union_GC24;

typedef struct PBGeneratedMessage_Storage* PBGeneratedMessage_StorageRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct FKArchivedFeedbackReportMetadata {
	unsigned length;
	unsigned version;
	long long timestamp;
} FKArchivedFeedbackReportMetadata;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct OpaqueAudioComponentInstance* OpaqueAudioComponentInstanceRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct OpaqueAudioFileID* OpaqueAudioFileIDRef;

typedef struct OpaqueExtAudioFile* OpaqueExtAudioFileRef;

typedef struct SpeexBits {
	char* chars;
	int nbBits;
	int charPtr;
	int bitPtr;
	int owner;
	int overflow;
	int buf_size;
	int reserved1;
	void reserved2;
} SpeexBits;

typedef struct SpeexPreprocessState_* SpeexPreprocessState_Ref;

typedef struct {
	float field1;
	CGSize field2;
	float field3;
	float field4;
	CGSize field5;
	float field6;
} SCD_Struct_GS38;

typedef struct __CTFrame* CTFrameRef;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct {
	long long field1;
	int field2;
	unsigned field3;
	long long field4;
} SCD_Struct_YT42;

typedef struct {
	SCD_Struct_YT42 field1;
	SCD_Struct_YT42 field2;
} SCD_Struct_YT43;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_YT44;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct {
	SCD_Struct_YT44 start;
	SCD_Struct_YT44 duration;
} SCD_Struct_YT46;

typedef struct CGImage* CGImageRef;

typedef struct __CVOpenGLESTextureCache* CVOpenGLESTextureCacheRef;

typedef struct _compressed_pair<drishti::GpuBufferMultiPool *, std::__1::default_delete<drishti::GpuBufferMultiPool> > {
	GpuBufferMultiPool __first_;
} compressed_pair<drishti::GpuBufferMultiPool *, std::__1::default_delete<drishti::GpuBufferMultiPool> >;

typedef struct unique_ptr<drishti::GpuBufferMultiPool, std::__1::default_delete<drishti::GpuBufferMultiPool> > {
	compressed_pair<drishti::GpuBufferMultiPool *, std::__1::default_delete<drishti::GpuBufferMultiPool> > __ptr_;
} unique_ptr<drishti::GpuBufferMultiPool, std::__1::default_delete<drishti::GpuBufferMultiPool> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _long {
	unsigned __cap_;
	unsigned __size_;
	char* __data_;
} long;

typedef struct _short {
	/*function pointer*/void* ;
	unsigned char __size_;
	c) __lx;
	char __data_[11];
} short;

typedef struct _raw {
	unsigned long __words[3];
} raw;

typedef struct opaque_pthread_cond_t {
	long __sig;
	char __opaque[24];
} opaque_pthread_cond_t;

typedef struct opaque_pthread_mutex_t {
	long __sig;
	char __opaque[40];
} opaque_pthread_mutex_t;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct atomic<int> {
	Ai __a_;
} atomic<int>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<drishti::CalculatorNode *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::hash<drishti::CalculatorNode *> >;

typedef struct _compressed_pair<float, std::__1::equal_to<drishti::CalculatorNode *> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<drishti::CalculatorNode *> >;

typedef struct type {
	unsigned char __lx[12];
} type;

typedef struct function<void ()> {
	type __buf_;
	__base<void ()> __f_;
} function<void ()>;

typedef struct Mutex {
	opaque_pthread_mutex_t mutex_;
} Mutex;

typedef struct CondVar {
	opaque_pthread_cond_t cv_;
} CondVar;

typedef struct _compressed_pair<drishti::CalculatorNode **, std::__1::allocator<drishti::CalculatorNode *> > {
	CalculatorNode __first_;
} compressed_pair<drishti::CalculatorNode **, std::__1::allocator<drishti::CalculatorNode *> >;

typedef struct vector<drishti::CalculatorNode *, std::__1::allocator<drishti::CalculatorNode *> > {
	CalculatorNode __begin_;
	CalculatorNode __end_;
	compressed_pair<drishti::CalculatorNode **, std::__1::allocator<drishti::CalculatorNode *> > __end_cap_;
} vector<drishti::CalculatorNode *, std::__1::allocator<drishti::CalculatorNode *> >;

typedef struct _compressed_pair<drishti::CalculatorGraphSchedulerItem *, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> > {
	CalculatorGraphSchedulerItem __first_;
} compressed_pair<drishti::CalculatorGraphSchedulerItem *, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> >;

typedef struct vector<drishti::CalculatorGraphSchedulerItem, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> > {
	CalculatorGraphSchedulerItem __begin_;
	CalculatorGraphSchedulerItem __end_;
	compressed_pair<drishti::CalculatorGraphSchedulerItem *, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> > __end_cap_;
} vector<drishti::CalculatorGraphSchedulerItem, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> >;

typedef struct priority_queue<drishti::CalculatorGraphSchedulerItem, std::__1::vector<drishti::CalculatorGraphSchedulerItem, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> >, std::__1::less<drishti::CalculatorGraphSchedulerItem> > {
	vector<drishti::CalculatorGraphSchedulerItem, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> > c;
	less<drishti::CalculatorGraphSchedulerItem> comp;
} priority_queue<drishti::CalculatorGraphSchedulerItem, std::__1::vector<drishti::CalculatorGraphSchedulerItem, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> >, std::__1::less<drishti::CalculatorGraphSchedulerItem> >;

typedef struct _hash_node_base<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> {
	__hash_node<drishti::CalculatorNode *, void *> __next_;
} hash_node_base<std::__1::__hash_node<drishti::CalculatorNode *, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<drishti::CalculatorNode *, void *> *>, std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> > > {
	hash_node_base<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<drishti::CalculatorNode *, void *> *>, std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<drishti::CalculatorNode *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > > {
	__hash_node<drishti::CalculatorNode *, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<drishti::CalculatorNode *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<drishti::CalculatorNode *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > > {
	compressed_pair<std::__1::__hash_node<drishti::CalculatorNode *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<drishti::CalculatorNode *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > >;

typedef struct _hash_table<drishti::CalculatorNode *, std::__1::hash<drishti::CalculatorNode *>, std::__1::equal_to<drishti::CalculatorNode *>, std::__1::allocator<drishti::CalculatorNode *> > {
	unique_ptr<std::__1::__hash_node<drishti::CalculatorNode *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<drishti::CalculatorNode *, void *> *>, std::__1::allocator<std::__1::__hash_node<drishti::CalculatorNode *, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<drishti::CalculatorNode *> > __p2_;
	compressed_pair<float, std::__1::equal_to<drishti::CalculatorNode *> > __p3_;
} hash_table<drishti::CalculatorNode *, std::__1::hash<drishti::CalculatorNode *>, std::__1::equal_to<drishti::CalculatorNode *>, std::__1::allocator<drishti::CalculatorNode *> >;

typedef struct unordered_set<drishti::CalculatorNode *, std::__1::hash<drishti::CalculatorNode *>, std::__1::equal_to<drishti::CalculatorNode *>, std::__1::allocator<drishti::CalculatorNode *> > {
	hash_table<drishti::CalculatorNode *, std::__1::hash<drishti::CalculatorNode *>, std::__1::equal_to<drishti::CalculatorNode *>, std::__1::allocator<drishti::CalculatorNode *> > __table_;
} unordered_set<drishti::CalculatorNode *, std::__1::hash<drishti::CalculatorNode *>, std::__1::equal_to<drishti::CalculatorNode *>, std::__1::allocator<drishti::CalculatorNode *> >;

typedef struct _compressed_pair<ThreadPool *, std::__1::default_delete<ThreadPool> > {
	ThreadPool __first_;
} compressed_pair<ThreadPool *, std::__1::default_delete<ThreadPool> >;

typedef struct unique_ptr<ThreadPool, std::__1::default_delete<ThreadPool> > {
	compressed_pair<ThreadPool *, std::__1::default_delete<ThreadPool> > __ptr_;
} unique_ptr<ThreadPool, std::__1::default_delete<ThreadPool> >;

typedef struct CalculatorGraphScheduler {
	CalculatorGraph graph_;
	unique_ptr<ThreadPool, std::__1::default_delete<ThreadPool> > scheduler_thread_;
	int num_busy_threads_;
	priority_queue<drishti::CalculatorGraphSchedulerItem, std::__1::vector<drishti::CalculatorGraphSchedulerItem, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> >, std::__1::less<drishti::CalculatorGraphSchedulerItem> > scheduler_queue_;
	unordered_set<drishti::CalculatorNode *, std::__1::hash<drishti::CalculatorNode *>, std::__1::equal_to<drishti::CalculatorNode *>, std::__1::allocator<drishti::CalculatorNode *> > running_nodes_set_;
	priority_queue<drishti::CalculatorGraphSchedulerItem, std::__1::vector<drishti::CalculatorGraphSchedulerItem, std::__1::allocator<drishti::CalculatorGraphSchedulerItem> >, std::__1::less<drishti::CalculatorGraphSchedulerItem> > sources_queue_;
	vector<drishti::CalculatorNode *, std::__1::allocator<drishti::CalculatorNode *> > running_sources_;
	CondVar idle_cond_var_;
	CondVar termination_cond_var_;
	CondVar scheduler_cond_var_;
	CondVar scheduler_started_cond_var_;
	Mutex scheduler_mutex_;
	Mutex idle_cond_var_mutex_;
	Mutex termination_cond_var_mutex_;
	Mutex scheduler_cond_var_mutex_;
	Mutex scheduler_started_cond_var_mutex_;
	atomic<bool> scheduler_started_;
	atomic<bool> scheduler_terminated_;
	BOOL graph_input_streams_closed_;
	BOOL scheduler_paused_;
	function<void ()> termination_closure_;
} CalculatorGraphScheduler;

typedef struct _compressed_pair<util::Status *, std::__1::allocator<util::Status> > {
	Status __first_;
} compressed_pair<util::Status *, std::__1::allocator<util::Status> >;

typedef struct vector<util::Status, std::__1::allocator<util::Status> > {
	Status __begin_;
	Status __end_;
	compressed_pair<util::Status *, std::__1::allocator<util::Status> > __end_cap_;
} vector<util::Status, std::__1::allocator<util::Status> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet> > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet> > >;

typedef struct map<std::__1::basic_string<char>, drishti::Packet, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, drishti::Packet> > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, drishti::Packet> > > __tree_;
} map<std::__1::basic_string<char>, drishti::Packet, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, drishti::Packet> > >;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct PacketType {
	BOOL initialized_;
	BOOL no_packets_allowed_;
	 validate_method_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > type_name_;
	PacketType same_as_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > description_;
} PacketType;

typedef struct RepeatedPtrField<drishti::PacketGeneratorConfig> {
	Arena arena_;
	int current_size_;
	int total_size_;
	Rep rep_;
} RepeatedPtrField<drishti::PacketGeneratorConfig>;

typedef struct RepeatedPtrField<drishti::StatusHandlerConfig> {
	Arena arena_;
	int current_size_;
	int total_size_;
	Rep rep_;
} RepeatedPtrField<drishti::StatusHandlerConfig>;

typedef struct _compressed_pair<drishti::CounterFactory *, std::__1::default_delete<drishti::CounterFactory> > {
	CounterFactory __first_;
} compressed_pair<drishti::CounterFactory *, std::__1::default_delete<drishti::CounterFactory> >;

typedef struct unique_ptr<drishti::CounterFactory, std::__1::default_delete<drishti::CounterFactory> > {
	compressed_pair<drishti::CounterFactory *, std::__1::default_delete<drishti::CounterFactory> > __ptr_;
} unique_ptr<drishti::CounterFactory, std::__1::default_delete<drishti::CounterFactory> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, int> > >;

typedef struct unordered_map<std::__1::basic_string<char>, int, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, int>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, int> > > __table_;
} unordered_map<std::__1::basic_string<char>, int, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > > > >;

typedef struct _compressed_pair<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > *, std::__1::allocator<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > > > {
	unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > __first_;
} compressed_pair<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > *, std::__1::allocator<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > > >;

typedef struct vector<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> >, std::__1::allocator<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > > > {
	unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > __begin_;
	unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > __end_;
	compressed_pair<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > *, std::__1::allocator<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > > > __end_cap_;
} vector<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> >, std::__1::allocator<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > > >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > > > >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *> > >;

typedef struct unordered_map<std::__1::basic_string<char>, drishti::OutputStreamImpl *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, drishti::OutputStreamImpl *> > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, drishti::OutputStreamImpl *> > > __table_;
} unordered_map<std::__1::basic_string<char>, drishti::OutputStreamImpl *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, drishti::OutputStreamImpl *> > >;

typedef struct _compressed_pair<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > *, std::__1::allocator<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > > > {
	unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > __first_;
} compressed_pair<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > *, std::__1::allocator<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > > >;

typedef struct vector<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> >, std::__1::allocator<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > > > {
	unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > __begin_;
	unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > __end_;
	compressed_pair<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > *, std::__1::allocator<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > > > __end_cap_;
} vector<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> >, std::__1::allocator<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > > >;

typedef struct PacketGeneratorGraph {
	/*function pointer*/void* _vptr$PacketGeneratorGraph;
	map<std::__1::basic_string<char>, drishti::Packet, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, drishti::Packet> > > base_packets_;
	RepeatedPtrField<drishti::PacketGeneratorConfig> base_generators_;
} PacketGeneratorGraph;

typedef struct CalculatorGraph {
	/*function pointer*/void* _vptr$CalculatorGraph;
	BOOL initialized_;
	PacketGeneratorGraph packet_generator_graph_;
	vector<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> >, std::__1::allocator<std::__1::unique_ptr<drishti::CalculatorNode, std::__1::default_delete<drishti::CalculatorNode> > > > nodes_;
	unordered_map<std::__1::basic_string<char>, drishti::OutputStreamImpl *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, drishti::OutputStreamImpl *> > > output_streams_;
	unordered_map<std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > > > > output_stream_to_sources_map_;
	int max_queue_size_;
	int graph_input_stream_add_mode_;
	vector<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> >, std::__1::allocator<std::__1::unordered_set<const drishti::InputStreamImpl *, std::__1::hash<const drishti::InputStreamImpl *>, std::__1::equal_to<const drishti::InputStreamImpl *>, std::__1::allocator<const drishti::InputStreamImpl *> > > > full_input_streams_;
	unordered_map<std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<drishti::OutputStreamImpl, std::__1::default_delete<drishti::OutputStreamImpl> > > > > graph_input_streams_;
	unordered_map<std::__1::basic_string<char>, int, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > > graph_input_stream_node_ids_;
	unique_ptr<drishti::CounterFactory, std::__1::default_delete<drishti::CounterFactory> > counter_factory_;
	RepeatedPtrField<drishti::StatusHandlerConfig> status_handlers_;
	unique_ptr<ThreadPool, std::__1::default_delete<ThreadPool> > thread_pool_;
	PacketType any_packet_type_;
	map<std::__1::basic_string<char>, drishti::Packet, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, drishti::Packet> > > current_run_side_packets_;
	vector<util::Status, std::__1::allocator<util::Status> > errors_;
	int num_threads_;
	BOOL avoid_input_stream_deadlock_;
	CondVar wait_to_add_packet_cond_var_;
	Mutex error_mutex_;
	atomic<bool> has_error_;
	atomic<bool> scheduler_stopping_;
	Mutex full_input_streams_mutex_;
	atomic<int> num_closed_graph_input_streams_;
	CalculatorGraphScheduler scheduler_;
} CalculatorGraph;

typedef struct StrongInt<drishti::TimestampBaseType_safe_tag_, long long, util_intops::SafeIntStrongIntValidator<util_intops::LogFatalOnError> > {
	long long value_;
} StrongInt<drishti::TimestampBaseType_safe_tag_, long long, util_intops::SafeIntStrongIntValidator<util_intops::LogFatalOnError> >;

typedef struct Timestamp {
	StrongInt<drishti::TimestampBaseType_safe_tag_, long long, util_intops::SafeIntStrongIntValidator<util_intops::LogFatalOnError> > timestamp_;
} Timestamp;

typedef struct RepeatedPtrField<drishti::CalculatorGraphConfig_Node> {
	Arena arena_;
	int current_size_;
	int total_size_;
	Rep rep_;
} RepeatedPtrField<drishti::CalculatorGraphConfig_Node>;

typedef struct RepeatedPtrField<drishti::TrainingStep> {
	Arena arena_;
	int current_size_;
	int total_size_;
	Rep rep_;
} RepeatedPtrField<drishti::TrainingStep>;

typedef struct RepeatedPtrField<drishti::PacketFactoryConfig> {
	Arena arena_;
	int current_size_;
	int total_size_;
	Rep rep_;
} RepeatedPtrField<drishti::PacketFactoryConfig>;

typedef struct RepeatedPtrField<std::__1::basic_string<char> > {
	Arena arena_;
	int current_size_;
	int total_size_;
	Rep rep_;
} RepeatedPtrField<std::__1::basic_string<char> >;

typedef struct ArenaStringPtr {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ptr_;
} ArenaStringPtr;

typedef struct CalculatorGraphConfig {
	/*function pointer*/void* _vptr$MessageLite;
	ArenaStringPtr _unknown_fields_;
	Arena _arena_ptr_;
	unsigned _has_bits_[1];
	int _cached_size_;
	RepeatedPtrField<drishti::CalculatorGraphConfig_Node> node_;
	ArenaStringPtr base_model_directory_;
	RepeatedPtrField<drishti::TrainingStep> training_step_;
	RepeatedPtrField<drishti::PacketFactoryConfig> packet_factory_;
	RepeatedPtrField<drishti::PacketGeneratorConfig> packet_generator_;
	RepeatedPtrField<drishti::StatusHandlerConfig> status_handler_;
	int num_threads_;
	int max_queue_size_;
	RepeatedPtrField<std::__1::basic_string<char> > input_stream_;
	StreamHandlerConfig input_stream_handler_;
	StreamHandlerConfig output_stream_handler_;
} CalculatorGraphConfig;

typedef struct Status {
	Rep rep_;
} Status;

typedef struct GPUVector3 {
	float one;
	float two;
	float three;
} GPUVector3;

typedef struct GPUMatrix3x3 {
	GPUVector3 one;
	GPUVector3 two;
	GPUVector3 three;
} GPUMatrix3x3;

typedef struct GPUVector4 {
	float one;
	float two;
	float three;
	float four;
} GPUVector4;

typedef struct GPUMatrix4x4 {
	GPUVector4 one;
	GPUVector4 two;
	GPUVector4 three;
	GPUVector4 four;
} GPUMatrix4x4;

typedef struct GPUTextureOptions {
	unsigned minFilter;
	unsigned magFilter;
	unsigned wrapS;
	unsigned wrapT;
	unsigned internalFormat;
	unsigned format;
	unsigned type;
} GPUTextureOptions;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct CATransform3D {
	float m11;
	float m12;
	float m13;
	float m14;
	float m21;
	float m22;
	float m23;
	float m24;
	float m31;
	float m32;
	float m33;
	float m34;
	float m41;
	float m42;
	float m43;
	float m44;
} CATransform3D;

typedef struct shared_ptr<videocore::simpleApi::PixelBufferOutput> {
	PixelBufferOutput __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::simpleApi::PixelBufferOutput>;

typedef struct shared_ptr<videocore::iOS::MicSource> {
	MicSource __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::iOS::MicSource>;

typedef struct shared_ptr<videocore::iOS::CameraSource> {
	CameraSource __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::iOS::CameraSource>;

typedef struct shared_ptr<videocore::Apple::PixelBufferSource> {
	PixelBufferSource __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::Apple::PixelBufferSource>;

typedef struct shared_ptr<videocore::AspectTransform> {
	AspectTransform __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::AspectTransform>;

typedef struct shared_ptr<videocore::PositionTransform> {
	PositionTransform __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::PositionTransform>;

typedef struct shared_ptr<videocore::Split> {
	Split __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::Split>;

typedef struct shared_ptr<videocore::IAudioMixer> {
	IAudioMixer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::IAudioMixer>;

typedef struct shared_ptr<videocore::IVideoMixer> {
	IVideoMixer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::IVideoMixer>;

typedef struct shared_ptr<videocore::ITransform> {
	ITransform __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::ITransform>;

typedef struct shared_ptr<videocore::Apple::MP4Multiplexer> {
	MP4Multiplexer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::Apple::MP4Multiplexer>;

typedef struct shared_ptr<videocore::IOutputSession> {
	IOutputSession __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<videocore::IOutputSession>;

typedef struct weak_ptr<videocore::iOS::CameraSource> {
	CameraSource __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<videocore::iOS::CameraSource>;

typedef struct {
	void bytes;
	unsigned bufferSize;
	unsigned bufferPos;
} SCD_Struct_GC169;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct __CFHost* CFHostRef;

typedef struct __CFSocket* CFSocketRef;

typedef union GLKMatrix4 {
	CATransform3D field1;
	float m[16];
} GLKMatrix4;

typedef union GLKVector2 {
	CGPoint field1;
	CGPoint field2;
	float v[2];
} GLKVector2;

typedef struct {
	double field1;
	double field2;
	double field3;
} SCD_Struct_YT176;

typedef struct CGContext* CGContextRef;

typedef struct __CTFont* CTFontRef;

typedef struct {
	float field1;
	float field2;
	float field3[4];
} SCD_Struct_GO179;

typedef struct OpaqueAudioQueue* OpaqueAudioQueueRef;

typedef union {
	char valueBool;
	unsigned valueFixed32;
	int valueSFixed32;
	float valueFloat;
	unsigned long long valueFixed64;
	long long valueSFixed64;
	double valueDouble;
	int valueInt32;
	long long valueInt64;
	int valueSInt32;
	long long valueSInt64;
	unsigned valueUInt32;
	unsigned long long valueUInt64;
	NSData* valueData;
	NSString* valueString;
	PBGeneratedMessage* valueMessage;
	PBGeneratedMessage* valueGroup;
	int valueEnum;
	PBArray* valueArray;
	id valueObject;
} SCD_Union_PB181;

typedef union {
	PBEnumDescriptor* enumDescriptor_;
	/*function pointer*/void* enumVerifier_;
} SCD_Union_PB182;

typedef struct {
	int re_magic;
	unsigned re_nsub;
	char* re_endp;
	const e_guts re_g;
} SCD_Struct_GT183;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_GT184;

typedef struct {
	char dragging;
	CGPoint dragStartOffset;
	CGPoint contentOffset;
	char isLiveTransformRegion;
	char endedDragInHeaderLayoutRegion;
	char handlingOffset;
} SCD_Struct_GO185;

typedef struct {
	CGRect field1;
	CGRect field2;
	CGRect field3;
	CGRect field4;
} SCD_Struct_GO186;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct {
	int version;
	void info;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
} SCD_Struct_GC188;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct __asl_object_s* asl_object_sRef;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct {
	unsigned char field1;
} SCD_Struct_EX193;

typedef struct {
	SCD_Struct_YT44 field1;
	SCD_Struct_YT44 field2;
	SCD_Struct_YT44 field3;
} SCD_Struct_EX194;

typedef struct OpaqueCMBlockBuffer* OpaqueCMBlockBufferRef;

typedef struct OpaqueVTDecompressionSession* OpaqueVTDecompressionSessionRef;

typedef struct __CVMetalTextureCache* CVMetalTextureCacheRef;

typedef struct _compressed_pair<dash2hls::DashParser *, std::__1::default_delete<dash2hls::DashParser> > {
	DashParser __first_;
} compressed_pair<dash2hls::DashParser *, std::__1::default_delete<dash2hls::DashParser> >;

typedef struct unique_ptr<dash2hls::DashParser, std::__1::default_delete<dash2hls::DashParser> > {
	compressed_pair<dash2hls::DashParser *, std::__1::default_delete<dash2hls::DashParser> > __ptr_;
} unique_ptr<dash2hls::DashParser, std::__1::default_delete<dash2hls::DashParser> >;

typedef struct _compressed_pair<const dash2hls::Box **, std::__1::allocator<const dash2hls::Box *> > {
	Box __first_;
} compressed_pair<const dash2hls::Box **, std::__1::allocator<const dash2hls::Box *> >;

typedef struct vector<const dash2hls::Box *, std::__1::allocator<const dash2hls::Box *> > {
	Box __begin_;
	Box __end_;
	compressed_pair<const dash2hls::Box **, std::__1::allocator<const dash2hls::Box *> > __end_cap_;
} vector<const dash2hls::Box *, std::__1::allocator<const dash2hls::Box *> >;

typedef struct OpaqueAudioConverter* OpaqueAudioConverterRef;

typedef struct _compressed_pair<AudioStreamPacketDescription *, std::__1::allocator<AudioStreamPacketDescription> > {
	AudioStreamPacketDescription __first_;
} compressed_pair<AudioStreamPacketDescription *, std::__1::allocator<AudioStreamPacketDescription> >;

typedef struct vector<AudioStreamPacketDescription, std::__1::allocator<AudioStreamPacketDescription> > {
	AudioStreamPacketDescription __begin_;
	AudioStreamPacketDescription __end_;
	compressed_pair<AudioStreamPacketDescription *, std::__1::allocator<AudioStreamPacketDescription> > __end_cap_;
} vector<AudioStreamPacketDescription, std::__1::allocator<AudioStreamPacketDescription> >;

typedef struct _compressed_pair<void **, std::__1::allocator<void *> > {
	void __first_;
} compressed_pair<void **, std::__1::allocator<void *> >;

typedef struct vector<void *, std::__1::allocator<void *> > {
	void __begin_;
	void __end_;
	compressed_pair<void **, std::__1::allocator<void *> > __end_cap_;
} vector<void *, std::__1::allocator<void *> >;

typedef struct EXOFramePriorityQueue {
	vector<void *, std::__1::allocator<void *> > c;
	EXOFrameCompare comp;
} EXOFramePriorityQueue;

typedef struct vpx_codec_ctx {
	char* name;
	vpx_codec_iface iface;
	int err;
	char* err_detail;
	int init_flags;
	/*function pointer*/void* config;
	vpx_codec_dec_cfg dec;
	vpx_codec_enc_cfg enc;
	v) raw;
	vpx_codec_priv priv;
} vpx_codec_ctx;

typedef struct EXOWebMDASHDataBufferReader {
	/*function pointer*/void* _vptr$Reader;
	EXODataBuffer* _buffer;
	unsigned long long _position;
	BOOL _isLoaded;
} EXOWebMDASHDataBufferReader;

typedef struct _compressed_pair<Frame *, std::__1::allocator<Frame> > {
	Frame __first_;
} compressed_pair<Frame *, std::__1::allocator<Frame> >;

typedef struct vector<Frame, std::__1::allocator<Frame> > {
	Frame __begin_;
	Frame __end_;
	compressed_pair<Frame *, std::__1::allocator<Frame> > __end_cap_;
} vector<Frame, std::__1::allocator<Frame> >;

typedef struct EXOWebMDASHMediaChunkFrameCallback {
	/*function pointer*/void* _vptr$Callback;
	unsigned long long _clusterTimecode;
	unsigned long long _framePTS;
	unsigned long long _chunkEndTime;
	vector<Frame, std::__1::allocator<Frame> > _frames;
	unsigned _currentFrameIndex;
	NSString* _errorDetails;
} EXOWebMDASHMediaChunkFrameCallback;

typedef struct _compressed_pair<video_webm_parser::WebmParser::DocumentParser *, std::__1::default_delete<video_webm_parser::WebmParser::DocumentParser> > {
	DocumentParser __first_;
} compressed_pair<video_webm_parser::WebmParser::DocumentParser *, std::__1::default_delete<video_webm_parser::WebmParser::DocumentParser> >;

typedef struct unique_ptr<video_webm_parser::WebmParser::DocumentParser, std::__1::default_delete<video_webm_parser::WebmParser::DocumentParser> > {
	compressed_pair<video_webm_parser::WebmParser::DocumentParser *, std::__1::default_delete<video_webm_parser::WebmParser::DocumentParser> > __ptr_;
} unique_ptr<video_webm_parser::WebmParser::DocumentParser, std::__1::default_delete<video_webm_parser::WebmParser::DocumentParser> >;

typedef struct WebmParser {
	unique_ptr<video_webm_parser::WebmParser::DocumentParser, std::__1::default_delete<video_webm_parser::WebmParser::DocumentParser> > parser_;
	Status parsing_status_;
} WebmParser;

typedef struct _compressed_pair<KeyFrameIndex *, std::__1::allocator<KeyFrameIndex> > {
	KeyFrameIndex __first_;
} compressed_pair<KeyFrameIndex *, std::__1::allocator<KeyFrameIndex> >;

typedef struct vector<KeyFrameIndex, std::__1::allocator<KeyFrameIndex> > {
	KeyFrameIndex __begin_;
	KeyFrameIndex __end_;
	compressed_pair<KeyFrameIndex *, std::__1::allocator<KeyFrameIndex> > __end_cap_;
} vector<KeyFrameIndex, std::__1::allocator<KeyFrameIndex> >;

typedef struct _compressed_pair<EXOWebMCue *, std::__1::allocator<EXOWebMCue> > {
	EXOWebMCue __first_;
} compressed_pair<EXOWebMCue *, std::__1::allocator<EXOWebMCue> >;

typedef struct vector<EXOWebMCue, std::__1::allocator<EXOWebMCue> > {
	EXOWebMCue __begin_;
	EXOWebMCue __end_;
	compressed_pair<EXOWebMCue *, std::__1::allocator<EXOWebMCue> > __end_cap_;
} vector<EXOWebMCue, std::__1::allocator<EXOWebMCue> >;

typedef struct shared_ptr<gvr::CardboardApiImpl> {
	CardboardApiImpl __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<gvr::CardboardApiImpl>;

typedef struct SharedPtr<ion::gfx::Renderer> {
	Renderer ptr_;
	Shareable shr_;
} SharedPtr<ion::gfx::Renderer>;

typedef struct _compressed_pair<gvr::OffscreenFramebuffer *, std::__1::default_delete<gvr::OffscreenFramebuffer> > {
	OffscreenFramebuffer __first_;
} compressed_pair<gvr::OffscreenFramebuffer *, std::__1::default_delete<gvr::OffscreenFramebuffer> >;

typedef struct unique_ptr<gvr::OffscreenFramebuffer, std::__1::default_delete<gvr::OffscreenFramebuffer> > {
	compressed_pair<gvr::OffscreenFramebuffer *, std::__1::default_delete<gvr::OffscreenFramebuffer> > __ptr_;
} unique_ptr<gvr::OffscreenFramebuffer, std::__1::default_delete<gvr::OffscreenFramebuffer> >;

typedef struct _compressed_pair<gvr::RenderStats *, std::__1::default_delete<gvr::RenderStats> > {
	RenderStats __first_;
} compressed_pair<gvr::RenderStats *, std::__1::default_delete<gvr::RenderStats> >;

typedef struct unique_ptr<gvr::RenderStats, std::__1::default_delete<gvr::RenderStats> > {
	compressed_pair<gvr::RenderStats *, std::__1::default_delete<gvr::RenderStats> > __ptr_;
} unique_ptr<gvr::RenderStats, std::__1::default_delete<gvr::RenderStats> >;

typedef struct _compressed_pair<gvr::RenderTextureParams *, std::__1::allocator<gvr::RenderTextureParams> > {
	RenderTextureParams __first_;
} compressed_pair<gvr::RenderTextureParams *, std::__1::allocator<gvr::RenderTextureParams> >;

typedef struct vector<gvr::RenderTextureParams, std::__1::allocator<gvr::RenderTextureParams> > {
	RenderTextureParams __begin_;
	RenderTextureParams __end_;
	compressed_pair<gvr::RenderTextureParams *, std::__1::allocator<gvr::RenderTextureParams> > __end_cap_;
} vector<gvr::RenderTextureParams, std::__1::allocator<gvr::RenderTextureParams> >;

typedef struct shared_ptr<gvr::CardboardApi> {
	CardboardApi __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<gvr::CardboardApi>;

typedef struct Vector<4, float> {
	float elem_[4];
} Vector<4, float>;

typedef struct Point<3, float> {
	float elem_[3];
} Point<3, float>;

typedef struct Rotation<float> {
	Vector<4, float> quat_;
} Rotation<float>;

typedef struct Pose<float> {
	Rotation<float> rotation_;
	Point<3, float> position_;
} Pose<float>;

typedef struct shared_ptr<vr::PanoRenderer> {
	PanoRenderer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vr::PanoRenderer>;

typedef struct shared_ptr<vr::PanoVideoRenderer> {
	PanoVideoRenderer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vr::PanoVideoRenderer>;

typedef struct {
	CGPoint field1;
	CGPoint field2;
} SCD_Struct_QT235;

typedef struct CGPath* CGPathRef;

typedef struct __CTLine* CTLineRef;

typedef struct __CTRun* CTRunRef;

typedef struct dispatch_queue_s* dispatch_queue_sRef;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void mData;
} AudioBuffer;

typedef struct AudioBufferList {
	unsigned mNumberBuffers;
	AudioBuffer mBuffers[1];
} AudioBufferList;

typedef struct __CFURL* CFURLRef;

