/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, May 18, 2016 at 11:49:29 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/FFD4619E-59E7-49B9-AD90-0E28F5807C56/YouTube.app/YouTube
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <YouTube/YouTube-Structs.h>
#import <UIKit/UIViewController.h>
#import <UIKit/UIAlertViewDelegate.h>
#import <UIKit/UIActionSheetDelegate.h>
#import <UIKit/UIWebViewDelegate.h>

@protocol GIPWebViewControllerDelegate, GIPWebViewToolbarProtocol;
@class GIPWebView, UIBarButtonItem, UIToolbar, UIActivityIndicatorView, UIAlertView, NSURL, UIActionSheet, NSString, NSURLRequest, GIPWebViewHistory, GIPResourceLoader, UIColor;

@interface GIPWebViewController : UIViewController <UIAlertViewDelegate, UIActionSheetDelegate, UIWebViewDelegate> {

	id<GIPWebViewControllerDelegate> delegate_;
	GIPWebView* webView_;
	UIBarButtonItem* backItem_;
	UIBarButtonItem* forwardItem_;
	UIBarButtonItem* safariItem_;
	UIBarButtonItem* externalBrowserItem_;
	UIBarButtonItem* reloadItem_;
	UIToolbar* internalToolbar_;
	UIActivityIndicatorView* spinner_;
	char detectExternalURLs_;
	char showSpinnerInToolbar_;
	char showsSpinner_;
	char showsToolbar_;
	char alwaysEnableBackButton_;
	char usePageTitleAsViewTitle_;
	char rewriteNewWindowLinks_;
	char showErrorPageOnLoadFail_;
	char showsOpenInSafariInToolbar_;
	char showPromptWhenOpeningSafari_;
	UIAlertView* openInSafariPrompt_;
	NSURL* openInSafariURL_;
	char allowBrowserSelection_;
	char shouldShowChromeDownloadOption_;
	int maxDownloadChromeImpressions_;
	UIActionSheet* openInBrowserActionSheet_;
	int safariButtonIndex_;
	int chromeButtonIndex_;
	int copyLinkButtonIndex_;
	char showingChromeDownloadOption_;
	NSURL* callbackURL_;
	char createNewTab_;
	NSURL* currentURL_;
	NSString* currentPageTitle_;
	char webViewLoaded_;
	NSURLRequest* initialRequest_;
	int numberOfItemsLoading_;
	GIPWebViewHistory* history_;
	id<GIPWebViewToolbarProtocol> toolbar_;
	CGRect webViewFrame_;
	GIPResourceLoader* loader_;
	Class webViewClass_;
	unsigned cachePolicy_;
	double timeoutInterval_;
	UIColor* toolbarColor_;
	char clearHistoryOnLoad_;
	char shouldAutorotate_;
	char _disableDefaultDialerRequestHandling;
	NSURL* failedURL_;
	UIColor* toolbarButtonTintColor_;
	unsigned supportedInterfaceOrientations_;
	int minimumAgeForURLs_;

}

@property (nonatomic,retain) NSURL * callbackURL; 
@property (assign,nonatomic) char createNewTab; 
@property (nonatomic,copy) NSString * currentPageTitle; 
@property (nonatomic,retain) NSURL * currentURL; 
@property (assign,nonatomic) id<GIPWebViewControllerDelegate> delegate; 
@property (assign,nonatomic) char detectExternalURLs; 
@property (nonatomic,retain) GIPWebViewHistory * history; 
@property (nonatomic,retain) NSURLRequest * initialRequest; 
@property (assign,nonatomic) char rewriteNewWindowLinks; 
@property (assign,nonatomic) char showErrorPageOnLoadFail; 
@property (assign,nonatomic) char showPromptWhenOpeningSafari; 
@property (assign,nonatomic) char allowBrowserSelection; 
@property (assign,nonatomic) char shouldShowChromeDownloadOption; 
@property (assign,nonatomic) int maxDownloadChromeImpressions; 
@property (assign,nonatomic) char showSpinnerInToolbar; 
@property (assign,nonatomic) char showsSpinner; 
@property (assign,nonatomic) char showsToolbar; 
@property (assign,nonatomic) char showsOpenInSafariInToolbar; 
@property (assign,nonatomic) id<GIPWebViewToolbarProtocol> toolbar; 
@property (assign,nonatomic) CGRect webViewFrame; 
@property (nonatomic,retain) GIPWebView * webView; 
@property (nonatomic,readonly) char webViewLoaded; 
@property (assign,nonatomic) char usePageTitleAsViewTitle; 
@property (assign,nonatomic) unsigned cachePolicy; 
@property (assign,nonatomic) double timeoutInterval; 
@property (nonatomic,retain) UIColor * toolbarColor; 
@property (nonatomic,retain) UIColor * toolbarButtonTintColor; 
@property (assign,nonatomic) char clearHistoryOnLoad; 
@property (nonatomic,readonly) int numberOfItemsLoading; 
@property (assign,nonatomic) char shouldAutorotate; 
@property (assign,nonatomic) unsigned supportedInterfaceOrientations; 
@property (assign,nonatomic) int minimumAgeForURLs; 
@property (assign,nonatomic) char disableDefaultDialerRequestHandling;               //@synthesize disableDefaultDialerRequestHandling=_disableDefaultDialerRequestHandling - In the implementation block
@property (nonatomic,retain) NSURL * failedURL; 
@property (nonatomic,retain) NSURL * openInSafariURL; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)URLValidForSafari:(id)arg1 ;
-(char)isChromeInstalled;
-(NSURL *)callbackURL;
-(void)setToolbarColor:(UIColor *)arg1 ;
-(void)setCurrentURL:(NSURL *)arg1 ;
-(NSURL *)currentURL;
-(char)createNewTab;
-(void)setCreateNewTab:(char)arg1 ;
-(id)initWithDelegate:(id)arg1 loader:(id)arg2 ;
-(id)initWithDelegate:(id)arg1 loader:(id)arg2 webViewClass:(Class)arg3 ;
-(id)initWithDelegate:(id)arg1 loader:(id)arg2 webViewClass:(Class)arg3 clearHistoryOnLoad:(char)arg4 ;
-(id)createWebViewIfNeeded;
-(CGRect)webViewFrame;
-(void)loadToolbar;
-(CGRect)toolbarFrame;
-(id)makeInternalToolbar;
-(void)openInSafari;
-(char)shouldDisplayExternalBrowserSelection;
-(void)applyToolbarButtonTintColor;
-(void)setBackButtonEnabled:(char)arg1 ;
-(void)setForwardButtonEnabled:(char)arg1 ;
-(void)setReloadButtonEnabled:(char)arg1 ;
-(void)setSafariButtonEnabled:(char)arg1 ;
-(id)safariURL;
-(void)updateLaunchButton:(char)arg1 ;
-(char)showsToolbar;
-(void)unloadToolbar;
-(void)setInitialRequest:(NSURLRequest *)arg1 ;
-(char)disableDefaultDialerRequestHandling;
-(int)minimumAgeForURLs;
-(void)updateToolbarState;
-(void)addURLToHistory:(id)arg1 ;
-(id)getPageTitle;
-(void)setFailedURL:(NSURL *)arg1 ;
-(void)displayErrorMessage:(id)arg1 withReload:(char)arg2 ;
-(void)recordCurrentRequestInHistory;
-(char)shouldCallDidExhaustHistoryStack;
-(void)callDidExhaustHistoryStack;
-(void)openURLInSafari:(id)arg1 ;
-(void)updateSpinnerFrame;
-(char)shouldShowChromeDownloadOption;
-(void)setOpenInSafariURL:(NSURL *)arg1 ;
-(void)showBrowserSelectionPrompt;
-(void)showOpenInSafariPrompt;
-(void)didShowChromeDownloadOption;
-(NSURL *)openInSafariURL;
-(id)convertURLToChrome:(id)arg1 ;
-(id)appStoreURLForChrome;
-(id)initWithDelegate:(id)arg1 webViewClass:(Class)arg2 ;
-(void)setWebViewFrame:(CGRect)arg1 ;
-(void)setShowsToolbar:(char)arg1 ;
-(void)showsOpenInSafariInToolbar:(char)arg1 ;
-(void)loadHTML:(id)arg1 baseURL:(id)arg2 ;
-(void)emptyPage;
-(void)resetChromeDownloadOptionImpressions;
-(void)setToolbarButtonTintColor:(UIColor *)arg1 ;
-(void)setCallbackURL:(NSURL *)arg1 ;
-(NSString *)currentPageTitle;
-(void)setCurrentPageTitle:(NSString *)arg1 ;
-(char)detectExternalURLs;
-(void)setDetectExternalURLs:(char)arg1 ;
-(NSURL *)failedURL;
-(int)numberOfItemsLoading;
-(char)rewriteNewWindowLinks;
-(void)setRewriteNewWindowLinks:(char)arg1 ;
-(char)showErrorPageOnLoadFail;
-(void)setShowErrorPageOnLoadFail:(char)arg1 ;
-(char)showPromptWhenOpeningSafari;
-(void)setShowPromptWhenOpeningSafari:(char)arg1 ;
-(char)allowBrowserSelection;
-(void)setAllowBrowserSelection:(char)arg1 ;
-(void)setShouldShowChromeDownloadOption:(char)arg1 ;
-(int)maxDownloadChromeImpressions;
-(void)setMaxDownloadChromeImpressions:(int)arg1 ;
-(char)showSpinnerInToolbar;
-(void)setShowSpinnerInToolbar:(char)arg1 ;
-(char)showsSpinner;
-(void)setShowsSpinner:(char)arg1 ;
-(char)showsOpenInSafariInToolbar;
-(void)setShowsOpenInSafariInToolbar:(char)arg1 ;
-(char)usePageTitleAsViewTitle;
-(void)setUsePageTitleAsViewTitle:(char)arg1 ;
-(char)webViewLoaded;
-(UIColor *)toolbarColor;
-(UIColor *)toolbarButtonTintColor;
-(char)clearHistoryOnLoad;
-(void)setClearHistoryOnLoad:(char)arg1 ;
-(void)setShouldAutorotate:(char)arg1 ;
-(void)setMinimumAgeForURLs:(int)arg1 ;
-(void)setDisableDefaultDialerRequestHandling:(char)arg1 ;
-(void)showSpinner;
-(void)loadURL:(id)arg1 ;
-(void)setDelegate:(id<GIPWebViewControllerDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(void)reload;
-(id<GIPWebViewControllerDelegate>)delegate;
-(unsigned)supportedInterfaceOrientations;
-(void)setSupportedInterfaceOrientations:(unsigned)arg1 ;
-(void)didReceiveMemoryWarning;
-(char)shouldAutorotate;
-(void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2 ;
-(void)loadView;
-(id)initWithDelegate:(id)arg1 ;
-(void)viewWillDisappear:(char)arg1 ;
-(void)didRotateFromInterfaceOrientation:(int)arg1 ;
-(id<GIPWebViewToolbarProtocol>)toolbar;
-(void)setToolbar:(id<GIPWebViewToolbarProtocol>)arg1 ;
-(GIPWebView *)webView;
-(void)setWebView:(GIPWebView *)arg1 ;
-(void)loadRequest:(id)arg1 ;
-(void)webView:(id)arg1 didFailLoadWithError:(id)arg2 ;
-(char)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(int)arg3 ;
-(void)webViewDidStartLoad:(id)arg1 ;
-(void)webViewDidFinishLoad:(id)arg1 ;
-(void)goBack;
-(void)goForward;
-(void)actionSheet:(id)arg1 clickedButtonAtIndex:(int)arg2 ;
-(id)spinner;
-(unsigned)cachePolicy;
-(void)hideSpinner;
-(void)setCachePolicy:(unsigned)arg1 ;
-(void)setTimeoutInterval:(double)arg1 ;
-(void)openExternalURL:(id)arg1 ;
-(double)timeoutInterval;
-(NSURLRequest *)initialRequest;
-(GIPWebViewHistory *)history;
-(void)setHistory:(GIPWebViewHistory *)arg1 ;
@end

