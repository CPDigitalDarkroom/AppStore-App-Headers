/*
* This header is generated by classdump-dyld 1.0
* on Friday, April 22, 2016 at 10:58:12 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D8C1ED38-25E6-459D-9E28-E2C1B463D6A5/Yik Yak.app/Yik Yak
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_dispatch_source, OS_dispatch_semaphore;
#import <Yik Yak/Yik Yak-Structs.h>
@class BFExecutor, NSObject, NSMutableDictionary, PFTaskQueue, PFEventuallyQueueTestHelper;

@interface PFEventuallyQueue : NSObject {

	BFExecutor* _synchronizationExecutor;
	NSObject*<OS_dispatch_queue> _synchronizationQueue;
	SCNetworkReachabilityRef _reachability;
	NSObject*<OS_dispatch_queue> _reachabilityQueue;
	NSObject*<OS_dispatch_queue> _processingQueue;
	NSObject*<OS_dispatch_source> _processingQueueSource;
	NSObject*<OS_dispatch_semaphore> _retryingSemaphore;
	NSMutableDictionary* _taskCompletionSources;
	PFTaskQueue* _commandEnqueueTaskQueue;
	char _monitorsReachability;
	char _connected;
	char _running;
	unsigned _maxAttemptsCount;
	PFEventuallyQueueTestHelper* _testHelper;
	double _retryInterval;

}

@property (nonatomic,readonly) unsigned maxAttemptsCount;                             //@synthesize maxAttemptsCount=_maxAttemptsCount - In the implementation block
@property (nonatomic,readonly) double retryInterval;                                  //@synthesize retryInterval=_retryInterval - In the implementation block
@property (nonatomic,readonly) unsigned commandCount; 
@property (assign) char monitorsReachability;                                         //@synthesize monitorsReachability=_monitorsReachability - In the implementation block
@property (assign,getter=isConnected,nonatomic) char connected;                       //@synthesize connected=_connected - In the implementation block
@property (nonatomic,readonly) PFEventuallyQueueTestHelper * testHelper;              //@synthesize testHelper=_testHelper - In the implementation block
@property (getter=isRunning) char running;                                            //@synthesize running=_running - In the implementation block
-(id)enqueueCommandInBackground:(id)arg1 withObject:(id)arg2 ;
-(void)_notifyTestHelperObjectUpdated;
-(id)_waitForOperationSet:(id)arg1 eventuallyPin:(id)arg2 ;
-(void)_startMonitoringNetworkReachability;
-(void)_stopMonitoringNetworkReachability;
-(id)_newIdentifierForCommand:(id)arg1 ;
-(id)_enqueueCommandInBackground:(id)arg1 object:(id)arg2 identifier:(id)arg3 ;
-(PFEventuallyQueueTestHelper *)testHelper;
-(void)_didEnqueueCommand:(id)arg1 withIdentifier:(id)arg2 taskCompletionSource:(id)arg3 ;
-(id)_pendingCommandIdentifiers;
-(void)_runCommands;
-(unsigned)maxAttemptsCount;
-(void)_runCommandsWithRetriesCount:(unsigned)arg1 ;
-(id)_commandWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(id)_didFinishRunningCommand:(id)arg1 withIdentifier:(id)arg2 resultTask:(id)arg3 ;
-(id)_runCommand:(id)arg1 withIdentifier:(id)arg2 ;
-(char)monitorsReachability;
-(void)setMonitorsReachability:(char)arg1 ;
-(id)initWithMaxAttemptsCount:(unsigned)arg1 retryInterval:(double)arg2 ;
-(id)enqueueCommandInBackground:(id)arg1 ;
-(void)removeAllCommands;
-(void)_simulateReboot;
-(int)_commandsInMemory;
-(void)_setMaxAttemptsCount:(unsigned)arg1 ;
-(void)_setRetryInterval:(double)arg1 ;
-(void)dealloc;
-(id)init;
-(void)start;
-(void)resume;
-(char)isRunning;
-(void)pause;
-(char)isConnected;
-(unsigned)commandCount;
-(void)setRunning:(char)arg1 ;
-(double)retryInterval;
-(void)setConnected:(char)arg1 ;
@end

