/*
* This header is generated by classdump-dyld 1.0
* on Friday, April 22, 2016 at 10:58:12 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/D8C1ED38-25E6-459D-9E28-E2C1B463D6A5/Yik Yak.app/Yik Yak
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSMutableArray, NSMutableDictionary, NSObject, NSDate, NSString, PFTaskQueue, PFMulticastDelegate, PFACL;

@interface PFObject : NSObject {

	char dirty;
	NSMutableArray* operationSetQueue;
	NSMutableDictionary* estimatedData;
	NSObject* lock;
	char hasBeenFetched;
	NSMutableDictionary* _dataAvailability;
	char _isDeleted;
	int _deletingEventually;
	NSMutableDictionary* serverData;
	NSMutableDictionary* hashedObjectsCache;
	NSDate* updatedAt;
	NSDate* createdAt;
	NSString* localId;
	NSString* objectId;
	NSString* parseClassName;
	char createdAsPointer;
	PFTaskQueue* _eventuallyTaskQueue;
	PFMulticastDelegate* saveDelegate;
	PFTaskQueue* taskQueue;

}

@property (readonly) NSString * parseClassName; 
@property (nonatomic,retain) NSString * objectId; 
@property (nonatomic,retain) NSDate * updatedAt; 
@property (nonatomic,retain) NSDate * createdAt; 
@property (nonatomic,retain) PFACL * ACL; 
@property (nonatomic,retain) PFMulticastDelegate * saveDelegate; 
@property (nonatomic,retain) NSString * localId; 
@property (nonatomic,retain) PFTaskQueue * taskQueue; 
+(void)fetchAll:(id)arg1 ;
+(id)objectWithoutDataWithClassName:(id)arg1 objectId:(id)arg2 ;
+(id)objectWithClassName:(id)arg1 isPointer:(char)arg2 ;
+(void)_assertValidInstanceClassName:(id)arg1 ;
+(id)objectWithoutDataWithObjectId:(id)arg1 ;
+(id)queryWithPredicate:(id)arg1 ;
+(void)registerSubclass;
+(void)assertSubclassIsRegistered:(Class)arg1 ;
+(void)collectDirtyChildren:(id)arg1 children:(id)arg2 files:(id)arg3 seen:(id)arg4 seenNew:(id)arg5 ;
+(char)canBeSerializedAsValue:(id)arg1 afterSaving:(id)arg2 error:(id*)arg3 ;
+(id)_enqueue:(/*^block*/id)arg1 forObjects:(id)arg2 ;
+(void)collectDirtyChildren:(id)arg1 children:(id)arg2 files:(id)arg3 ;
+(id)_deepSaveAsync:(id)arg1 withCurrentUser:(id)arg2 sessionToken:(id)arg3 ;
+(id)_objectFromDictionary:(id)arg1 defaultClassName:(id)arg2 completeData:(char)arg3 decoder:(id)arg4 ;
+(id)_migrateObjectInBackgroundFromFile:(id)arg1 toPin:(id)arg2 usingMigrationBlock:(/*^block*/id)arg3 ;
+(id)_objectFromDataFile:(id)arg1 error:(id*)arg2 ;
+(id)_enqueueSaveEventuallyChildrenOfObject:(id)arg1 currentUser:(id)arg2 ;
+(id)objectWithClassName:(id)arg1 ;
+(id)objectWithoutDataWithClassName:(id)arg1 localId:(id)arg2 ;
+(void)unregisterSubclass:(Class)arg1 ;
+(id)deleteAllAsync:(id)arg1 withSessionToken:(id)arg2 ;
+(id)_objectFromDictionary:(id)arg1 defaultClassName:(id)arg2 completeData:(char)arg3 ;
+(id)_objectFromDictionary:(id)arg1 defaultClassName:(id)arg2 selectedKeys:(id)arg3 ;
+(id)_migrateObjectInBackgroundFromFile:(id)arg1 toPin:(id)arg2 ;
+(void)fetchAll:(id)arg1 error:(id*)arg2 ;
+(void)fetchAllIfNeeded:(id)arg1 error:(id*)arg2 ;
+(id)fetchAllInBackground:(id)arg1 ;
+(id)fetchAllIfNeededInBackground:(id)arg1 ;
+(id)_uniqueObjectsArrayFromObjects:(id)arg1 omitObjectsWithData:(char)arg2 ;
+(void)_updateArray:(id)arg1 withResultsOfFetchAll:(id)arg2 omitObjectsWithData:(char)arg3 ;
+(void)fetchAllInBackground:(id)arg1 block:(/*^block*/id)arg2 ;
+(void)fetchAllIfNeededInBackground:(id)arg1 block:(/*^block*/id)arg2 ;
+(char)saveAll:(id)arg1 error:(id*)arg2 ;
+(id)saveAllInBackground:(id)arg1 ;
+(void)saveAllInBackground:(id)arg1 block:(/*^block*/id)arg2 ;
+(char)deleteAll:(id)arg1 error:(id*)arg2 ;
+(id)deleteAllInBackground:(id)arg1 ;
+(void)deleteAllInBackground:(id)arg1 block:(/*^block*/id)arg2 ;
+(id)_pinAllInBackground:(id)arg1 withName:(id)arg2 includeChildren:(char)arg3 ;
+(char)pinAll:(id)arg1 error:(id*)arg2 ;
+(char)pinAll:(id)arg1 withName:(id)arg2 error:(id*)arg3 ;
+(id)pinAllInBackground:(id)arg1 withName:(id)arg2 ;
+(id)pinAllInBackground:(id)arg1 ;
+(id)unpinAllInBackground:(id)arg1 withName:(id)arg2 ;
+(char)unpinAllObjects:(id*)arg1 ;
+(char)unpinAllObjectsWithName:(id)arg1 error:(id*)arg2 ;
+(id)unpinAllObjectsInBackgroundWithName:(id)arg1 ;
+(id)unpinAllObjectsInBackground;
+(char)unpinAll:(id)arg1 error:(id*)arg2 ;
+(char)unpinAll:(id)arg1 withName:(id)arg2 error:(id*)arg3 ;
+(id)unpinAllInBackground:(id)arg1 ;
+(id)objectWithClassName:(id)arg1 dictionary:(id)arg2 ;
+(void)fetchAllIfNeeded:(id)arg1 ;
+(void)fetchAllInBackground:(id)arg1 target:(id)arg2 selector:(SEL)arg3 ;
+(void)fetchAllIfNeededInBackground:(id)arg1 target:(id)arg2 selector:(SEL)arg3 ;
+(char)saveAll:(id)arg1 ;
+(void)saveAllInBackground:(id)arg1 target:(id)arg2 selector:(SEL)arg3 ;
+(void)deleteAllInBackground:(id)arg1 target:(id)arg2 selector:(SEL)arg3 ;
+(char)pinAll:(id)arg1 ;
+(char)pinAll:(id)arg1 withName:(id)arg2 ;
+(void)pinAllInBackground:(id)arg1 block:(/*^block*/id)arg2 ;
+(void)pinAllInBackground:(id)arg1 withName:(id)arg2 block:(/*^block*/id)arg3 ;
+(char)unpinAllObjects;
+(char)unpinAllObjectsWithName:(id)arg1 ;
+(void)unpinAllObjectsInBackgroundWithBlock:(/*^block*/id)arg1 ;
+(void)unpinAllObjectsInBackgroundWithName:(id)arg1 block:(/*^block*/id)arg2 ;
+(char)unpinAll:(id)arg1 ;
+(char)unpinAll:(id)arg1 withName:(id)arg2 ;
+(void)unpinAllInBackground:(id)arg1 block:(/*^block*/id)arg2 ;
+(void)unpinAllInBackground:(id)arg1 withName:(id)arg2 block:(/*^block*/id)arg3 ;
+(char)resolveInstanceMethod:(SEL)arg1 ;
+(id)query;
+(id)object;
+(void)initialize;
+(char)deleteAll:(id)arg1 ;
-(void)saveInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(void)unregisterSaveListener:(/*^block*/id)arg1 ;
-(void)registerSaveListener:(/*^block*/id)arg1 ;
-(id)getOrCreateLocalId;
-(void)mergeFromRESTDictionary:(id)arg1 withDecoder:(id)arg2 ;
-(char)_hasChanges;
-(char)_hasOutstandingOperations;
-(id)RESTDictionaryWithObjectEncoder:(id)arg1 operationSetUUIDs:(id*)arg2 ;
-(id)initWithClassName:(id)arg1 isPointer:(char)arg2 ;
-(char)isDirty:(char)arg1 ;
-(char)isDataAvailableForKey:(id)arg1 ;
-(id)ACLWithoutCopying;
-(void)checkDeleteParams;
-(id)_currentDeleteCommandWithSessionToken:(id)arg1 ;
-(char)canBeSerializedAfterSaving:(id)arg1 withCurrentUser:(id)arg2 error:(id*)arg3 ;
-(void)_checkSaveParametersWithCurrentUser:(id)arg1 ;
-(id)unsavedChanges;
-(id)_constructSaveCommandForChanges:(id)arg1 sessionToken:(id)arg2 objectEncoder:(id)arg3 ;
-(void)startSave;
-(id)handleSaveResultAsync:(id)arg1 ;
-(id)_enqueueSaveEventuallyWithChildren:(char)arg1 ;
-(void)checkForChangesToMutableContainers;
-(void)checkpointMutableContainer:(id)arg1 ;
-(void)checkForChangesToMutableContainer:(id)arg1 forKey:(id)arg2 ;
-(void)_mergeFromDataFileDictionary:(id)arg1 ;
-(id)mergeAfterFetch:(id)arg1 withCompleteData:(char)arg2 ;
-(id)_pinInBackgroundWithName:(id)arg1 includeChildren:(char)arg2 ;
-(id)convertToDictionaryForDataFile;
-(id)_enqueueSaveEventuallyOperationAsync:(id)arg1 ;
-(void)rebuildEstimatedData;
-(void)checkpointAllMutableContainers;
-(void)applyOperations:(id)arg1 toDictionary:(id)arg2 ;
-(id)mergeFromServer:(id)arg1 withCompleteData:(char)arg2 ;
-(void)removeOldKeysAfterFetch:(id)arg1 ;
-(id)_collectFetchedObjects;
-(id)mergeAfterSave:(id)arg1 ;
-(id)_saveChildrenInBackgroundWithCurrentUser:(id)arg1 sessionToken:(id)arg2 ;
-(id)_currentFetchCommandWithSessionToken:(id)arg1 ;
-(id)handleFetchResultAsync:(id)arg1 ;
-(id)handleDeleteResultAsync:(id)arg1 ;
-(id)_convertToDictionaryForSaving:(id)arg1 withObjectEncoder:(id)arg2 ;
-(char)needsDefaultACL;
-(void)setHasBeenFetched:(char)arg1 ;
-(void)resolveLocalId;
-(id)_serializeToDataFileAsyncWithFileName:(id)arg1 ;
-(void)performOperation:(id)arg1 forKey:(id)arg2 ;
-(id)mergeFromObject:(id)arg1 ;
-(id)saveAsync:(id)arg1 ;
-(id)fetchAsync:(id)arg1 ;
-(id)deleteAsync:(id)arg1 ;
-(id)displayObjectId;
-(id)displayClassName;
-(id)deleteInBackground;
-(void)deleteInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(id)saveEventually;
-(void)fetchInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2 ;
-(void)fetchInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(id)fetchInBackground;
-(id)fetchIfNeeded:(id*)arg1 ;
-(id)fetchIfNeededInBackground;
-(void)fetchIfNeededInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(void)fetchFromLocalDatastore:(id*)arg1 ;
-(id)fetchFromLocalDatastoreInBackground;
-(void)_setObject:(id)arg1 forKey:(id)arg2 onlyIfDifferent:(char)arg3 ;
-(void)addObjectsFromArray:(id)arg1 forKey:(id)arg2 ;
-(void)addUniqueObjectsFromArray:(id)arg1 forKey:(id)arg2 ;
-(void)removeObjectsInArray:(id)arg1 forKey:(id)arg2 ;
-(void)incrementKey:(id)arg1 byAmount:(id)arg2 ;
-(char)pin:(id*)arg1 ;
-(char)pinWithName:(id)arg1 error:(id*)arg2 ;
-(id)pinInBackgroundWithName:(id)arg1 ;
-(id)pinInBackground;
-(char)unpinWithName:(id)arg1 ;
-(char)unpinWithName:(id)arg1 error:(id*)arg2 ;
-(id)unpinInBackgroundWithName:(id)arg1 ;
-(id)unpinInBackground;
-(id)initWithClassName:(id)arg1 ;
-(void)deleteInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2 ;
-(void)saveInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2 ;
-(void)saveEventually:(/*^block*/id)arg1 ;
-(id)deleteEventually;
-(char)isDirtyForKey:(id)arg1 ;
-(void)refreshInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2 ;
-(void)refreshInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(id)fetchIfNeeded;
-(void)fetchIfNeededInBackgroundWithTarget:(id)arg1 selector:(SEL)arg2 ;
-(void)fetchFromLocalDatastore;
-(void)fetchFromLocalDatastoreInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(id)relationforKey:(id)arg1 ;
-(void)addUniqueObject:(id)arg1 forKey:(id)arg2 ;
-(char)pinWithName:(id)arg1 ;
-(void)pinInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(void)pinInBackgroundWithName:(id)arg1 block:(/*^block*/id)arg2 ;
-(char)unpin;
-(char)unpin:(id*)arg1 ;
-(void)unpinInBackgroundWithBlock:(/*^block*/id)arg1 ;
-(void)unpinInBackgroundWithName:(id)arg1 block:(/*^block*/id)arg2 ;
-(void)addObject:(id)arg1 forKey:(id)arg2 ;
-(id)relationForKey:(id)arg1 ;
-(void)refresh:(id*)arg1 ;
-(void)waitUntilFinished;
-(void)incrementKey:(id)arg1 ;
-(char)save;
-(id)init;
-(id)description;
-(id)objectForKeyedSubscript:(id)arg1 ;
-(void)setObject:(id)arg1 forKeyedSubscript:(id)arg2 ;
-(id)objectForKey:(id)arg1 ;
-(void)removeObjectForKey:(id)arg1 ;
-(void)setObject:(id)arg1 forKey:(id)arg2 ;
-(id)allKeys;
-(void)setDefaultValues;
-(id)lock;
-(PFTaskQueue *)taskQueue;
-(void)setTaskQueue:(PFTaskQueue *)arg1 ;
-(id)valueForUndefinedKey:(id)arg1 ;
-(char)delete:(id*)arg1 ;
-(char)save:(id*)arg1 ;
-(id)saveInBackground;
-(char)pin;
-(void)fetch:(id*)arg1 ;
-(void)setObjectId:(NSString *)arg1 ;
-(void)removeObject:(id)arg1 forKey:(id)arg2 ;
-(char)isDataAvailable;
-(char)delete;
-(void)_setDirty:(char)arg1 ;
-(char)isDirty;
-(void)fetch;
-(void)setValue:(id)arg1 forUndefinedKey:(id)arg2 ;
-(void)refresh;
@end

