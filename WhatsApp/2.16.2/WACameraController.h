/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 2:35:22 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/ABE77428-6C25-43C9-8AD9-E0579EF1E1DA/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <WhatsApp/WhatsApp-Structs.h>
#import <libobjc.A.dylib/AVCaptureVideoDataOutputSampleBufferDelegate.h>
#import <libobjc.A.dylib/AVCaptureMetadataOutputObjectsDelegate.h>
#import <WhatsApp/AVCaptureAudioDataOutputSampleBufferDelegate.h>
#import <WhatsApp/WACameraPreviewViewDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_group, WACameraControllerDelegate;
@class WACameraPreviewView, NSObject, NSMutableDictionary, AVCaptureSession, AVCaptureDeviceInput, AVCaptureStillImageOutput, AVCaptureVideoDataOutput, AVCaptureAudioDataOutput, AVCaptureMetadataOutput, AVAssetWriterInput, CIContext, AVAssetWriter, NSSet, UIView, NSArray, WACameraFilter, NSString;

@interface WACameraController : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, WACameraPreviewViewDelegate> {

	WACameraPreviewView* _previewView;
	NSObject*<OS_dispatch_queue> _captureQueue;
	NSObject*<OS_dispatch_queue> _audioCaptureQueue;
	NSObject*<OS_dispatch_queue> _videoCaptureQueue;
	NSObject*<OS_dispatch_group> _cameraConfigGroup;
	NSMutableDictionary* _faceObjects;
	char _isChangingCamerasInteractively;
	double _lastAutoFocusOnFaceTime;
	char _startSessionOnDidEnterForeground;
	id _defaultAudioActivity;
	id _videoRecordingAudioActivity;
	int _cameraState;
	AVCaptureSession* _captureSession;
	AVCaptureDeviceInput* _videoDeviceInput;
	AVCaptureDeviceInput* _audioDeviceInput;
	AVCaptureStillImageOutput* _stillImageOutput;
	AVCaptureVideoDataOutput* _videoDataOutput;
	AVCaptureAudioDataOutput* _audioDataOutput;
	AVCaptureMetadataOutput* _metadataOutput;
	AVAssetWriterInput* _audioWriterInput;
	AVAssetWriterInput* _videoWriterInput;
	opaqueCMFormatDescriptionRef _audioFormatDescription;
	opaqueCMFormatDescriptionRef _videoFormatDescription;
	CIContext* _ciContext;
	char _lockExposureAfterAutoExposure;
	char _needsReexposure;
	double _lastExposureLockTime;
	CGPoint _exposurePointOfInterest;
	opaqueCMBufferQueueRef _previewBufferQueue;
	unsigned long long _exposureLockID;
	int _deviceOrientationForCapture;
	AVAssetWriter* _assetWriter;
	char _isAssetWriterSessionStarted;
	char _needsFinishAssetWriterSession;
	int _acceptSampleBuffersLock;
	char _isAssetWriterAcceptingSampleBuffers;
	int _videoSampleTimeLock;
	SCD_Struct_WA3 _timeOfFirstAppendedVideoSampleBuffer;
	SCD_Struct_WA3 _timeOfLastAppendedVideoSampleBuffer;
	SCD_Struct_WA3 _maximumRecordingDuration;
	AVCaptureSession* _audioCaptureSession;
	SCD_Struct_WA72 _sampleTimingInfo;
	char _needsStartAssetWriterWhenAudioFormatDescriptionIsReady;
	int _startSessionCounter;
	char _useBackCamera;
	char _exposurePointOfInterestSupported;
	char _focusPointOfInterestSupported;
	char _flashActive;
	char _running;
	id<WACameraControllerDelegate> _delegate;
	int _cameraMode;
	NSSet* _supportedFlashModes;
	int _flashMode;
	float _maximumZoomFactor;
	float _currentZoomFactor;

}

@property (assign,nonatomic,__weak) id<WACameraControllerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) UIView * previewView;                                      //@synthesize previewView=_previewView - In the implementation block
@property (assign,getter=isPreviewPaused,nonatomic) char previewPaused; 
@property (nonatomic,readonly) CGSize previewImageSize; 
@property (nonatomic,readonly) char useBackCamera;                                        //@synthesize useBackCamera=_useBackCamera - In the implementation block
@property (nonatomic,readonly) char readyForMediaCapture; 
@property (nonatomic,readonly) int cameraMode;                                            //@synthesize cameraMode=_cameraMode - In the implementation block
@property (nonatomic,readonly) char exposurePointOfInterestSupported;                     //@synthesize exposurePointOfInterestSupported=_exposurePointOfInterestSupported - In the implementation block
@property (nonatomic,readonly) char focusPointOfInterestSupported;                        //@synthesize focusPointOfInterestSupported=_focusPointOfInterestSupported - In the implementation block
@property (nonatomic,readonly) NSSet * supportedFlashModes;                               //@synthesize supportedFlashModes=_supportedFlashModes - In the implementation block
@property (nonatomic,readonly) int flashMode;                                             //@synthesize flashMode=_flashMode - In the implementation block
@property (getter=isFlashActive,nonatomic,readonly) char flashActive;                     //@synthesize flashActive=_flashActive - In the implementation block
@property (nonatomic,readonly) float maximumZoomFactor;                                   //@synthesize maximumZoomFactor=_maximumZoomFactor - In the implementation block
@property (nonatomic,readonly) float currentZoomFactor;                                   //@synthesize currentZoomFactor=_currentZoomFactor - In the implementation block
@property (getter=isRunning,nonatomic,readonly) char running;                             //@synthesize running=_running - In the implementation block
@property (nonatomic,copy,readonly) NSArray * faceObjects; 
@property (nonatomic,retain) WACameraFilter * filter; 
@property (readonly) SCD_Struct_WA3 durationOfCurrentVideoRecording; 
@property (getter=isRecordingVideo,nonatomic,readonly) char recordingVideo; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)recoverUnsavedMediaIfNeeded;
+(void)requestCameraPermissionWithCompletionHandler:(/*^block*/id)arg1 ;
+(id)temporaryMediaPathWithExtension:(id)arg1 ;
+(char)hasActiveInstances;
+(id)cameraMediaDirectory;
+(int)imageOrientationForSourceVideoOrientation:(int)arg1 targetVideoOrientation:(int)arg2 backFacingCamera:(char)arg3 ;
+(id)videoCaptureDeviceWithPreferredPosition:(int)arg1 ;
+(int)backCameraVideoOrientationForDeviceOrientation:(int)arg1 ;
+(int)numberOfRightAnglesForVideoOrientation:(int)arg1 ;
+(int)frontCameraVideoOrientationForDeviceOrientation:(int)arg1 ;
-(void)setPointOfInterest:(CGPoint)arg1 ;
-(void)mediaServicesWereLost:(id)arg1 ;
-(char)isRecordingVideo;
-(char)readyForMediaCapture;
-(void)captureImageWithCompletion:(/*^block*/id)arg1 ;
-(id)redrawPreviewAndSnapshot;
-(char)useBackCamera;
-(void)blockCurrentThreadUntilDisplay;
-(void)setUseBackCamera:(char)arg1 completion:(/*^block*/id)arg2 ;
-(void)setFlashMode:(int)arg1 completion:(/*^block*/id)arg2 ;
-(NSSet *)supportedFlashModes;
-(float)maximumZoomFactor;
-(float)currentZoomFactor;
-(void)setZoomFactor:(float)arg1 completion:(/*^block*/id)arg2 ;
-(char)startVideoRecording;
-(void)stopVideoRecording;
-(void)cancelVideoRecording;
-(SCD_Struct_WA3)durationOfCurrentVideoRecording;
-(char)exposurePointOfInterestSupported;
-(char)focusPointOfInterestSupported;
-(NSArray *)faceObjects;
-(void)cameraPreviewViewDidChangeImageSize:(id)arg1 ;
-(void)performAnimationWithDuration:(double)arg1 key:(id)arg2 callback:(/*^block*/id)arg3 completion:(/*^block*/id)arg4 ;
-(id)initWithCameraMode:(int)arg1 useBackCamera:(char)arg2 ;
-(void)handleCaptureSessionRuntimeError:(id)arg1 ;
-(void)handleAudioSessionRouteChangeNotification:(id)arg1 ;
-(void)setUseBackCamera:(char)arg1 forCameraMode:(int)arg2 fromQueue:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)internalSetCameraMode:(int)arg1 ;
-(float)maximumZoomFactorForCurrentSettings;
-(void)internalSetUseBackCamera:(char)arg1 forCameraMode:(int)arg2 ;
-(id)supportedFlashModesForCurrentDevice;
-(void)internalSetFlashMode:(int)arg1 ;
-(CGAffineTransform)previewTransform;
-(void)setUpMicrophoneForCameraPosition:(char)arg1 ;
-(void)captureDeviceSubjectAreaDidChange:(id)arg1 ;
-(void)setUpMetadataOutputForCameraMode:(int)arg1 ;
-(void)resetPointOfInterest;
-(void)exposeAndFocusWithMode:(int)arg1 atDevicePoint:(CGPoint)arg2 monitorSubjectAreaChange:(char)arg3 ;
-(void)unlockExposure;
-(void)exposeAtPoint:(CGPoint)arg1 ;
-(void)drainBufferQueue:(opaqueCMBufferQueueRef)arg1 ;
-(opaqueCMSampleBufferRef)dequeueAndRetainBestSampleBufferInQueue:(opaqueCMBufferQueueRef)arg1 forPresentationTime:(SCD_Struct_WA3)arg2 ;
-(id)imageFromSampleBuffer:(opaqueCMSampleBufferRef)arg1 ;
-(void)prepareCaptureDeviceForVideoRecording:(id)arg1 ;
-(void)startAssetWriterSession;
-(SCD_Struct_WA3)preferredFrameRateForDevice:(id)arg1 ;
-(void)performStillImageCaptureAnimation;
-(void)didFailToPrepareRecording;
-(void)cleanUpAfterRecording;
-(void)resetCaptureDeviceAfterVideoRecording:(id)arg1 ;
-(void)finishAssetWriterSession;
-(id)qrCodeObjectWithMetadataObject:(id)arg1 ;
-(id)faceObjectWithMetadataObject:(id)arg1 fromConnection:(id)arg2 ;
-(void)updatePointOfInterestWithFaceMetadata;
-(char)isHoldingExposureLock;
-(void)updatePreviewWithSampleBuffer:(opaqueCMSampleBufferRef)arg1 ;
-(void)appendSampleBuffer:(opaqueCMSampleBufferRef)arg1 toWriterInput:(id)arg2 ;
-(id)imageFromImageBuffer:(CVBufferRef)arg1 imageOrientation:(int)arg2 ;
-(void)setCameraMode:(int)arg1 fromQueue:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)lockExposure;
-(void)getZoomFactorWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)isPreviewPaused;
-(void)setPreviewPaused:(char)arg1 ;
-(CGSize)previewImageSize;
-(WACameraFilter *)filter;
-(void)setDelegate:(id<WACameraControllerDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(id<WACameraControllerDelegate>)delegate;
-(void)applicationDidReceiveMemoryWarning:(id)arg1 ;
-(void)applicationWillEnterForeground:(id)arg1 ;
-(void)setFilter:(WACameraFilter *)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(char)isRunning;
-(void)mediaServicesWereReset:(id)arg1 ;
-(void)setDeviceOrientation:(int)arg1 ;
-(int)flashMode;
-(UIView *)previewView;
-(char)isFlashActive;
-(void)captureOutput:(id)arg1 didOutputSampleBuffer:(opaqueCMSampleBufferRef)arg2 fromConnection:(id)arg3 ;
-(void)captureOutput:(id)arg1 didOutputMetadataObjects:(id)arg2 fromConnection:(id)arg3 ;
-(void)startRunning;
-(void)stopRunning;
-(int)cameraMode;
@end

