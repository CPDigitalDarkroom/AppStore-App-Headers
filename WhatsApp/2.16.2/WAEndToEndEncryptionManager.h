/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 2:35:17 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/ABE77428-6C25-43C9-8AD9-E0579EF1E1DA/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <WhatsApp/WhatsApp-Structs.h>
#import <WhatsApp/WAUpgradeCallback.h>
#import <WhatsApp/WAAxolotlStoreDelegate.h>

@protocol OS_dispatch_group;
@class WAAxolotlCryptoProvider, NSObject, NSMutableSet, NSMutableDictionary, WAAxolotlStore, NSString;

@interface WAEndToEndEncryptionManager : NSObject <WAUpgradeCallback, WAAxolotlStoreDelegate> {

	WAAxolotlCryptoProvider* _cryptoProvider;
	axolotl_store_contextRef store_context;
	ratchet_identity_key_pairRef _identityKeyPair;
	NSObject*<OS_dispatch_group> _registrationDispatchGroup;
	char _needServerRegistration;
	char _digestCheckPending;
	NSMutableSet* _pendingKeyRequestJids;
	NSMutableDictionary* _pendingTasksForJid;
	WAAxolotlStore* _axolotlStore;
	char _registrationOnIdMismatchPermitted;
	char _needPhoneRestart;
	unsigned _registrationId;
	axolotl_contextRef _globalContext;

}

@property (assign) unsigned registrationId;                         //@synthesize registrationId=_registrationId - In the implementation block
@property (assign) axolotl_contextRef globalContext;                //@synthesize globalContext=_globalContext - In the implementation block
@property (assign,nonatomic) char needPhoneRestart;                 //@synthesize needPhoneRestart=_needPhoneRestart - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)wa_didUpgradeFrom:(id)arg1 to:(id)arg2 ;
+(void)setNeedDigestCheckFlag;
+(unsigned)wmCipherTypeFromAxolotlCipherType:(int)arg1 ;
+(id)xmppCipherTypeStringFromWMCipherType:(unsigned)arg1 ;
+(unsigned)wmCipherTypeFromXMPPCipherTypeString:(id)arg1 ;
+(id)sharedManager;
-(void)xmppConnectionStateDidChange:(id)arg1 ;
-(char)areCapabilities:(id)arg1 enabledForChatSession:(id)arg2 unsupportedJIDs:(out id*)arg3 inContactsMoc:(id)arg4 ;
-(void)sendE2eMessage:(id)arg1 forParticipant:(id)arg2 ;
-(char)shouldEncryptMessage:(id)arg1 ;
-(char)needPhoneRestart;
-(void)regenerateIdentity;
-(id)e2eMessageForMessage:(id)arg1 forParticipant:(id)arg2 errorReason:(out int*)arg3 ;
-(char)shouldEncryptSharedItem:(id)arg1 ;
-(id)e2eMessageForSharedItem:(id)arg1 errorReason:(out int*)arg2 ;
-(char)preflightChatSessionForSendingDocuments:(id)arg1 requiringCapabilities:(id)arg2 showingErrorFromViewControllerIfNeeded:(id)arg3 ;
-(unsigned)registrationId;
-(void)identityPublicKeyData:(out id*)arg1 error:(out id*)arg2 ;
-(void)signedPrekeyId:(out int*)arg1 keyData:(out id*)arg2 signatureData:(out id*)arg3 error:(out id*)arg4 ;
-(void)didReceiveRetryReceiptForStanzaID:(id)arg1 fromJID:(id)arg2 participantJID:(id)arg3 registrationId:(int)arg4 retryCount:(int)arg5 ;
-(void)retrySendMessageWithStanzaID:(id)arg1 fromJID:(id)arg2 participantJID:(id)arg3 retryCount:(int)arg4 ;
-(void)didReceiveUnknownTagsReceiptForStanzaID:(id)arg1 fromJID:(id)arg2 participantJID:(id)arg3 unknownTags:(id)arg4 ;
-(void)serverRejectRetryForReceipt:(id)arg1 registrationId:(int)arg2 fromJID:(id)arg3 participanr:(id)arg4 ;
-(char)loadIdentity;
-(void)setRegistrationId:(unsigned)arg1 ;
-(id)plaintextFromStandardCiphertext:(id)arg1 axolotlAddress:(axolotl_address*)arg2 axolotlErrno:(int*)arg3 ;
-(id)plaintextFromPreKeyCiphertext:(id)arg1 axolotlAddress:(axolotl_address*)arg2 axolotlErrno:(int*)arg3 ;
-(int)fsFailureReasonForAxolotlError:(int)arg1 ;
-(id)plaintextFromSenderKeyCiphertext:(id)arg1 axolotlSenderKeyName:(axolotl_sender_key_name*)arg2 axolotlErrno:(int*)arg3 ;
-(void)processSenderKeyDistributionMessageData:(id)arg1 axolotlSenderKeyName:(axolotl_sender_key_name*)arg2 errorReason:(int*)arg3 ;
-(id)decryptedE2eV1MessageForJid:(id)arg1 stanzaId:(id)arg2 cipherType:(id)arg3 encryptedData:(id)arg4 decryptEvent:(id)arg5 success:(char*)arg6 ;
-(id)decryptedE2eV2MessageForJid:(id)arg1 participant:(id)arg2 stanzaId:(id)arg3 cipherType:(id)arg4 encryptedData:(id)arg5 decryptEvent:(id)arg6 success:(char*)arg7 unknownTags:(id*)arg8 ;
-(long long)recepientIdForJid:(id)arg1 ;
-(void)requestKeyForJid:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(id)e2eMessageForMessage:(id)arg1 ;
-(int)encryptE2eMessage:(id)arg1 ;
-(id)e2eMessageForSharedItem:(id)arg1 ;
-(int)encryptWithIndividualCipherJid:(id)arg1 plaintext:(id)arg2 ciphertext:(out id*)arg3 ciphertextType:(out int*)arg4 ;
-(char)hasOutgoingSenderKeyStateForGroup:(id)arg1 ;
-(void)clearSessionForGroup:(id)arg1 ;
-(int)senderKeyData:(out id*)arg1 forGroupJid:(id)arg2 ;
-(void)setAxolotlAddress:(axolotl_address*)arg1 forJid:(id)arg2 ;
-(void)requestNewKeyForJid:(id)arg1 ;
-(int)encryptWithGroupCipherJid:(id)arg1 plaintext:(id)arg2 ciphertext:(out id*)arg3 ;
-(char)areCapabilities:(id)arg1 enabledForChatSession:(id)arg2 unsupportedJIDs:(id*)arg3 ;
-(char)isUserJidCapabilities:(id)arg1 e2eCapableForMessageType:(unsigned)arg2 withSessionType:(short)arg3 ;
-(char)shouldEncryptMessageWithType:(unsigned)arg1 forContactJid:(id)arg2 ;
-(char)shouldEncryptMessageWithType:(unsigned)arg1 inChatSession:(id)arg2 ;
-(void)addTask:(id)arg1 toResendQueueForJid:(id)arg2 ;
-(void)addPendingMessage:(id)arg1 forParticipant:(id)arg2 toResendQueueForJids:(id)arg3 ;
-(unsigned)sessionStatusForJid:(id)arg1 ;
-(void)clearAxolotlSessionForJid:(id)arg1 clearIdentity:(char)arg2 ;
-(int)axolotlBaseKeyData:(out id*)arg1 fromUserJid:(id)arg2 ;
-(void)generatePreKeys;
-(void)registerWithServerWithCompletion:(/*^block*/id)arg1 ;
-(void)sendMorePreKeys;
-(id)processPrekeyTasksWaitingOnPrekeyForJid:(id)arg1 ;
-(void)encryptedPayloadForVoIPKey:(id)arg1 toJid:(id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(void)checkServerDigest;
-(void)clearIdentity;
-(char)createIdentity;
-(id)keychainIdentityQuery;
-(void)setNeedPhoneRestart:(char)arg1 ;
-(char)migrateKeychainIdentity;
-(void)addPendingEncryptVoIPKey:(id)arg1 forJid:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(id)stableJidFromJid:(id)arg1 ;
-(void)axolotlFailedWithError:(id)arg1 ;
-(void)identityChangedForRecipientId:(long long)arg1 ;
-(id)decryptedE2eMessageForVersion:(int)arg1 jid:(id)arg2 participant:(id)arg3 stanzaId:(id)arg4 cipherType:(id)arg5 encryptedData:(id)arg6 retryCount:(int)arg7 success:(out char*)arg8 unknownTags:(out id*)arg9 ;
-(void)prepareSessionsForJids:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(id)requiredCapabilitiesForSendingMessages:(id)arg1 ;
-(char)shouldEncryptAudioForChatSession:(id)arg1 ;
-(void)beginProcessingIncomingMessages;
-(void)endProcessingIncomingMessages;
-(void)checkPreKeysCount;
-(char)processMismatchedRegistrationID:(int)arg1 forXMPPMessageStanza:(id)arg2 withRetryCount:(int)arg3 ;
-(void)checkRegistrationId:(unsigned)arg1 forJid:(id)arg2 ;
-(id)decryptedVoIPKeyForCiphertext:(id)arg1 withCipherType:(unsigned)arg2 forJid:(id)arg3 error:(out id*)arg4 ;
-(id)fingerprintForRemoteJID:(id)arg1 ;
-(char)canVerifyFingerprintForJid:(id)arg1 ;
-(void)setGlobalContext:(axolotl_contextRef)arg1 ;
-(void)dealloc;
-(id)init;
-(axolotl_contextRef)globalContext;
@end

