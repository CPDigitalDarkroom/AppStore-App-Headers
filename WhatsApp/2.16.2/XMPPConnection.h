/*
* This header is generated by classdump-dyld 1.0
* on Saturday, May 14, 2016 at 2:35:15 PM Eastern Daylight Time
* Operating System: Version 9.0.2 (Build 13A452)
* Image Source: /var/mobile/Containers/Bundle/Application/ABE77428-6C25-43C9-8AD9-E0579EF1E1DA/WhatsApp.app/WhatsApp
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <WhatsApp/WhatsApp-Structs.h>
#import <WhatsApp/XMPPStreamDelegate.h>

@protocol OS_dispatch_source, XMPPConnectionDelegate, OS_dispatch_queue;
@class WATimer, NSMutableSet, NSMutableDictionary, NSMutableArray, NSObject, WABatchDispatcher, NSDictionary, NSString, XMPPConnectionConfiguration, WAFieldStatsEventChatConnectionProbe, XMPPStream;

@interface XMPPConnection : NSObject <XMPPStreamDelegate> {

	WATimer* _updatePresenceTimer;
	NSMutableSet* _deferredSubscribes;
	NSMutableDictionary* _clientData;
	unsigned _lastSentPresence;
	NSMutableDictionary* _timers;
	NSMutableDictionary* _unsentMessages;
	NSMutableDictionary* _unsentCallStanzas;
	NSMutableArray* _pendingRequests;
	char _firstOfflineMessageReceived;
	NSMutableArray* _recentlySentAcks;
	NSMutableArray* _acks;
	NSMutableDictionary* _sentReadReceipts;
	NSMutableArray* _readReceiptsToProcess;
	NSObject*<OS_dispatch_source> _delayedProcessTimer;
	double _connectionAttemptStartTime;
	double _connectionStartTime;
	WABatchDispatcher* _incomingMessageStanzaDispatcher;
	NSObject*<OS_dispatch_source> _checkConnectionTimer;
	NSObject*<OS_dispatch_source> _checkFieldStatsTimer;
	int _connectionHandlersLock;
	NSMutableArray* _connectionHandlers;
	int _stateLock;
	NSDictionary* _stateChangeCallbacks;
	unsigned _state;
	unsigned _networkStatus;
	int _networkStatusLock;
	NSString* _radioAccessTechnology;
	XMPPConnectionConfiguration* _config;
	char _isHoldingConnectionLock;
	int _backgroundConnectionAttempts;
	int _foregroundConnectionAttempts;
	char _voipNetworkDidChange;
	char _checkConnectionScheduledOnStateChange;
	NSMutableArray* _connectionConditionals;
	char _isConnectionCheckingInProgress;
	char _isDisconnectRequested;
	int _suppressReconnectCounter;
	NSMutableArray* _internalDisconnectCallbacks;
	SCNetworkReachabilityRef _reachabilityRef;
	SCD_Struct_XM20* _reachabilityContext;
	char _isCheckingInternetConnection;
	NSString* _lastConnectionErrorMessage;
	unsigned _xmppAuthNetworkStatus;
	WAFieldStatsEventChatConnectionProbe* _connectionProbe;
	char _active;
	int _lastOfflineQueueCount;
	NSString* _serverPropsVersion;
	id<XMPPConnectionDelegate> _delegate;
	XMPPStream* _stream;
	NSObject*<OS_dispatch_queue> _xmppQueue;
	double _voipPushDelayWithSkew;
	double _serverTimeShift;

}

@property (assign,getter=isActive,nonatomic) char active;                               //@synthesize active=_active - In the implementation block
@property (readonly) unsigned state; 
@property (getter=isConnected,readonly) char connected; 
@property (readonly) unsigned networkStatus; 
@property (readonly) unsigned serverConnectionStatus; 
@property (assign) int lastOfflineQueueCount;                                           //@synthesize lastOfflineQueueCount=_lastOfflineQueueCount - In the implementation block
@property (assign) double voipPushDelayWithSkew;                                        //@synthesize voipPushDelayWithSkew=_voipPushDelayWithSkew - In the implementation block
@property (nonatomic,copy,readonly) NSString * networkStatusErrorMessage; 
@property (nonatomic,copy,readonly) NSString * genericNetworkErrorMessage; 
@property (assign) double serverTimeShift;                                              //@synthesize serverTimeShift=_serverTimeShift - In the implementation block
@property (retain) NSString * serverPropsVersion;                                       //@synthesize serverPropsVersion=_serverPropsVersion - In the implementation block
@property (assign,nonatomic,__weak) id<XMPPConnectionDelegate> delegate;                //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) XMPPStream * stream;                                     //@synthesize stream=_stream - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> xmppQueue;                  //@synthesize xmppQueue=_xmppQueue - In the implementation block
@property (nonatomic,readonly) NSString * currentIP; 
@property (nonatomic,readonly) NSString * currentHost; 
@property (nonatomic,readonly) unsigned short currentPort; 
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)stateToString:(unsigned)arg1 ;
-(void)getProfilePictureForJID:(id)arg1 type:(unsigned)arg2 identifier:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)respondToServerErrorReceiptByResendingMessage:(id)arg1 toParticipant:(id)arg2 ;
-(void)sendMessage:(id)arg1 forParticipant:(id)arg2 ;
-(void)sendReadReceiptsForChatMessages:(id)arg1 ;
-(void)sendPlayedReceiptForMessage:(id)arg1 ;
-(void)reportLocation:(id)arg1 ;
-(void)changeStatus:(unsigned)arg1 forIncomingMessageWithStanzaID:(id)arg2 fromJID:(id)arg3 participantJID:(id)arg4 ;
-(void)performBlock:(/*^block*/id)arg1 onQueue:(id)arg2 onConnectionState:(unsigned)arg3 ;
-(void)updatePresence;
-(void)disconnectIfStuckInConnecting;
-(void)handleRemotePushWithPayload:(id)arg1 ;
-(void)reportVoipPushDelay:(double)arg1 ;
-(NSString *)networkStatusErrorMessage;
-(int)lastOfflineQueueCount;
-(double)serverTimeShift;
-(unsigned)networkStatus;
-(NSString *)genericNetworkErrorMessage;
-(void)sendGlobalPushConfig:(id)arg1 customSettings:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)registerConnectionConditional:(/*^block*/id)arg1 onQueue:(id)arg2 ;
-(unsigned)serverConnectionStatus;
-(void)resetConnectionAttempts;
-(void)setXmppUser:(id)arg1 ;
-(void)reloadPrivateKey;
-(void)reachabilityDidChangeWithFlags:(unsigned)arg1 ;
-(void)checkFieldStats;
-(void)systemTimeChanged:(id)arg1 ;
-(void)radioAccessTechnologyDidChange:(id)arg1 ;
-(void)setServerTimeShift:(double)arg1 ;
-(void)setVoipPushDelayWithSkew:(double)arg1 ;
-(char)isRequestPending:(id)arg1 ;
-(void)performBlockOnXMPPQueue:(/*^block*/id)arg1 ;
-(unsigned short)currentPort;
-(void)logConnectionAttemptErrorMessageIfNeeded:(id)arg1 ;
-(void)markMessagesAsUnsent;
-(void)startMessageTimeout:(id)arg1 ;
-(void)updateLastSentChatState:(unsigned)arg1 forJID:(id)arg2 ;
-(void)sendMessageStanza:(id)arg1 ;
-(void)internalRequestUploadUrlForFileHash:(id)arg1 origHash:(id)arg2 filetype:(unsigned)arg3 filesize:(unsigned long long)arg4 mediaIndex:(int)arg5 totalMediaCount:(int)arg6 completion:(/*^block*/id)arg7 ;
-(void)internalRequestEncUploadUrlForHash:(id)arg1 filetype:(unsigned)arg2 mediaIndex:(int)arg3 totalMediaCount:(int)arg4 completion:(/*^block*/id)arg5 ;
-(void)setNetworkStatus:(unsigned)arg1 ;
-(void)sendPresenceWithNickname:(id)arg1 ;
-(void)resendAllPendingRequests;
-(void)performOnStreamOpen;
-(double)voipPushDelayWithSkew;
-(void)setServerPropsVersion:(NSString *)arg1 ;
-(void)sendIQResponse:(id)arg1 ;
-(void)processIncomingIQ:(id)arg1 ;
-(void)processIncomingMessages:(id)arg1 ;
-(void)processIncomingPresence:(id)arg1 ;
-(void)processIncomingAck:(id)arg1 ;
-(void)processIncomingChatState:(id)arg1 ;
-(void)sendAckForNotification:(id)arg1 ;
-(void)processIncomingNotification:(id)arg1 ;
-(void)setLastOfflineQueueCount:(int)arg1 ;
-(void)notifyConnectionHandlersOfOfflineMarker;
-(void)processIncomingCustomStanza:(id)arg1 ;
-(void)resetPresenceStateOnStreamClose;
-(char)isSocketHealthy;
-(void)forceLeaveFetchOfflineStateIfNeeded;
-(void)connectIfPossible;
-(void)checkIfConnectionIsAllowedWithCompletionHandler:(/*^block*/id)arg1 ;
-(char)shouldBindToCellular:(char)arg1 ;
-(void)reallyConnect;
-(void)checkInternetConnection;
-(void)logReachabilityFlags:(unsigned)arg1 ;
-(void)xmppStreamDidAuthenticate:(id)arg1 attributes:(id)arg2 serverTimeShift:(double)arg3 ;
-(void)xmppStreamDidNotAuthenticate:(id)arg1 failureCode:(int)arg2 lockDuration:(double)arg3 retryAfter:(double)arg4 tempBanReasonCode:(int)arg5 ;
-(void)xmppStreamDidOpen:(id)arg1 ;
-(void)xmppStreamDidClose:(id)arg1 ;
-(void)xmppStreamDidConnect:(id)arg1 ;
-(void)xmppStream:(id)arg1 didReceiveIQ:(id)arg2 ;
-(void)xmppStream:(id)arg1 didReceiveMessages:(id)arg2 ;
-(void)xmppStream:(id)arg1 didReceivePresence:(id)arg2 ;
-(void)xmppStream:(id)arg1 didReceiveReceipt:(id)arg2 ;
-(void)xmppStream:(id)arg1 didReceiveAck:(id)arg2 ;
-(void)xmppStream:(id)arg1 didReceiveChatState:(id)arg2 ;
-(void)xmppStream:(id)arg1 didReceiveNotification:(id)arg2 ;
-(void)xmppStream:(id)arg1 didReceiveCustomStanza:(id)arg2 ;
-(void)xmppStream:(id)arg1 initialConfigurationAsync:(/*^block*/id)arg2 ;
-(char)xmppStream:(id)arg1 didReceiveLoginResponseStanza:(id)arg2 ;
-(void)addConnectionHandler:(id)arg1 ;
-(void)removeConnectionHandler:(id)arg1 ;
-(NSString *)currentIP;
-(void)endMessageTimeout:(id)arg1 ;
-(void)sendSharedItem:(id)arg1 ;
-(void)requestUploadUrlForFileHash:(id)arg1 origHash:(id)arg2 filetype:(unsigned)arg3 filesize:(unsigned long long)arg4 mediaIndex:(int)arg5 totalMediaCount:(int)arg6 completion:(/*^block*/id)arg7 ;
-(void)requestEncUploadUrlForHash:(id)arg1 filetype:(unsigned)arg2 mediaIndex:(int)arg3 totalMediaCount:(int)arg4 completion:(/*^block*/id)arg5 ;
-(void)ackMediaForURLString:(id)arg1 sourceIsSelf:(char)arg2 completion:(/*^block*/id)arg3 ;
-(void)uploadFieldStats;
-(id)convertOutgoingEmojiString:(id)arg1 ;
-(id)createPresence:(unsigned)arg1 withNickname:(id)arg2 ;
-(NSString *)serverPropsVersion;
-(NSObject*<OS_dispatch_queue>)xmppQueue;
-(void)sendBlockedContactsList:(id)arg1 webClientRequestID:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)getBlockedContactsListWithCompletion:(/*^block*/id)arg1 ;
-(void)queryPrivacySettingsWithCompletion:(/*^block*/id)arg1 ;
-(void)resetCachedLastSeen;
-(void)setPrivacySettings:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)queryServerPropertiesWithCompletion:(/*^block*/id)arg1 ;
-(void)presenceSubscribeToJIDIfNecessary:(id)arg1 ;
-(void)reportChatState:(unsigned)arg1 forJID:(id)arg2 ;
-(unsigned)latestChatStateForGroupWithJID:(id)arg1 returningParticipantJID:(out id*)arg2 ;
-(unsigned)chatStateForContactWithJID:(id)arg1 ;
-(void)sendRecoveryToken:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)sendChangeAuthPublicKey:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)getStatusForJIDs:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)cleanDirtyBits:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)changeNumberWithUsername:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)setStatus:(id)arg1 fromWebClientRequestID:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)sendRetryReceiptForMessageId:(id)arg1 toJID:(id)arg2 participant:(id)arg3 retryCount:(int)arg4 timeAttribute:(id)arg5 ;
-(void)sendRetryReceiptForMessage:(id)arg1 retryCount:(int)arg2 ;
-(void)setLocationSharingEndTime:(id)arg1 forGroupWithJID:(id)arg2 completion:(/*^block*/id)arg3 ;
-(char)hasPendingRequestsForGroupWithJID:(id)arg1 participantJID:(id)arg2 ;
-(void)stopLocationSharingForGroupWithJID:(id)arg1 ;
-(void)requestLocationSharingForGroupWithJID:(id)arg1 reportParticipants:(char)arg2 completion:(/*^block*/id)arg3 ;
-(void)sendCallStanza:(id)arg1 ;
-(void)sendCallReceiptOrAck:(id)arg1 ;
-(void)normalizePhoneNumber:(id)arg1 countryCode:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)setProfilePictureForJID:(id)arg1 pictureData:(id)arg2 previewData:(id)arg3 webClientRequestID:(id)arg4 completion:(/*^block*/id)arg5 ;
-(void)sendPushName:(id)arg1 ;
-(char)isOnline:(id)arg1 ;
-(id)lastSeenTimestampForJID:(id)arg1 ;
-(void)reportSpamMessagesInChatSession:(id)arg1 ;
-(void)deleteAccountWithFeedback:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)syncPhoneNumbers:(id)arg1 deletedJIDs:(id)arg2 mode:(unsigned)arg3 context:(unsigned)arg4 timeout:(double)arg5 completion:(/*^block*/id)arg6 ;
-(void)deleteBroadcastListFromServer:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)requestCapabilityForJIDs:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)requestSyncWithContext:(id)arg1 ;
-(id)clientDataForJID:(id)arg1 ;
-(id)addClientDataForJID:(id)arg1 ;
-(void)checkIncomingChatStateForJID:(id)arg1 participantJID:(id)arg2 ;
-(void)resetAllChatStatesAndClearSubscriptions:(char)arg1 ;
-(void)sendUnknownTagsReceiptForMessage:(id)arg1 unknownTags:(id)arg2 ;
-(void)sendDeliveryReceiptsForChatMessages:(id)arg1 ;
-(void)sendDeliveryReceiptsForMessageStanzas:(id)arg1 ;
-(void)removeCallWatchdogs;
-(void)startCallStanzaTimeout:(id)arg1 ;
-(void)resendUnsentMessages;
-(void)resendUnsentCallStanzas;
-(void)setIncomingChatState:(unsigned)arg1 forJID:(id)arg2 participantJID:(id)arg3 ;
-(char)isMessageStanzaRecentlyAcked:(id)arg1 ;
-(void)setUpIncomingMessageDispatcherIfNeeded;
-(id)processIncomingMessageStanzas:(id)arg1 ;
-(void)removeClientDataForJID:(id)arg1 ;
-(void)delayedReceiptsUpdate;
-(void)endCallStanzaTimeout:(id)arg1 ;
-(void)createGroupWithSubject:(id)arg1 participantJIDs:(id)arg2 key:(id)arg3 locked:(char)arg4 webClientRequestID:(id)arg5 completion:(/*^block*/id)arg6 ;
-(void)setSubject:(id)arg1 forGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)removeParticipants:(id)arg1 fromGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)addParticipants:(id)arg1 toGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)promoteParticipants:(id)arg1 inGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)demoteParticipants:(id)arg1 inGroupWithJID:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)requestInfoForGroupWithJID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)leaveGroupWithJID:(id)arg1 webClientRequestID:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)deleteGroupWithJID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)requestParticipatingGroupsWithCompletion:(/*^block*/id)arg1 ;
-(void)requestBroadcastListsWithCompletion:(/*^block*/id)arg1 ;
-(void)sendServerErrorReceiptForMessage:(id)arg1 ;
-(void)enqueueRequest:(id)arg1 ;
-(NSString *)currentHost;
-(void)drop;
-(void)ping;
-(void)cancelAllRequests;
-(void)setDelegate:(id<XMPPConnectionDelegate>)arg1 ;
-(void)dealloc;
-(id<XMPPConnectionDelegate>)delegate;
-(unsigned)state;
-(char)isActive;
-(void)setState:(unsigned)arg1 ;
-(void)setActive:(char)arg1 ;
-(void)connect;
-(void)disconnect;
-(void)checkConnection;
-(char)isConnected;
-(id)initWithConfiguration:(id)arg1 ;
-(XMPPStream *)stream;
-(void)closeStream;
@end

